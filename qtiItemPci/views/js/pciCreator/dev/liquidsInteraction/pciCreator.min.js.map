{"version":3,"sources":["../../../qtiItemPci/views/js/pciCreator/dev/liquidsInteraction/creator/tpl/propertiesForm!tpl","../../../qtiItemPci/views/js/pciCreator/dev/liquidsInteraction/creator/widget/states/Question.js","../../../qtiItemPci/views/js/pciCreator/dev/liquidsInteraction/creator/widget/states/Answer.js","../../../qtiItemPci/views/js/pciCreator/dev/liquidsInteraction/creator/widget/states/Correct.js","../../../qtiItemPci/views/js/pciCreator/dev/liquidsInteraction/creator/widget/states/states.js","../../../qtiItemPci/views/js/pciCreator/dev/liquidsInteraction/creator/widget/Widget.js","../../../qtiItemPci/views/js/pciCreator/dev/liquidsInteraction/creator/tpl/markup!tpl","../../../qtiItemPci/views/js/pciCreator/dev/liquidsInteraction/pciCreator.js"],"names":["define","hb","template","Handlebars","depth0","helpers","partials","data","this","compilerInfo","merge","stack1","helper","options","buffer","helperMissing","escapeExpression","__","hash","call","identifier","serial","stateFactory","Question","formElement","formTpl","overlayTpl","LiquidsInteractionStateQuestion","extend","widget","$container","append","children","remove","prototype","initForm","_widget","$form","interaction","element","response","getResponseDeclaration","html","attr","initWidget","setChangeCallbacks","i","value","id","Answer","answerStateHelper","forward","Correct","_","create","responseDeclaration","correct","values","getCorrect","setResponse","base","integer","onPci","correctResponse","push","setCorrect","resetResponse","offPci","factory","states","createBundle","arguments","Widget","LiquidsInteractionWidget","clone","initCreator","registerStates","prompt","markupTpl","getTypeIdentifier","getWidget","getDefaultProperties","pci","afterCreate","getMarkupTemplate","getMarkupData","defaultData","PCI"],"mappings":"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","file":"pciCreator.min.js","sourcesContent":["\ndefine('tpl!liquidsInteraction/creator/tpl/propertiesForm', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, functionType=\"function\";\n\n\n  buffer += \"<div class=\\\"panel\\\">\\n    <label for=\\\"\\\" class=\\\"has-icon\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Response identifier\", options) : helperMissing.call(depth0, \"__\", \"Response identifier\", options)))\n    + \"</label>\\n    <span class=\\\"icon-help tooltipstered\\\" data-tooltip=\\\"~ .tooltip-content:first\\\" data-tooltip-theme=\\\"info\\\"></span>\\n    <div class=\\\"tooltip-content\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"The identifier of the choice. This identifier must not be used by any other response or item variable. An identifier is a string of characters that must start with a Letter or an underscore (\\\"_\\\") and contain only Letters, underscores, hyphens (\\\"-\\\"), period (\\\".\\\", a.k.a. full-stop), Digits, CombiningChars and Extenders.\", options) : helperMissing.call(depth0, \"__\", \"The identifier of the choice. This identifier must not be used by any other response or item variable. An identifier is a string of characters that must start with a Letter or an underscore (\\\"_\\\") and contain only Letters, underscores, hyphens (\\\"-\\\"), period (\\\".\\\", a.k.a. full-stop), Digits, CombiningChars and Extenders.\", options)))\n    + \"</div>\\n\\n    <input type=\\\"text\\\" \\n           name=\\\"identifier\\\" \\n           value=\\\"\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" \\n           placeholder=\\\"e.g. RESPONSE\\\" \\n           data-validate=\\\"$notEmpty; $qtiIdentifier; $availableIdentifier(serial=\";\n  if (helper = helpers.serial) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.serial); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \");\\\">\\n</div>\";\n  return buffer;\n  });\n});\n\n","define('liquidsInteraction/creator/widget/states/Question',[\n    'taoQtiItem/qtiCreator/widgets/states/factory',\n    'taoQtiItem/qtiCreator/widgets/interactions/states/Question',\n    'taoQtiItem/qtiCreator/widgets/helpers/formElement',\n    'tpl!liquidsInteraction/creator/tpl/propertiesForm',\n    'tpl!taoQtiItem/qtiCreator/tpl/notifications/widgetOverlay'\n], function(stateFactory, Question, formElement, formTpl, overlayTpl){\n\n    var LiquidsInteractionStateQuestion = stateFactory.extend(Question, function(){\n\n        //add transparent protective layer\n        this.widget.$container.append(overlayTpl());\n\n    }, function(){\n\n        //remove transparent protective layer\n        this.widget.$container.children('.overlay').remove();\n        \n    });\n\n    LiquidsInteractionStateQuestion.prototype.initForm = function(){\n\n        var _widget = this.widget,\n            $form = _widget.$form,\n            interaction = _widget.element,\n            response = interaction.getResponseDeclaration();\n\n        //render the form using the form template\n        $form.html(formTpl({\n            serial : response.serial,\n            identifier : interaction.attr('responseIdentifier')\n        }));\n\n        //init form javascript\n        formElement.initWidget($form);\n\n        //init data change callbacks\n        formElement.setChangeCallbacks($form, interaction, {\n            \n            identifier : function(i, value){\n                response.id(value);\n                interaction.attr('responseIdentifier', value);\n            }\n        });\n\n    };\n\n    return LiquidsInteractionStateQuestion;\n});\n\n","define('liquidsInteraction/creator/widget/states/Answer',[\n    'taoQtiItem/qtiCreator/widgets/states/factory',\n    'taoQtiItem/qtiCreator/widgets/interactions/states/Answer',\n    'taoQtiItem/qtiCreator/widgets/interactions/helpers/answerState'\n], function(stateFactory, Answer, answerStateHelper){\n\n    var LiquidsInteractionStateAnswer = stateFactory.extend(Answer, function(){\n        \n        //forward to one of the available sub state, according to the response processing template\n        answerStateHelper.forward(this.widget);\n        \n    }, function(){\n        \n    });\n    \n    return  LiquidsInteractionStateAnswer;\n});\n","define('liquidsInteraction/creator/widget/states/Correct',[\n    'taoQtiItem/qtiCreator/widgets/states/factory',\n    'taoQtiItem/qtiCreator/widgets/states/Correct',\n    'lodash'\n], function(stateFactory, Correct, _){\n\n    var LiquidsInteractionStateCorrect = stateFactory.create(Correct, function(){\n    \n        var widget = this.widget;\n        var interaction = widget.element;\n        var responseDeclaration = interaction.getResponseDeclaration();\n        var correct = _.values(responseDeclaration.getCorrect());\n        \n        // show correct response in liquid container.\n        if (typeof correct[0] !== 'undefined') {\n            interaction.setResponse( { base: { integer: correct[0] } });\n        }\n        \n        interaction.onPci('responsechange.question', function(response){\n            var correctResponse = [];\n            \n            if (response.base !== null) {\n                correctResponse.push(response.base.integer);\n            }\n            \n            responseDeclaration.setCorrect(correctResponse);\n        });\n\n    }, function(){\n        var widget = this.widget;\n        var interaction = widget.element;\n        \n        interaction.resetResponse();\n        interaction.offPci('.question');\n    });\n\n    return LiquidsInteractionStateCorrect;\n});\n\n","define('liquidsInteraction/creator/widget/states/states',[\n    'taoQtiItem/qtiCreator/widgets/states/factory',\n    'taoQtiItem/qtiCreator/widgets/interactions/customInteraction/states/states',\n    'liquidsInteraction/creator/widget/states/Question',\n    'liquidsInteraction/creator/widget/states/Answer',\n    'liquidsInteraction/creator/widget/states/Correct'\n], function(factory, states){\n    return factory.createBundle(states, arguments, ['map']);\n});\n","define('liquidsInteraction/creator/widget/Widget',[\n    'taoQtiItem/qtiCreator/widgets/interactions/customInteraction/Widget',\n    'liquidsInteraction/creator/widget/states/states'\n], function(Widget, states){\n\n    var LiquidsInteractionWidget = Widget.clone();\n\n    LiquidsInteractionWidget.initCreator = function(){\n        \n        this.registerStates(states);\n        \n        Widget.initCreator.call(this);\n    };\n    \n    return LiquidsInteractionWidget;\n});\n","\ndefine('tpl!liquidsInteraction/creator/tpl/markup', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, functionType=\"function\", escapeExpression=this.escapeExpression;\n\n\n  buffer += \"<div class=\\\"liquidsInteraction\\\">\\n    <div class=\\\"prompt\\\">\";\n  if (helper = helpers.prompt) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.prompt); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</div>\\n    <canvas class=\\\"liquids\\\" width=\\\"400\\\" height=\\\"400\\\"></canvas>\\n</div>\";\n  return buffer;\n  });\n});\n\n","define('liquidsInteraction/pciCreator',[\n    'lodash',\n    'liquidsInteraction/creator/widget/Widget',\n    'tpl!liquidsInteraction/creator/tpl/markup'\n], function(_, Widget, markupTpl){\n\n    var _typeIdentifier = 'liquidsInteraction';\n\n    var liquidsInteractionCreator = {\n        /**\n         * (required) Get the typeIdentifier of the custom interaction\n         * \n         * @returns {String}\n         */\n        getTypeIdentifier : function(){\n            return _typeIdentifier;\n        },\n        /**\n         * (required) Get the widget prototype\n         * Used in the renderer\n         * \n         * @returns {Object} Widget\n         */\n        getWidget : function(){\n            return Widget;\n        },\n        /**\n         * (optional) Get the default properties values of the pci.\n         * Used on new pci instance creation\n         * \n         * @returns {Object}\n         */\n        getDefaultProperties : function(pci){\n            return {};\n        },\n        /**\n         * (optional) Callback to execute on the \n         * Used on new pci instance creation\n         * \n         * @returns {Object}\n         */\n        afterCreate : function(pci){\n            //do some stuff\n        },\n        /**\n         * (required) Gives the qti pci xml template \n         * \n         * @returns {function} handlebar template\n         */\n        getMarkupTemplate : function(){\n            return markupTpl;\n        },\n        /**\n         * (optional) Allows passing additional data to xml template\n         * \n         * @returns {function} handlebar template\n         */\n        getMarkupData : function(pci, defaultData){\n            defaultData.prompt = pci.data('prompt');\n            return defaultData;\n        }\n    };\n\n    //since we assume we are in a tao context, there is no use to expose the a global object for lib registration\n    //all libs should be declared here\n    return liquidsInteractionCreator;\n});\n"]}