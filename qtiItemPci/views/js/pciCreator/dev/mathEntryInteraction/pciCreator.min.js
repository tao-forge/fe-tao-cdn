define("tpl!mathEntryInteraction/creator/tpl/propertiesForm",["handlebars"],function(hb){return hb.template(function(Handlebars,depth0,helpers,partials,data){function program1(depth0,data){return'checked="checked"'}function program3(depth0,data){return'style="display:none"'}this.compilerInfo=[4,">= 1.0.0"],helpers=this.merge(helpers,Handlebars.helpers),data=data||{};var stack1,helper,options,buffer="",helperMissing=helpers.helperMissing,escapeExpression=this.escapeExpression,self=this;return buffer+='<div class="panel">\n    <label for="" class="has-icon">'+escapeExpression((helper=helpers.__||depth0&&depth0.__,options={hash:{},data:data},
helper?helper.call(depth0,"Response identifier",options):helperMissing.call(depth0,"__","Response identifier",options)))+'</label>\n    <span class="icon-help tooltipstered" data-tooltip="~ .tooltip-content:first" data-tooltip-theme="info"></span>\n    <div class="tooltip-content">'+escapeExpression((helper=helpers.__||depth0&&depth0.__,options={hash:{},data:data},
helper?helper.call(depth0,'The identifier of the choice. This identifier must not be used by any other response or item variable. An identifier is a string of characters that must start with a Letter or an underscore ("_") and contain only Letters, underscores, hyphens ("-"), period (".", a.k.a. full-stop), Digits, CombiningChars and Extenders.',options):helperMissing.call(depth0,"__",'The identifier of the choice. This identifier must not be used by any other response or item variable. An identifier is a string of characters that must start with a Letter or an underscore ("_") and contain only Letters, underscores, hyphens ("-"), period (".", a.k.a. full-stop), Digits, CombiningChars and Extenders.',options)))+'</div>\n\n    <input type="text"\n           name="identifier"\n           value="',
(helper=helpers.identifier)?stack1=helper.call(depth0,{hash:{},data:data}):(helper=depth0&&depth0.identifier,stack1="function"==typeof helper?helper.call(depth0,{hash:{},data:data}):helper),buffer+=escapeExpression(stack1)+'"\n           placeholder="e.g. RESPONSE"\n           data-validate="$notEmpty; $qtiIdentifier; $availableIdentifier(serial=',(helper=helpers.serial)?stack1=helper.call(depth0,{hash:{},data:data}):(helper=depth0&&depth0.serial,stack1="function"==typeof helper?helper.call(depth0,{hash:{},data:data}):helper),buffer+=escapeExpression(stack1)+');">\n</div>\n\n<hr />\n\n<h3>'+escapeExpression((helper=helpers.__||depth0&&depth0.__,options={
hash:{},data:data},helper?helper.call(depth0,"Options",options):helperMissing.call(depth0,"__","Options",options)))+'</h3>\n\n<div>\n    <label class="panel">\n        <input name="authorizeWhiteSpace" type="checkbox" ',stack1=helpers.if.call(depth0,depth0&&depth0.authorizeWhiteSpace,{hash:{},inverse:self.noop,fn:self.program(1,program1,data),data:data}),(stack1||0===stack1)&&(buffer+=stack1),buffer+='/>\n        <span class="icon-checkbox"></span>\n        '+escapeExpression((helper=helpers.__||depth0&&depth0.__,options={hash:{},data:data},
helper?helper.call(depth0,"authorize white space",options):helperMissing.call(depth0,"__","authorize white space",options)))+'\n    </label>\n    <label class="panel">\n        <input name="useGapExpression" type="checkbox" ',stack1=helpers.if.call(depth0,depth0&&depth0.useGapExpression,{hash:{},inverse:self.noop,fn:self.program(1,program1,data),data:data}),(stack1||0===stack1)&&(buffer+=stack1),buffer+='/>\n        <span class="icon-checkbox"></span>\n        '+escapeExpression((helper=helpers.__||depth0&&depth0.__,options={hash:{},data:data},
helper?helper.call(depth0,"use expression with gaps",options):helperMissing.call(depth0,"__","use expression with gaps",options)))+'\n    </label>\n    <div class="panel mathgap-style-box" ',stack1=helpers.unless.call(depth0,depth0&&depth0.useGapExpression,{hash:{},inverse:self.noop,fn:self.program(3,program3,data),data:data}),(stack1||0===stack1)&&(buffer+=stack1),buffer+='>\n        <label for="gapStyle">'+escapeExpression((helper=helpers.__||depth0&&depth0.__,options={hash:{},data:data},
helper?helper.call(depth0,"Gap size",options):helperMissing.call(depth0,"__","Gap size",options)))+'</label>\n        <select name="gapStyle" data-mathgap-style>\n            <option value="math-gap-small">'+escapeExpression((helper=helpers.__||depth0&&depth0.__,options={hash:{},data:data},helper?helper.call(depth0,"Small",options):helperMissing.call(depth0,"__","Small",options)))+'</option>\n            <option value="math-gap-medium">'+escapeExpression((helper=helpers.__||depth0&&depth0.__,options={hash:{},data:data},
helper?helper.call(depth0,"Medium",options):helperMissing.call(depth0,"__","Medium",options)))+'</option>\n            <option value="math-gap-large">'+escapeExpression((helper=helpers.__||depth0&&depth0.__,options={hash:{},data:data},helper?helper.call(depth0,"Large",options):helperMissing.call(depth0,"__","Large",options)))+"</option>\n        </select>\n    </div>\n</div>\n\n<hr />\n\n<h3>"+escapeExpression((helper=helpers.__||depth0&&depth0.__,options={hash:{},data:data},
helper?helper.call(depth0,"Functions",options):helperMissing.call(depth0,"__","Functions",options)))+'</h3>\n\n<div>\n    <label class="panel">\n        <input name="tool_sqrt" type="checkbox" ',stack1=helpers.if.call(depth0,depth0&&depth0.tool_sqrt,{hash:{},inverse:self.noop,fn:self.program(1,program1,data),data:data}),(stack1||0===stack1)&&(buffer+=stack1),buffer+='/>\n        <span class="icon-checkbox"></span>\n        &radic; '+escapeExpression((helper=helpers.__||depth0&&depth0.__,options={hash:{},data:data},
helper?helper.call(depth0,"square root",options):helperMissing.call(depth0,"__","square root",options)))+'\n    </label>\n</div>\n<div>\n    <label class="panel">\n        <input name="tool_frac" type="checkbox" ',stack1=helpers.if.call(depth0,depth0&&depth0.tool_frac,{hash:{},inverse:self.noop,fn:self.program(1,program1,data),data:data}),(stack1||0===stack1)&&(buffer+=stack1),buffer+='/>\n        <span class="icon-checkbox"></span>\n        '+escapeExpression((helper=helpers.__||depth0&&depth0.__,options={hash:{},data:data},
helper?helper.call(depth0,"fraction",options):helperMissing.call(depth0,"__","fraction",options)))+'\n    </label>\n</div>\n<div>\n    <label class="panel">\n        <input name="tool_exp" type="checkbox" ',stack1=helpers.if.call(depth0,depth0&&depth0.tool_exp,{hash:{},inverse:self.noop,fn:self.program(1,program1,data),data:data}),(stack1||0===stack1)&&(buffer+=stack1),buffer+='/>\n        <span class="icon-checkbox"></span>\n        x&#8319; '+escapeExpression((helper=helpers.__||depth0&&depth0.__,options={hash:{},data:data},
helper?helper.call(depth0,"exponent",options):helperMissing.call(depth0,"__","exponent",options)))+'\n    </label>\n</div>\n<div>\n    <label class="panel">\n        <input name="tool_subscript" type="checkbox" ',stack1=helpers.if.call(depth0,depth0&&depth0.tool_subscript,{hash:{},inverse:self.noop,fn:self.program(1,program1,data),data:data}),(stack1||0===stack1)&&(buffer+=stack1),buffer+='/>\n        <span class="icon-checkbox"></span>\n        x&#8336; '+escapeExpression((helper=helpers.__||depth0&&depth0.__,options={hash:{},data:data},
helper?helper.call(depth0,"subscript",options):helperMissing.call(depth0,"__","subscript",options)))+'\n    </label>\n</div>\n<div>\n    <label class="panel">\n        <input name="tool_log" type="checkbox" ',stack1=helpers.if.call(depth0,depth0&&depth0.tool_log,{hash:{},inverse:self.noop,fn:self.program(1,program1,data),data:data}),(stack1||0===stack1)&&(buffer+=stack1),buffer+='/>\n        <span class="icon-checkbox"></span>\n        '+escapeExpression((helper=helpers.__||depth0&&depth0.__,options={hash:{},data:data},
helper?helper.call(depth0,"log",options):helperMissing.call(depth0,"__","log",options)))+'\n    </label>\n</div>\n<div>\n    <label class="panel">\n        <input name="tool_ln" type="checkbox" ',stack1=helpers.if.call(depth0,depth0&&depth0.tool_ln,{hash:{},inverse:self.noop,fn:self.program(1,program1,data),data:data}),(stack1||0===stack1)&&(buffer+=stack1),buffer+='/>\n        <span class="icon-checkbox"></span>\n        '+escapeExpression((helper=helpers.__||depth0&&depth0.__,options={hash:{},data:data},
helper?helper.call(depth0,"ln",options):helperMissing.call(depth0,"__","ln",options)))+"\n    </label>\n</div>\n\n<hr />\n<h3>"+escapeExpression((helper=helpers.__||depth0&&depth0.__,options={hash:{},data:data},helper?helper.call(depth0,"Symbols",options):helperMissing.call(depth0,"__","Symbols",options)))+'</h3>\n\n<div>\n    <label class="panel">\n        <input name="tool_e" type="checkbox" ',stack1=helpers.if.call(depth0,depth0&&depth0.tool_e,{hash:{},inverse:self.noop,fn:self.program(1,program1,data),data:data}),(stack1||0===stack1)&&(buffer+=stack1),
buffer+='/>\n        <span class="icon-checkbox"></span>\n        e\n    </label>\n</div>\n<div>\n    <label class="panel">\n        <input name="tool_infinity" type="checkbox" ',stack1=helpers.if.call(depth0,depth0&&depth0.tool_infinity,{hash:{},inverse:self.noop,fn:self.program(1,program1,data),data:data}),(stack1||0===stack1)&&(buffer+=stack1),buffer+='/>\n        <span class="icon-checkbox"></span>\n        &#8734;\n    </label>\n</div>\n<div>\n    <label class="panel">\n        <input name="roundbkts" type="checkbox" ',stack1=helpers.if.call(depth0,depth0&&depth0.roundbkts,{hash:{},inverse:self.noop,fn:self.program(1,program1,data),data:data}),
(stack1||0===stack1)&&(buffer+=stack1),buffer+='/>\n        <span class="icon-checkbox"></span>\n        ( ) '+escapeExpression((helper=helpers.__||depth0&&depth0.__,options={hash:{},data:data},helper?helper.call(depth0,"parentheses/round brackets",options):helperMissing.call(depth0,"__","parentheses/round brackets",options)))+'\n    </label>\n</div>\n<div>\n    <label class="panel">\n        <input name="curlybkts" type="checkbox" ',stack1=helpers.if.call(depth0,depth0&&depth0.curlybkts,{hash:{},inverse:self.noop,fn:self.program(1,program1,data),data:data}),(stack1||0===stack1)&&(buffer+=stack1),
buffer+='/>\n        <span class="icon-checkbox"></span>\n        { } '+escapeExpression((helper=helpers.__||depth0&&depth0.__,options={hash:{},data:data},helper?helper.call(depth0,"braces/curly brackets",options):helperMissing.call(depth0,"__","braces/curly brackets",options)))+'\n    </label>\n</div>\n<div>\n    <label class="panel">\n        <input name="squarebkts" type="checkbox" ',stack1=helpers.if.call(depth0,depth0&&depth0.squarebkts,{hash:{},inverse:self.noop,fn:self.program(1,program1,data),data:data}),(stack1||0===stack1)&&(buffer+=stack1),
buffer+='/>\n        <span class="icon-checkbox"></span>\n        [ ] '+escapeExpression((helper=helpers.__||depth0&&depth0.__,options={hash:{},data:data},helper?helper.call(depth0,"square brackets",options):helperMissing.call(depth0,"__","square brackets",options)))+'\n    </label>\n</div>\n<div>\n    <label class="panel">\n        <input name="tool_integral" type="checkbox" ',stack1=helpers.if.call(depth0,depth0&&depth0.tool_integral,{hash:{},inverse:self.noop,fn:self.program(1,program1,data),data:data}),(stack1||0===stack1)&&(buffer+=stack1),
buffer+='/>\n        <span class="icon-checkbox"></span>\n        &#x222b; '+escapeExpression((helper=helpers.__||depth0&&depth0.__,options={hash:{},data:data},helper?helper.call(depth0,"Indefinite integral",options):helperMissing.call(depth0,"__","Indefinite integral",options)))+"\n    </label>\n</div>\n\n<hr />\n<h3>"+escapeExpression((helper=helpers.__||depth0&&depth0.__,options={hash:{},data:data},helper?helper.call(depth0,"Geometry",options):helperMissing.call(depth0,"__","Geometry",options)))+'</h3>\n\n<div>\n    <label class="panel">\n        <input name="tool_angle" type="checkbox" ',stack1=helpers.if.call(depth0,depth0&&depth0.tool_angle,{hash:{},
inverse:self.noop,fn:self.program(1,program1,data),data:data}),(stack1||0===stack1)&&(buffer+=stack1),buffer+='/>\n        <span class="icon-checkbox"></span>\n        &ang; '+escapeExpression((helper=helpers.__||depth0&&depth0.__,options={hash:{},data:data},helper?helper.call(depth0,"angle",options):helperMissing.call(depth0,"__","angle",options)))+'\n    </label>\n</div>\n<div>\n    <label class="panel">\n        <input name="tool_integral" type="checkbox" ',stack1=helpers.if.call(depth0,depth0&&depth0.tool_integral,{hash:{},inverse:self.noop,fn:self.program(1,program1,data),data:data}),(stack1||0===stack1)&&(buffer+=stack1),
buffer+='/>\n        <span class="icon-checkbox"></span>\n        '+escapeExpression((helper=helpers.__||depth0&&depth0.__,options={hash:{},data:data},helper?helper.call(depth0,"Indefinite integral",options):helperMissing.call(depth0,"__","Indefinite integral",options)))+'\n        </label>\n</div>\n<div>\n    <label class="panel">\n        <input name="tool_triangle" type="checkbox" ',stack1=helpers.if.call(depth0,depth0&&depth0.tool_triangle,{hash:{},inverse:self.noop,fn:self.program(1,program1,data),data:data}),(stack1||0===stack1)&&(buffer+=stack1),
buffer+='/>\n        <span class="icon-checkbox"></span>\n        &#9651; '+escapeExpression((helper=helpers.__||depth0&&depth0.__,options={hash:{},data:data},helper?helper.call(depth0,"triangle",options):helperMissing.call(depth0,"__","triangle",options)))+'\n    </label>\n</div>\n<div>\n    <label class="panel">\n        <input name="tool_similar" type="checkbox" ',stack1=helpers.if.call(depth0,depth0&&depth0.tool_similar,{hash:{},inverse:self.noop,fn:self.program(1,program1,data),data:data}),(stack1||0===stack1)&&(buffer+=stack1),
buffer+='/>\n        <span class="icon-checkbox"></span>\n        &sim; '+escapeExpression((helper=helpers.__||depth0&&depth0.__,options={hash:{},data:data},helper?helper.call(depth0,"similar",options):helperMissing.call(depth0,"__","similar",options)))+'\n    </label>\n</div>\n<div>\n    <label class="panel">\n        <input name="tool_paral" type="checkbox" ',stack1=helpers.if.call(depth0,depth0&&depth0.tool_paral,{hash:{},inverse:self.noop,fn:self.program(1,program1,data),data:data}),(stack1||0===stack1)&&(buffer+=stack1),buffer+='/>\n        <span class="icon-checkbox"></span>\n        &#8741; '+escapeExpression((helper=helpers.__||depth0&&depth0.__,
options={hash:{},data:data},helper?helper.call(depth0,"is parallel with",options):helperMissing.call(depth0,"__","is parallel with",options)))+'\n    </label>\n</div>\n<div>\n    <label class="panel">\n        <input name="tool_perp" type="checkbox" ',stack1=helpers.if.call(depth0,depth0&&depth0.tool_perp,{hash:{},inverse:self.noop,fn:self.program(1,program1,data),data:data}),(stack1||0===stack1)&&(buffer+=stack1),buffer+='/>\n        <span class="icon-checkbox"></span>\n        &#8869; '+escapeExpression((helper=helpers.__||depth0&&depth0.__,options={hash:{},data:data},
helper?helper.call(depth0,"is perpendicular to",options):helperMissing.call(depth0,"__","is perpendicular to",options)))+"\n    </label>\n</div>\n\n<hr />\n<h3>"+escapeExpression((helper=helpers.__||depth0&&depth0.__,options={hash:{},data:data},helper?helper.call(depth0,"Trigonometry",options):helperMissing.call(depth0,"__","Trigonometry",options)))+'</h3>\n\n<div>\n    <label class="panel">\n        <input name="tool_pi" type="checkbox" ',stack1=helpers.if.call(depth0,depth0&&depth0.tool_pi,{hash:{},inverse:self.noop,fn:self.program(1,program1,data),data:data}),(stack1||0===stack1)&&(buffer+=stack1),
buffer+='/>\n        <span class="icon-checkbox"></span>\n        &pi;\n    </label>\n</div>\n<div>\n    <label class="panel">\n        <input name="tool_cos" type="checkbox" ',stack1=helpers.if.call(depth0,depth0&&depth0.tool_cos,{hash:{},inverse:self.noop,fn:self.program(1,program1,data),data:data}),(stack1||0===stack1)&&(buffer+=stack1),buffer+='/>\n        <span class="icon-checkbox"></span>\n        '+escapeExpression((helper=helpers.__||depth0&&depth0.__,options={hash:{},data:data},
helper?helper.call(depth0,"cosinus",options):helperMissing.call(depth0,"__","cosinus",options)))+'\n    </label>\n</div>\n<div>\n    <label class="panel">\n        <input name="tool_sin" type="checkbox" ',stack1=helpers.if.call(depth0,depth0&&depth0.tool_sin,{hash:{},inverse:self.noop,fn:self.program(1,program1,data),data:data}),(stack1||0===stack1)&&(buffer+=stack1),buffer+='/>\n        <span class="icon-checkbox"></span>\n        '+escapeExpression((helper=helpers.__||depth0&&depth0.__,options={hash:{},data:data},
helper?helper.call(depth0,"sinus",options):helperMissing.call(depth0,"__","sinus",options)))+"\n    </label>\n</div>\n\n<hr />\n<h3>"+escapeExpression((helper=helpers.__||depth0&&depth0.__,options={hash:{},data:data},helper?helper.call(depth0,"Comparison",options):helperMissing.call(depth0,"__","Comparison",options)))+'</h3>\n\n<div>\n    <label class="panel">\n        <input name="tool_lower" type="checkbox" ',stack1=helpers.if.call(depth0,depth0&&depth0.tool_lower,{hash:{},inverse:self.noop,fn:self.program(1,program1,data),data:data}),(stack1||0===stack1)&&(buffer+=stack1),
buffer+='/>\n        <span class="icon-checkbox"></span>\n        &lt; '+escapeExpression((helper=helpers.__||depth0&&depth0.__,options={hash:{},data:data},helper?helper.call(depth0,"lower than",options):helperMissing.call(depth0,"__","lower than",options)))+'\n    </label>\n</div>\n<div>\n    <label class="panel">\n        <input name="tool_greater" type="checkbox" ',stack1=helpers.if.call(depth0,depth0&&depth0.tool_greater,{hash:{},inverse:self.noop,fn:self.program(1,program1,data),data:data}),(stack1||0===stack1)&&(buffer+=stack1),
buffer+='/>\n        <span class="icon-checkbox"></span>\n        &gt; '+escapeExpression((helper=helpers.__||depth0&&depth0.__,options={hash:{},data:data},helper?helper.call(depth0,"greater than",options):helperMissing.call(depth0,"__","greater than",options)))+'\n    </label>\n</div>\n<div>\n    <label class="panel">\n        <input name="tool_lte" type="checkbox" ',stack1=helpers.if.call(depth0,depth0&&depth0.tool_lte,{hash:{},inverse:self.noop,fn:self.program(1,program1,data),data:data}),(stack1||0===stack1)&&(buffer+=stack1),buffer+='/>\n        <span class="icon-checkbox"></span>\n        &le; '+escapeExpression((helper=helpers.__||depth0&&depth0.__,
options={hash:{},data:data},helper?helper.call(depth0,"lower than or equal",options):helperMissing.call(depth0,"__","lower than or equal",options)))+'\n    </label>\n</div>\n<div>\n    <label class="panel">\n        <input name="tool_gte" type="checkbox" ',stack1=helpers.if.call(depth0,depth0&&depth0.tool_gte,{hash:{},inverse:self.noop,fn:self.program(1,program1,data),data:data}),(stack1||0===stack1)&&(buffer+=stack1),buffer+='/>\n        <span class="icon-checkbox"></span>\n        &ge; '+escapeExpression((helper=helpers.__||depth0&&depth0.__,options={hash:{},data:data},
helper?helper.call(depth0,"greater than or equal",options):helperMissing.call(depth0,"__","greater than or equal",options)))+"\n    </label>\n</div>\n\n<hr />\n<h3>"+escapeExpression((helper=helpers.__||depth0&&depth0.__,options={hash:{},data:data},helper?helper.call(depth0,"Operands",options):helperMissing.call(depth0,"__","Operands",options)))+'</h3>\n\n<div>\n    <label class="panel">\n        <input name="tool_equal" type="checkbox" ',stack1=helpers.if.call(depth0,depth0&&depth0.tool_equal,{hash:{},inverse:self.noop,fn:self.program(1,program1,data),data:data}),(stack1||0===stack1)&&(buffer+=stack1),
buffer+='/>\n        <span class="icon-checkbox"></span>\n        = '+escapeExpression((helper=helpers.__||depth0&&depth0.__,options={hash:{},data:data},helper?helper.call(depth0,"equal",options):helperMissing.call(depth0,"__","equal",options)))+'\n    </label>\n</div>\n<div>\n    <label class="panel">\n        <input name="tool_plus" type="checkbox" ',stack1=helpers.if.call(depth0,depth0&&depth0.tool_plus,{hash:{},inverse:self.noop,fn:self.program(1,program1,data),data:data}),(stack1||0===stack1)&&(buffer+=stack1),buffer+='/>\n        <span class="icon-checkbox"></span>\n        + '+escapeExpression((helper=helpers.__||depth0&&depth0.__,options={hash:{},
data:data},helper?helper.call(depth0,"plus",options):helperMissing.call(depth0,"__","plus",options)))+'\n    </label>\n</div>\n<div>\n    <label class="panel">\n        <input name="tool_minus" type="checkbox" ',stack1=helpers.if.call(depth0,depth0&&depth0.tool_minus,{hash:{},inverse:self.noop,fn:self.program(1,program1,data),data:data}),(stack1||0===stack1)&&(buffer+=stack1),buffer+='/>\n        <span class="icon-checkbox"></span>\n        – '+escapeExpression((helper=helpers.__||depth0&&depth0.__,options={hash:{},data:data},
helper?helper.call(depth0,"minus",options):helperMissing.call(depth0,"__","minus",options)))+'\n    </label>\n</div>\n<div>\n    <label class="panel">\n        <input name="tool_times" type="checkbox" ',stack1=helpers.if.call(depth0,depth0&&depth0.tool_times,{hash:{},inverse:self.noop,fn:self.program(1,program1,data),data:data}),(stack1||0===stack1)&&(buffer+=stack1),buffer+='/>\n        <span class="icon-checkbox"></span>\n        &times; '+escapeExpression((helper=helpers.__||depth0&&depth0.__,options={hash:{},data:data},
helper?helper.call(depth0,"times",options):helperMissing.call(depth0,"__","times",options)))+'\n    </label>\n</div>\n<div>\n    <label class="panel">\n        <input name="tool_timesdot" type="checkbox" ',stack1=helpers.if.call(depth0,depth0&&depth0.tool_timesdot,{hash:{},inverse:self.noop,fn:self.program(1,program1,data),data:data}),(stack1||0===stack1)&&(buffer+=stack1),buffer+='/>\n        <span class="icon-checkbox"></span>\n        · '+escapeExpression((helper=helpers.__||depth0&&depth0.__,options={hash:{},data:data},
helper?helper.call(depth0,"times dot",options):helperMissing.call(depth0,"__","times dot",options)))+'\n    </label>\n</div>\n<div>\n    <label class="panel">\n        <input name="tool_divide" type="checkbox" ',stack1=helpers.if.call(depth0,depth0&&depth0.tool_divide,{hash:{},inverse:self.noop,fn:self.program(1,program1,data),data:data}),(stack1||0===stack1)&&(buffer+=stack1),buffer+='/>\n        <span class="icon-checkbox"></span>\n        &divide; '+escapeExpression((helper=helpers.__||depth0&&depth0.__,options={hash:{},data:data},
helper?helper.call(depth0,"divide",options):helperMissing.call(depth0,"__","divide",options)))+'\n    </label>\n</div>\n<div>\n    <label class="panel">\n        <input name="tool_plusminus" type="checkbox" ',stack1=helpers.if.call(depth0,depth0&&depth0.tool_plusminus,{hash:{},inverse:self.noop,fn:self.program(1,program1,data),data:data}),(stack1||0===stack1)&&(buffer+=stack1),buffer+='/>\n        <span class="icon-checkbox"></span>\n        &#177; '+escapeExpression((helper=helpers.__||depth0&&depth0.__,options={hash:{},data:data},
helper?helper.call(depth0,"Plus/minus",options):helperMissing.call(depth0,"__","Plus/minus",options)))+'\n    </label>\n</div>\n<div>\n    <label class="panel">\n        <input name="tool_inmem" type="checkbox" ',stack1=helpers.if.call(depth0,depth0&&depth0.tool_inmem,{hash:{},inverse:self.noop,fn:self.program(1,program1,data),data:data}),(stack1||0===stack1)&&(buffer+=stack1),buffer+='/>\n        <span class="icon-checkbox"></span>\n        '+escapeExpression((helper=helpers.__||depth0&&depth0.__,options={hash:{},data:data},
helper?helper.call(depth0,"is a member of",options):helperMissing.call(depth0,"__","is a member of",options)))+'\n    </label>\n</div>\n<div>\n    <label class="panel">\n        <input name="tool_ninmem" type="checkbox" ',stack1=helpers.if.call(depth0,depth0&&depth0.tool_ninmem,{hash:{},inverse:self.noop,fn:self.program(1,program1,data),data:data}),(stack1||0===stack1)&&(buffer+=stack1),buffer+='/>\n        <span class="icon-checkbox"></span>\n        '+escapeExpression((helper=helpers.__||depth0&&depth0.__,options={hash:{},data:data},
helper?helper.call(depth0,"is not a member of",options):helperMissing.call(depth0,"__","is not a member of",options)))+'\n    </label>\n</div>\n<div>\n    <label class="panel">\n        <input name="tool_union" type="checkbox" ',stack1=helpers.if.call(depth0,depth0&&depth0.tool_union,{hash:{},inverse:self.noop,fn:self.program(1,program1,data),data:data}),(stack1||0===stack1)&&(buffer+=stack1),buffer+='/>\n        <span class="icon-checkbox"></span>\n        '+escapeExpression((helper=helpers.__||depth0&&depth0.__,options={hash:{},data:data},
helper?helper.call(depth0,"set union",options):helperMissing.call(depth0,"__","set union",options)))+'\n    </label>\n</div>\n<div>\n    <label class="panel">\n        <input name="tool_intersec" type="checkbox" ',stack1=helpers.if.call(depth0,depth0&&depth0.tool_intersec,{hash:{},inverse:self.noop,fn:self.program(1,program1,data),data:data}),(stack1||0===stack1)&&(buffer+=stack1),buffer+='/>\n        <span class="icon-checkbox"></span>\n        '+escapeExpression((helper=helpers.__||depth0&&depth0.__,options={hash:{},data:data},
helper?helper.call(depth0,"set intersection",options):helperMissing.call(depth0,"__","set intersection",options)))+'\n    </label>\n</div>\n\n<hr />\n\n<h3 class="txt-error"><strong><span class="icon-warning"></span> '+escapeExpression((helper=helpers.__||depth0&&depth0.__,options={hash:{},data:data},helper?helper.call(depth0,"Experimental only",options):helperMissing.call(depth0,"__","Experimental only",options)))+'</strong></h3>\n\n<div>\n    <label class="panel">\n        <input name="allowNewLine" type="checkbox" ',stack1=helpers.if.call(depth0,depth0&&depth0.allowNewLine,{hash:{},inverse:self.noop,fn:self.program(1,program1,data),data:data}),
(stack1||0===stack1)&&(buffer+=stack1),buffer+='/>\n        <span class="icon-checkbox"></span>\n        '+escapeExpression((helper=helpers.__||depth0&&depth0.__,options={hash:{},data:data},helper?helper.call(depth0,"allow line break",options):helperMissing.call(depth0,"__","allow line break",options)))+'\n    </label>\n</div>\n<div>\n    <label class="panel">\n        <input name="enableAutoWrap" type="checkbox" ',stack1=helpers.if.call(depth0,depth0&&depth0.enableAutoWrap,{hash:{},inverse:self.noop,fn:self.program(1,program1,data),data:data}),(stack1||0===stack1)&&(buffer+=stack1),
buffer+='/>\n        <span class="icon-checkbox"></span>\n        '+escapeExpression((helper=helpers.__||depth0&&depth0.__,options={hash:{},data:data},helper?helper.call(depth0,"enable auto wrap",options):helperMissing.call(depth0,"__","enable auto wrap",options)))+"\n    </label>\n</div>"})}),define("tpl!mathEntryInteraction/creator/tpl/addGapBtn",["handlebars"],function(hb){return hb.template(function(Handlebars,depth0,helpers,partials,data){this.compilerInfo=[4,">= 1.0.0"],helpers=this.merge(helpers,Handlebars.helpers),data=data||{};var helper,options,buffer="",helperMissing=helpers.helperMissing
;return buffer+='<div class="add-option">\n    <span class="icon-add"></span> '+(0,this.escapeExpression)((helper=helpers.__||depth0&&depth0.__,options={hash:{},data:data},helper?helper.call(depth0,"Add gap",options):helperMissing.call(depth0,"__","Add gap",options)))+"\n</div>"})}),
define("mathEntryInteraction/creator/widget/states/Question",["jquery","i18n","taoQtiItem/qtiCreator/widgets/states/factory","taoQtiItem/qtiCreator/widgets/interactions/states/Question","taoQtiItem/qtiCreator/widgets/helpers/formElement","taoQtiItem/qtiCreator/editor/simpleContentEditableElement","taoQtiItem/qtiCreator/editor/containerEditor","tpl!mathEntryInteraction/creator/tpl/propertiesForm","tpl!mathEntryInteraction/creator/tpl/addGapBtn"],function($,__,stateFactory,Question,formElement,simpleEditor,containerEditor,formTpl,addGapBtnTpl){"use strict";function toBoolean(value,defaultValue){return void 0===value?defaultValue:!0===value||"true"===value}
function configChangeCallBack(interaction,value,name){interaction.prop(name,value),interaction.triggerPci("configChange",[interaction.getProperties()])}var $addGapBtn=$(addGapBtnTpl()),MathEntryInteractionStateQuestion=stateFactory.extend(Question,function(){var $container=this.widget.$container,$prompt=$container.find(".prompt"),interaction=this.widget.element;containerEditor.create($prompt,{change:function(text){interaction.data("prompt",text),interaction.updateMarkup()},markup:interaction.markup,markupSelector:".prompt",related:interaction,areaBroker:this.widget.getAreaBroker()}),toBoolean(interaction.prop("useGapExpression"),!1)&&this.createAddGapBtn(),
this.addMathFieldListener()},function(){var $container=this.widget.$container,$prompt=$container.find(".prompt");simpleEditor.destroy($container),containerEditor.destroy($prompt),this.removeAddGapBtn()});return MathEntryInteractionStateQuestion.prototype.initForm=function(){var $gapStyleBox,$gapStyleSelector,self=this,_widget=this.widget,$form=_widget.$form,interaction=_widget.element,response=interaction.getResponseDeclaration();$form.html(formTpl({serial:response.serial,identifier:interaction.attr("responseIdentifier"),authorizeWhiteSpace:toBoolean(interaction.prop("authorizeWhiteSpace"),!1),
useGapExpression:toBoolean(interaction.prop("useGapExpression"),!1),tool_frac:toBoolean(interaction.prop("tool_frac"),!0),tool_sqrt:toBoolean(interaction.prop("tool_sqrt"),!0),tool_exp:toBoolean(interaction.prop("tool_exp"),!0),tool_log:toBoolean(interaction.prop("tool_log"),!0),tool_ln:toBoolean(interaction.prop("tool_ln"),!0),tool_e:toBoolean(interaction.prop("tool_e"),!0),tool_infinity:toBoolean(interaction.prop("tool_infinity"),!0),squarebkts:toBoolean(interaction.prop("tool_rbrack"),!0)&&toBoolean(interaction.prop("tool_lbrack"),!0),tool_pi:toBoolean(interaction.prop("tool_pi"),!0),tool_cos:toBoolean(interaction.prop("tool_cos"),!0),
tool_sin:toBoolean(interaction.prop("tool_sin"),!0),tool_lte:toBoolean(interaction.prop("tool_lte"),!0),tool_gte:toBoolean(interaction.prop("tool_gte"),!0),tool_times:toBoolean(interaction.prop("tool_times"),!0),tool_divide:toBoolean(interaction.prop("tool_divide"),!0),tool_plusminus:toBoolean(interaction.prop("tool_plusminus"),!0),roundbkts:toBoolean(interaction.prop("tool_rparen"),!0)&&toBoolean(interaction.prop("tool_lparen"),!0),curlybkts:toBoolean(interaction.prop("tool_rbrace"),!0)&&toBoolean(interaction.prop("tool_lbrace"),!0),tool_angle:toBoolean(interaction.prop("tool_angle"),!0),tool_minus:toBoolean(interaction.prop("tool_minus"),!0),
tool_plus:toBoolean(interaction.prop("tool_plus"),!0),tool_equal:toBoolean(interaction.prop("tool_equal"),!0),tool_lower:toBoolean(interaction.prop("tool_lower"),!0),tool_greater:toBoolean(interaction.prop("tool_greater"),!0),tool_subscript:toBoolean(interaction.prop("tool_subscript"),!0),tool_integral:toBoolean(interaction.prop("tool_integral"),!0),tool_timesdot:toBoolean(interaction.prop("tool_timesdot"),!0),tool_triangle:toBoolean(interaction.prop("tool_triangle"),!0),tool_similar:toBoolean(interaction.prop("tool_similar"),!0),tool_paral:toBoolean(interaction.prop("tool_paral"),!0),tool_perp:toBoolean(interaction.prop("tool_perp"),!0),
tool_inmem:toBoolean(interaction.prop("tool_inmem"),!0),tool_ninmem:toBoolean(interaction.prop("tool_ninmem"),!0),tool_union:toBoolean(interaction.prop("tool_union"),!0),tool_intersec:toBoolean(interaction.prop("tool_intersec"),!0),allowNewLine:toBoolean(interaction.prop("allowNewLine"),!1),enableAutoWrap:toBoolean(interaction.prop("enableAutoWrap"),!1)})),formElement.initWidget($form),formElement.setChangeCallbacks($form,interaction,{identifier:function(i,value){response.id(value),interaction.attr("responseIdentifier",value)},useGapExpression:function(i,value){toBoolean(value,!1)?(self.createAddGapBtn(),$gapStyleBox.show(),
response.attr("cardinality","multiple")):(i.prop("gapExpression",""),self.removeAddGapBtn(),$gapStyleBox.hide(),response.attr("cardinality","single")),configChangeCallBack(i,value,"useGapExpression")},gapStyle:function(i,newStyle){i.prop("gapStyle",newStyle),configChangeCallBack(i,newStyle,"gapStyle")},authorizeWhiteSpace:configChangeCallBack,tool_frac:configChangeCallBack,tool_sqrt:configChangeCallBack,tool_exp:configChangeCallBack,tool_log:configChangeCallBack,tool_ln:configChangeCallBack,tool_e:configChangeCallBack,tool_infinity:configChangeCallBack,tool_pi:configChangeCallBack,tool_cos:configChangeCallBack,tool_sin:configChangeCallBack,
tool_lte:configChangeCallBack,tool_gte:configChangeCallBack,tool_times:configChangeCallBack,tool_divide:configChangeCallBack,tool_plusminus:configChangeCallBack,tool_angle:configChangeCallBack,tool_minus:configChangeCallBack,tool_plus:configChangeCallBack,tool_equal:configChangeCallBack,tool_lower:configChangeCallBack,tool_greater:configChangeCallBack,tool_subscript:configChangeCallBack,tool_integral:configChangeCallBack,tool_timesdot:configChangeCallBack,tool_triangle:configChangeCallBack,tool_similar:configChangeCallBack,tool_paral:configChangeCallBack,tool_perp:configChangeCallBack,tool_inmem:configChangeCallBack,tool_ninmem:configChangeCallBack,
tool_union:configChangeCallBack,tool_intersec:configChangeCallBack,squarebkts:function(i,value){i.prop("tool_lbrack",value),i.prop("tool_rbrack",value),i.triggerPci("configChange",[i.getProperties()])},roundbkts:function(i,value){i.prop("tool_lparen",value),i.prop("tool_rparen",value),i.triggerPci("configChange",[i.getProperties()])},curlybkts:function(i,value){i.prop("tool_lbrace",value),i.prop("tool_rbrace",value),i.triggerPci("configChange",[i.getProperties()])},allowNewLine:configChangeCallBack,enableAutoWrap:configChangeCallBack}),$gapStyleBox=$form.find(".mathgap-style-box"),$gapStyleSelector=$gapStyleBox.find("[data-mathgap-style]"),
$gapStyleSelector.select2({width:"100%",minimumResultsForSearch:1/0}).val(interaction.prop("gapStyle")).trigger("change")},MathEntryInteractionStateQuestion.prototype.addMathFieldListener=function(){var _widget=this.widget,interaction=_widget.element;interaction.onPci("responseChange",function(latex){toBoolean(interaction.prop("useGapExpression"),!1)?interaction.prop("gapExpression",latex):interaction.prop("gapExpression","")})},MathEntryInteractionStateQuestion.prototype.createAddGapBtn=function(){var _widget=this.widget,$container=_widget.$container,$toolbar=$container.find(".toolbar"),interaction=_widget.element
;$toolbar.length&&($toolbar.after($addGapBtn),$addGapBtn.on("click",function(){interaction.triggerPci("addGap")}))},MathEntryInteractionStateQuestion.prototype.removeAddGapBtn=function(){$addGapBtn.off("click"),$addGapBtn.remove()},MathEntryInteractionStateQuestion}),define("mathEntryInteraction/creator/widget/states/states",["taoQtiItem/qtiCreator/widgets/states/factory","taoQtiItem/qtiCreator/widgets/interactions/customInteraction/states/states","mathEntryInteraction/creator/widget/states/Question"],function(factory,states){"use strict";return factory.createBundle(states,arguments,["answer","correct","map"])}),
define("mathEntryInteraction/creator/widget/Widget",["taoQtiItem/qtiCreator/widgets/interactions/customInteraction/Widget","mathEntryInteraction/creator/widget/states/states"],function(Widget,states){"use strict";var MathEntryInteractionWidget=Widget.clone();return MathEntryInteractionWidget.initCreator=function(){var $interaction;this.registerStates(states),Widget.initCreator.call(this),$interaction=this.$container.find(".mathEntryInteraction"),$interaction.length&&$interaction.addClass("tao-qti-creator-context")},MathEntryInteractionWidget}),define("tpl!mathEntryInteraction/creator/tpl/markup",["handlebars"],function(hb){
return hb.template(function(Handlebars,depth0,helpers,partials,data){this.compilerInfo=[4,">= 1.0.0"],helpers=this.merge(helpers,Handlebars.helpers),data=data||{};var stack1,helper,buffer="";return buffer+='<div class="mathEntryInteraction">\n    <div class="prompt">',(helper=helpers.prompt)?stack1=helper.call(depth0,{hash:{},data:data}):(helper=depth0&&depth0.prompt,stack1="function"==typeof helper?helper.call(depth0,{hash:{},data:data}):helper),(stack1||0===stack1)&&(buffer+=stack1),
buffer+='</div>\n    <div class="math-entry">\n        <div class="toolbar"></div>\n        <div>\n            <span class="math-entry-input"></span>\n        </div>\n    </div>\n</div>'})}),define("mathEntryInteraction/pciCreator",["lodash","mathEntryInteraction/creator/widget/Widget","tpl!mathEntryInteraction/creator/tpl/markup"],function(_,Widget,markupTpl){"use strict";return{getTypeIdentifier:function(){return"mathEntryInteraction"},getWidget:function(){return Widget},getDefaultProperties:function(){return{authorizeWhiteSpace:"false",useGapExpression:"false",gapExpression:"",gapStyle:"",tool_frac:"true",tool_sqrt:"true",tool_exp:"true",tool_log:"true",
tool_ln:"true",tool_e:"true",tool_infinity:"true",tool_lbrack:"true",tool_rbrack:"true",tool_pi:"true",tool_cos:"true",tool_sin:"true",tool_lte:"true",tool_gte:"true",tool_times:"true",tool_divide:"true",tool_plusminus:"true",tool_angle:"true",tool_minus:"true",tool_plus:"true",tool_equal:"true",tool_lower:"true",tool_greater:"true",tool_subscript:"true",tool_lbrace:"true",tool_rbrace:"true",tool_lparen:"true",tool_rparen:"true",tool_integral:"true",tool_timesdot:"true",tool_triangle:"true",tool_similar:"true",tool_paral:"true",tool_perp:"true",tool_inmem:"true",tool_ninmem:"true",tool_union:"true",tool_intersec:"true",allowNewLine:"false",
enableAutoWrap:"false"}},afterCreate:function(pci){},getMarkupTemplate:function(){return markupTpl},getMarkupData:function(pci,defaultData){return defaultData.prompt=pci.data("prompt"),defaultData}}}),define(["mathEntryInteraction/pciCreator"],function(PCI){return PCI});
//# sourceMappingURL=pciCreator.min.js.map