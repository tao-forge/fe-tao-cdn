define(['lodash', 'i18n', 'ui/component', 'ui/generis/form/form', 'handlebars', 'lib/dompurify/purify'], function (_, __, component, generisFormFactory, Handlebars, DOMPurify) { 'use strict';

  _ = _ && _.hasOwnProperty('default') ? _['default'] : _;
  __ = __ && __.hasOwnProperty('default') ? __['default'] : __;
  component = component && component.hasOwnProperty('default') ? component['default'] : component;
  generisFormFactory = generisFormFactory && generisFormFactory.hasOwnProperty('default') ? generisFormFactory['default'] : generisFormFactory;
  Handlebars = Handlebars && Handlebars.hasOwnProperty('default') ? Handlebars['default'] : Handlebars;
  DOMPurify = DOMPurify && DOMPurify.hasOwnProperty('default') ? DOMPurify['default'] : DOMPurify;

  function _typeof(obj) {
    "@babel/helpers - typeof";

    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function Helpers0 (hb) {
    //register a i18n helper
    hb.registerHelper('__', function (key) {
      return __(key);
    });
    /**
     * Register dompurify helper
     *
     * https://github.com/cure53/DOMPurify
     * with config SAFE_FOR_TEMPLATES: true
     * to make output safe for template systems
     */

    hb.registerHelper('dompurify', function (context) {
      return DOMPurify.sanitize(context);
    });
    /**
     * Register join helper
     *
     * Example :
     * var values = {a:v1, b:v2, c:v3};
     * Using {{{join attributes '=' ' ' '"'}}} will return : a="v1" b="v2" c="v3"
     * Using {{{join values null ' or ' '*'}}} will return : *v1* or *v2* or *v3*
     */

    hb.registerHelper('join', function (arr, keyValueGlue, fragmentGlue, wrapper) {
      var fragments = [];
      keyValueGlue = typeof keyValueGlue === 'string' ? keyValueGlue : undefined;
      fragmentGlue = typeof fragmentGlue === 'string' ? fragmentGlue : ' ';
      wrapper = typeof wrapper === 'string' ? wrapper : '"';

      _.forIn(arr, function (value, key) {
        var fragment = '';

        if (value !== null || value !== undefined) {
          if (typeof value === 'boolean') {
            value = value ? 'true' : 'false';
          } else if (_typeof(value) === 'object') {
            value = _.values(value).join(' ');
          }
        } else {
          value = '';
        }

        if (keyValueGlue !== undefined) {
          fragment += key + keyValueGlue;
        }

        fragment += wrapper + value + wrapper;
        fragments.push(fragment);
      });

      return fragments.join(fragmentGlue);
    }); //register a classic "for loop" helper
    //it also adds a local variable "i" as the index in each iteration loop

    hb.registerHelper('for', function (startIndex, stopIndex, increment, options) {
      var ret = '';
      startIndex = parseInt(startIndex);
      stopIndex = parseInt(stopIndex);
      increment = parseInt(increment);

      for (var i = startIndex; i < stopIndex; i += increment) {
        ret += options.fn(_.extend({}, this, {
          i: i
        }));
      }

      return ret;
    });
    hb.registerHelper('equal', function (var1, var2, options) {
      if (var1 == var2) {
        return options.fn(this);
      } else {
        return options.inverse(this);
      }
    }); // register a "get property" helper
    // it gets the named property from the provided context

    hb.registerHelper('property', function (name, context) {
      return context[name] || '';
    }); // register an 'includes' helper
    // it checks if value is in array

    hb.registerHelper('includes', function (haystack, needle, options) {
      if (_.contains(haystack, needle)) {
        return options.fn(this);
      }
    });
  }

  if (!Helpers0.__initialized) {
    Helpers0(Handlebars);
    Helpers0.__initialized = true;
  }
  var Template = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
    this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Handlebars.helpers);  


    return "<div class=\"filters\">\n</div>\n";
    });
  function filtersTpl(data, options, asString) {
    var html = Template(data, options);
    return (asString || true) ? html : $(html);
  }

  /**
   * This program is free software; you can redistribute it and/or
   * modify it under the terms of the GNU General Public License
   * as published by the Free Software Foundation; under version 2
   * of the License (non-upgradable).
   *
   * This program is distributed in the hope that it will be useful,
   * but WITHOUT ANY WARRANTY; without even the implied warranty of
   * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   * GNU General Public License for more details.
   *
   * You should have received a copy of the GNU General Public License
   * along with this program; if not, write to the Free Software
   * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
   *
   * Copyright (c) 2017 (original work) Open Assessment Technologies SA ;
   */
  /**
   * The list of supported properties
   *
   * FIXME add radio as soon as supported
   */

  var supportedWidgets = ['http://www.tao.lu/datatypes/WidgetDefinitions.rdf#TextBox', 'http://www.tao.lu/datatypes/WidgetDefinitions.rdf#CheckBox', 'http://www.tao.lu/datatypes/WidgetDefinitions.rdf#ComboBox', 'http://www.tao.lu/datatypes/WidgetDefinitions.rdf#TextArea', 'http://www.tao.lu/datatypes/WidgetDefinitions.rdf#StateWidget'];
  var defaultConfig = {
    title: __('Search by properties'),
    applyLabel: __('Apply')
  };
  /**
   * Builds the filter component
   *
   * @param {jQueryElement} $container - where to append the component
   * @param {Object} config - the component config
   * @param {String} config.classUri - the root Class URI
   * @param {String} config.data - the root Class URI
   * @param {Object} config.data.properties - the list of properties used to filter
   * @param {Object} config.data.ranges - the property ranges
   * @param {String} [config.title] - the form title
   * @param {String} [config.applyLabel] - the label of the apply button
   * @returns {filter} the component
   */

  function filtersFactory($container, config) {
    /**
     * @typedef {ui/component}
     */
    var filters = component({
      /**
       * Get the filter values
       * @returns {Object[]} the form values
       */
      getValues: function getValues() {
        if (this.is('rendered') && this.form) {
          return this.form.getValues();
        }

        return null;
      },

      /**
       * Set the value for a given field
       * @param {String} uri - the property URI
       * @param {String|String[]} value - the field value
       * @return {filter} chains
       */
      setValue: function setValue(uri, value) {
        var widget;

        if (this.is('rendered') && this.form) {
          widget = this.form.getWidget(uri);

          if (widget) {
            widget.set(value);
          }
        }

        return this;
      },

      /**
       * Reset the filter form
       * @return {filter} chains
       */
      reset: function reset() {
        return this.update(this.config.data);
      },

      /**
       * Update the filter form
       * @param {Object} data - the filtering data
       * @param {Object} data.properties - the list of properties used to filter
       * @param {Object} data.ranges - the property ranges
       * @return {filter} chains
       * @fires filter#change when the user wants to apply the filter
       */
      update: function update(data) {
        var self = this;
        var properties;

        if (this.is('rendered')) {
          this.getElement().empty();
          properties = _.filter(data.properties, function (property) {
            return _.contains(supportedWidgets, property.widget);
          });
          this.form = generisFormFactory({
            properties: properties,
            values: data.ranges
          }, {
            submitText: this.config.applyLabel,
            title: this.config.title
          }).on('submit reset', function () {
            /**
             * Apply the filter values
             * @event filter#change
             * @param {Object} values - the filter values
             */
            self.trigger('change', this.getValues());
          }).render(this.getElement());
        }

        return this;
      },

      /**
       * Get a text that represents the actual query
       * @returns {String} the query
       */
      getTextualQuery: function getTextualQuery() {
        var self = this;
        var result;

        if (this.is('rendered')) {
          result = _.reduce(this.form.getValues(), function (acc, value, uri) {
            var widget = self.form.getWidget(uri);
            var displayValue;

            if (widget) {
              if (!_.isEmpty(acc)) {
                acc += __(' AND ');
              }

              acc += widget.config.label + __(' is ');

              if (widget.config.range) {
                displayValue = _.map(_.isArray(value) ? value : [value], function (val) {
                  var selectedValue = _.find(widget.config.range, {
                    uri: val
                  });

                  return selectedValue && selectedValue.label;
                });
              } else {
                displayValue = value;
              }

              if (_.isString(displayValue)) {
                acc += displayValue;
              }

              if (_.isArray(displayValue)) {
                acc += displayValue.join(', ');
              }
            }

            return acc;
          }, '');
        }

        return result;
      }
    }, defaultConfig);
    filters.setTemplate(filtersTpl).on('init', function () {
      this.render($container);
    }).on('render', function () {
      if (this.config.data) {
        this.update(this.config.data);
      }
    }); //always defer the initialization to let consumers listen for init and render events.

    _.defer(function () {
      filters.init(config);
    });

    return filters;
  }

  return filtersFactory;

});
