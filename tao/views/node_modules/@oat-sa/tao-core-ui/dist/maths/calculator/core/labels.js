define(['i18n', 'handlebars', 'lodash', 'lib/dompurify/purify'], function (__, Handlebars, _, DOMPurify) { 'use strict';

  __ = __ && __.hasOwnProperty('default') ? __['default'] : __;
  Handlebars = Handlebars && Handlebars.hasOwnProperty('default') ? Handlebars['default'] : Handlebars;
  _ = _ && _.hasOwnProperty('default') ? _['default'] : _;
  DOMPurify = DOMPurify && DOMPurify.hasOwnProperty('default') ? DOMPurify['default'] : DOMPurify;

  function _typeof(obj) {
    "@babel/helpers - typeof";

    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function Helpers0 (hb) {
    //register a i18n helper
    hb.registerHelper('__', function (key) {
      return __(key);
    });
    /**
     * Register dompurify helper
     *
     * https://github.com/cure53/DOMPurify
     * with config SAFE_FOR_TEMPLATES: true
     * to make output safe for template systems
     */

    hb.registerHelper('dompurify', function (context) {
      return DOMPurify.sanitize(context);
    });
    /**
     * Register join helper
     *
     * Example :
     * var values = {a:v1, b:v2, c:v3};
     * Using {{{join attributes '=' ' ' '"'}}} will return : a="v1" b="v2" c="v3"
     * Using {{{join values null ' or ' '*'}}} will return : *v1* or *v2* or *v3*
     */

    hb.registerHelper('join', function (arr, keyValueGlue, fragmentGlue, wrapper) {
      var fragments = [];
      keyValueGlue = typeof keyValueGlue === 'string' ? keyValueGlue : undefined;
      fragmentGlue = typeof fragmentGlue === 'string' ? fragmentGlue : ' ';
      wrapper = typeof wrapper === 'string' ? wrapper : '"';

      _.forIn(arr, function (value, key) {
        var fragment = '';

        if (value !== null || value !== undefined) {
          if (typeof value === 'boolean') {
            value = value ? 'true' : 'false';
          } else if (_typeof(value) === 'object') {
            value = _.values(value).join(' ');
          }
        } else {
          value = '';
        }

        if (keyValueGlue !== undefined) {
          fragment += key + keyValueGlue;
        }

        fragment += wrapper + value + wrapper;
        fragments.push(fragment);
      });

      return fragments.join(fragmentGlue);
    }); //register a classic "for loop" helper
    //it also adds a local variable "i" as the index in each iteration loop

    hb.registerHelper('for', function (startIndex, stopIndex, increment, options) {
      var ret = '';
      startIndex = parseInt(startIndex);
      stopIndex = parseInt(stopIndex);
      increment = parseInt(increment);

      for (var i = startIndex; i < stopIndex; i += increment) {
        ret += options.fn(_.extend({}, this, {
          i: i
        }));
      }

      return ret;
    });
    hb.registerHelper('equal', function (var1, var2, options) {
      if (var1 == var2) {
        return options.fn(this);
      } else {
        return options.inverse(this);
      }
    }); // register a "get property" helper
    // it gets the named property from the provided context

    hb.registerHelper('property', function (name, context) {
      return context[name] || '';
    }); // register an 'includes' helper
    // it checks if value is in array

    hb.registerHelper('includes', function (haystack, needle, options) {
      if (_.contains(haystack, needle)) {
        return options.fn(this);
      }
    });
  }

  if (!Helpers0.__initialized) {
    Helpers0(Handlebars);
    Helpers0.__initialized = true;
  }
  var Template = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
    this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Handlebars.helpers);  


    return "<svg class=\"arrow-up\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"32\" height=\"32\" viewBox=\"0 0 32 32\"><path d=\"M16 1l-15 15h9v16h12v-16h9z\"></path></svg>";
    });
  function historyUpTpl(data, options, asString) {
    var html = Template(data, options);
    return (asString || true) ? html : $(html);
  }

  if (!Helpers0.__initialized) {
    Helpers0(Handlebars);
    Helpers0.__initialized = true;
  }
  var Template$1 = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
    this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Handlebars.helpers);  


    return "<svg class=\"arrow-down\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"32\" height=\"32\" viewBox=\"0 0 32 32\"><path d=\"M16 31l15-15h-9v-16h-12v16h-9z\"></path></svg>";
    });
  function historyDownTpl(data, options, asString) {
    var html = Template$1(data, options);
    return (asString || true) ? html : $(html);
  }

  if (!Helpers0.__initialized) {
    Helpers0(Handlebars);
    Helpers0.__initialized = true;
  }
  var Template$2 = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
    this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Handlebars.helpers);  


    return "<svg class=\"backspace-outline\" xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" viewBox=\"0 0 24 24\"><path d=\"M19 21H9c-1.436 0-3.145-.88-3.977-2.046l-2.619-3.667c-.629-.881-1.157-1.621-1.188-1.661-.246-.344-.249-.894-.008-1.241.018-.025.561-.783 1.204-1.686L5.02 7.046C5.855 5.879 7.566 5 9 5h10c1.654 0 3 1.346 3 3v10c0 1.654-1.346 3-3 3zM3.229 12.999l.806 1.125 2.618 3.667C7.104 18.424 8.223 19 9.001 19h10c.552 0 1-.45 1-1.001V8c0-.551-.448-1-1-1h-10c-.776 0-1.897.576-2.351 1.209l-2.608 3.652-.813 1.138z\"/><path d=\"M13.707 13l2.646-2.646a.502.502 0 0 0 0-.707.502.502 0 0 0-.707 0L13 12.293l-2.646-2.646a.5.5 0 0 0-.707.707L12.293 13l-2.646 2.646a.5.5 0 0 0 .707.708L13 13.707l2.646 2.646a.5.5 0 1 0 .708-.706L13.707 13z\"/></svg>";
    });
  function backspaceTpl(data, options, asString) {
    var html = Template$2(data, options);
    return (asString || true) ? html : $(html);
  }

  /**
   * This program is free software; you can redistribute it and/or
   * modify it under the terms of the GNU General Public License
   * as published by the Free Software Foundation; under version 2
   * of the License (non-upgradable).
   *
   * This program is distributed in the hope that it will be useful,
   * but WITHOUT ANY WARRANTY; without even the implied warranty of
   * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   * GNU General Public License for more details.
   *
   * You should have received a copy of the GNU General Public License
   * along with this program; if not, write to the Free Software
   * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
   *
   * Copyright (c) 2019 Open Assessment Technologies SA ;
   */
  var labels = {
    // Digits definition
    NUM0: '0',
    NUM1: '1',
    NUM2: '2',
    NUM3: '3',
    NUM4: '4',
    NUM5: '5',
    NUM6: '6',
    NUM7: '7',
    NUM8: '8',
    NUM9: '9',
    DOT: '.',
    EXP10: "\xD710",
    POW10: '10<sup>x</sup>',
    // Aggregators
    LPAR: '(',
    RPAR: ')',
    // Separator
    COMMA: ',',
    ELLIPSIS: "\u2026",
    SPACER: '',
    // Operators
    SUB: '-',
    ADD: '+',
    POS: "\u207A",
    NEG: "\u207B",
    MUL: "\xD7",
    DIV: "\xF7",
    MOD: __('modulo'),
    POW: '^',
    POW2: 'x<sup>2</sup>',
    POW3: 'x<sup>3</sup>',
    POWY: 'x<sup>y</sup>',
    POWMINUSONE: "x<sup>\u207B" + '1</sup>',
    FAC: '!',
    ASSIGN: '=',
    // Variables
    ANS: __('Ans'),
    // Constants
    PI: "\u03C0",
    E: 'e',
    // Errors
    NAN: __('Error'),
    INFINITY: __('Infinity'),
    ERROR: __('Syntax error'),
    // Functions
    EXP: __('exp'),
    EXPX: 'e<sup>x</sup>',
    SQRT: "\u221A",
    CBRT: "<sup>3</sup>\u221A",
    NTHRT: "<sup>y</sup>\u221Ax",
    FLOOR: __('floor'),
    CEIL: __('ceil'),
    ROUND: __('round'),
    TRUNC: __('trunc'),
    SIN: __('sin'),
    COS: __('cos'),
    TAN: __('tan'),
    ASIN: __('sin') + "<sup>\u207B1</sup>",
    ACOS: __('cos') + "<sup>\u207B1</sup>",
    ATAN: __('tan') + "<sup>\u207B1</sup>",
    SINH: __('sinh'),
    COSH: __('cosh'),
    TANH: __('tanh'),
    ASINH: __('sinh') + "<sup>\u207B1</sup>",
    ACOSH: __('cosh') + "<sup>\u207B1</sup>",
    ATANH: __('tanh') + "<sup>\u207B1</sup>",
    LN: __('ln'),
    LOG: __('log') + '<sub>10</sub>',
    ABS: __('abs'),
    RAND: __('random'),
    // Actions
    CLEAR: __('C'),
    CLEARALL: __('AC'),
    EXECUTE: '=',
    HISTORYUP: historyUpTpl(),
    HISTORYDOWN: historyDownTpl(),
    BACKSPACE: backspaceTpl(),
    DEGREE: __('Deg'),
    RADIAN: __('Rad'),
    SIGN: '&plusmn;'
  };

  return labels;

});
