define(['jquery', 'lodash', 'i18n', 'util/namespace', 'ui/scroller', 'ui/maths/calculator/core/terms', 'ui/maths/calculator/core/expression', 'ui/maths/calculator/core/plugin', 'handlebars', 'lib/dompurify/purify'], function ($$1, _, __, nsHelper, scrollHelper, registeredTerms, expressionHelper, pluginFactory, Handlebars, DOMPurify) { 'use strict';

  $$1 = $$1 && $$1.hasOwnProperty('default') ? $$1['default'] : $$1;
  _ = _ && _.hasOwnProperty('default') ? _['default'] : _;
  __ = __ && __.hasOwnProperty('default') ? __['default'] : __;
  nsHelper = nsHelper && nsHelper.hasOwnProperty('default') ? nsHelper['default'] : nsHelper;
  scrollHelper = scrollHelper && scrollHelper.hasOwnProperty('default') ? scrollHelper['default'] : scrollHelper;
  registeredTerms = registeredTerms && registeredTerms.hasOwnProperty('default') ? registeredTerms['default'] : registeredTerms;
  expressionHelper = expressionHelper && expressionHelper.hasOwnProperty('default') ? expressionHelper['default'] : expressionHelper;
  pluginFactory = pluginFactory && pluginFactory.hasOwnProperty('default') ? pluginFactory['default'] : pluginFactory;
  Handlebars = Handlebars && Handlebars.hasOwnProperty('default') ? Handlebars['default'] : Handlebars;
  DOMPurify = DOMPurify && DOMPurify.hasOwnProperty('default') ? DOMPurify['default'] : DOMPurify;

  function _typeof(obj) {
    "@babel/helpers - typeof";

    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function Helpers0 (hb) {
    //register a i18n helper
    hb.registerHelper('__', function (key) {
      return __(key);
    });
    /**
     * Register dompurify helper
     *
     * https://github.com/cure53/DOMPurify
     * with config SAFE_FOR_TEMPLATES: true
     * to make output safe for template systems
     */

    hb.registerHelper('dompurify', function (context) {
      return DOMPurify.sanitize(context);
    });
    /**
     * Register join helper
     *
     * Example :
     * var values = {a:v1, b:v2, c:v3};
     * Using {{{join attributes '=' ' ' '"'}}} will return : a="v1" b="v2" c="v3"
     * Using {{{join values null ' or ' '*'}}} will return : *v1* or *v2* or *v3*
     */

    hb.registerHelper('join', function (arr, keyValueGlue, fragmentGlue, wrapper) {
      var fragments = [];
      keyValueGlue = typeof keyValueGlue === 'string' ? keyValueGlue : undefined;
      fragmentGlue = typeof fragmentGlue === 'string' ? fragmentGlue : ' ';
      wrapper = typeof wrapper === 'string' ? wrapper : '"';

      _.forIn(arr, function (value, key) {
        var fragment = '';

        if (value !== null || value !== undefined) {
          if (typeof value === 'boolean') {
            value = value ? 'true' : 'false';
          } else if (_typeof(value) === 'object') {
            value = _.values(value).join(' ');
          }
        } else {
          value = '';
        }

        if (keyValueGlue !== undefined) {
          fragment += key + keyValueGlue;
        }

        fragment += wrapper + value + wrapper;
        fragments.push(fragment);
      });

      return fragments.join(fragmentGlue);
    }); //register a classic "for loop" helper
    //it also adds a local variable "i" as the index in each iteration loop

    hb.registerHelper('for', function (startIndex, stopIndex, increment, options) {
      var ret = '';
      startIndex = parseInt(startIndex);
      stopIndex = parseInt(stopIndex);
      increment = parseInt(increment);

      for (var i = startIndex; i < stopIndex; i += increment) {
        ret += options.fn(_.extend({}, this, {
          i: i
        }));
      }

      return ret;
    });
    hb.registerHelper('equal', function (var1, var2, options) {
      if (var1 == var2) {
        return options.fn(this);
      } else {
        return options.inverse(this);
      }
    }); // register a "get property" helper
    // it gets the named property from the provided context

    hb.registerHelper('property', function (name, context) {
      return context[name] || '';
    }); // register an 'includes' helper
    // it checks if value is in array

    hb.registerHelper('includes', function (haystack, needle, options) {
      if (_.contains(haystack, needle)) {
        return options.fn(this);
      }
    });
  }

  if (!Helpers0.__initialized) {
    Helpers0(Handlebars);
    Helpers0.__initialized = true;
  }
  var Template = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
    this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
    var buffer = "", stack1, helper, functionType="function";


    buffer += "<div class=\"history-line\">\n    <div class=\"history-expression\">";
    if (helper = helpers.expression) { stack1 = helper.call(depth0, {hash:{},data:data}); }
    else { helper = (depth0 && depth0.expression); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
    if(stack1 || stack1 === 0) { buffer += stack1; }
    buffer += "</div>\n    <div class=\"history-result\">";
    if (helper = helpers.result) { stack1 = helper.call(depth0, {hash:{},data:data}); }
    else { helper = (depth0 && depth0.result); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
    if(stack1 || stack1 === 0) { buffer += stack1; }
    buffer += "</div>\n</div>";
    return buffer;
    });
  function historyTpl(data, options, asString) {
    var html = Template(data, options);
    return (asString || true) ? html : $(html);
  }

  if (!Helpers0.__initialized) {
    Helpers0(Handlebars);
    Helpers0.__initialized = true;
  }
  var Template$1 = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
    this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
    var buffer = "", stack1, helper, functionType="function";


    buffer += "<div class=\"calculator-screen simple-screen\">\n    <div class=\"screen-panel history\">";
    if (helper = helpers.history) { stack1 = helper.call(depth0, {hash:{},data:data}); }
    else { helper = (depth0 && depth0.history); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
    if(stack1 || stack1 === 0) { buffer += stack1; }
    buffer += "</div>\n    <div class=\"screen-panel expression\">";
    if (helper = helpers.expression) { stack1 = helper.call(depth0, {hash:{},data:data}); }
    else { helper = (depth0 && depth0.expression); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
    if(stack1 || stack1 === 0) { buffer += stack1; }
    buffer += "</div>\n</div>";
    return buffer;
    });
  function defaultScreenTpl(data, options, asString) {
    var html = Template$1(data, options);
    return (asString || true) ? html : $(html);
  }

  /**
   * This program is free software; you can redistribute it and/or
   * modify it under the terms of the GNU General Public License
   * as published by the Free Software Foundation; under version 2
   * of the License (non-upgradable).
   *
   * This program is distributed in the hope that it will be useful,
   * but WITHOUT ANY WARRANTY; without even the implied warranty of
   * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   * GNU General Public License for more details.
   *
   * You should have received a copy of the GNU General Public License
   * along with this program; if not, write to the Free Software
   * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
   *
   * Copyright (c) 2018 Open Assessment Technologies SA ;
   */
  var pluginName = 'simpleScreen';
  /**
   * Default displayed value
   * @type {String}
   */

  var defaultExpression = '0';
  /**
   * Default plugin config
   * @type {Object}
   */

  var defaultConfig = {
    // the layout of the screen
    layout: defaultScreenTpl,
    // number of decimal digits shown for decimal numbers
    decimalDigits: 5
  };
  var simpleScreen = pluginFactory({
    name: pluginName,

    /**
     * Called when the plugin should be initialized.
     */
    init: function init() {
      var calculator = this.getCalculator();
      /**
       * Reset the current expression
       */

      function reset() {
        calculator.replace(calculator.getConfig().expression || defaultExpression);
      }

      reset();
      calculator.after(nsHelper.namespaceAll('expressionchange', pluginName), function (expression) {
        // ensure the displayed expression is at least a 0 (never be an empty string)
        if (!expression.trim()) {
          _.defer(reset);
        }
      }).after(nsHelper.namespaceAll('evaluate', pluginName), function () {
        // when the expression is computed, replace it with the result as a variable
        calculator.replace(registeredTerms.ANS.value);
      }).on(nsHelper.namespaceAll('clear', pluginName), reset);
    },

    /**
     * Called when the plugin should be rendered.
     */
    render: function render() {
      var self = this;
      var calculator = this.getCalculator();
      var areaBroker = calculator.getAreaBroker();
      var pluginConfig = this.getConfig();
      var tokenizer = calculator.getTokenizer();
      /**
       * Auto scroll to the last child of a container
       * @param {jQuery} $container
       * @param {String} [sel]
       */

      function autoScroll($container, sel) {
        scrollHelper.scrollTo($container.find(':last-child ' + (sel || '')), $container);
      }
      /**
       * Renders the expression into a string
       * @param {String|Object|token[]} expression
       * @returns {String}
       */


      function renderExpression(expression) {
        var variables = expressionHelper.roundLastResultVariable(calculator.getVariables(), pluginConfig.decimalDigits);
        return expressionHelper.render(expression, variables, tokenizer);
      }
      /**
       * Updates the expression area
       * @param {String|Object|token[]} tokens
       */


      function showExpression(tokens) {
        self.controls.$expression.html(renderExpression(tokens));
        autoScroll(self.controls.$expression);
      }

      if (!_.isFunction(pluginConfig.layout)) {
        throw new TypeError('The screen plugin requires a template to render!');
      }

      this.$layout = $$1(pluginConfig.layout(_.defaults({
        expression: renderExpression(calculator.getTokens())
      }, pluginConfig)));
      this.controls = {
        $history: this.$layout.find('.history'),
        $expression: this.$layout.find('.expression')
      };
      calculator.on(nsHelper.namespaceAll('command-clearAll', pluginName), function () {
        self.controls.$history.empty();
      }).on(nsHelper.namespaceAll('expressionchange', pluginName), function () {
        calculator.setState('error', false);
        showExpression(calculator.getTokens());
      }).on(nsHelper.namespaceAll('evaluate', pluginName), function (result) {
        self.controls.$history.html(historyTpl({
          expression: renderExpression(calculator.getTokens()),
          result: renderExpression(result)
        }));
        autoScroll(self.controls.$history, '.history-result');
      }).after(nsHelper.namespaceAll('evaluate', pluginName), function (result) {
        if (expressionHelper.containsError(result.value)) {
          showExpression(result);
        }
      }).on(nsHelper.namespaceAll('syntaxerror', pluginName), function () {
        calculator.setState('error', true);
        showExpression(calculator.getExpression() + registeredTerms.ERROR.value);
      });
      areaBroker.getScreenArea().append(this.$layout);
    },

    /**
     * Called when the plugin is destroyed. Mostly when the host is destroyed itself.
     */
    destroy: function destroy() {
      var calculator = this.getCalculator();

      if (this.$layout) {
        this.$layout.off('.' + pluginName).remove();
        this.$layout = null;
      }

      this.controls = null;
      calculator.off('.' + pluginName);
    }
  }, defaultConfig);

  return simpleScreen;

});
