define(['jquery', 'lodash', 'core/eventifier', 'ui/documentViewer/providers/pdfViewer/pdfjs/areaBroker', 'ui/documentViewer/providers/pdfViewer/pdfjs/findBar', 'ui/documentViewer/providers/pdfViewer/pdfjs/wrapper', 'handlebars', 'i18n', 'lib/dompurify/purify'], function ($$1, _, eventifier, areaBroker, findBarFactory, wrapperFactory, Handlebars, __, DOMPurify) { 'use strict';

  $$1 = $$1 && $$1.hasOwnProperty('default') ? $$1['default'] : $$1;
  _ = _ && _.hasOwnProperty('default') ? _['default'] : _;
  eventifier = eventifier && eventifier.hasOwnProperty('default') ? eventifier['default'] : eventifier;
  areaBroker = areaBroker && areaBroker.hasOwnProperty('default') ? areaBroker['default'] : areaBroker;
  findBarFactory = findBarFactory && findBarFactory.hasOwnProperty('default') ? findBarFactory['default'] : findBarFactory;
  wrapperFactory = wrapperFactory && wrapperFactory.hasOwnProperty('default') ? wrapperFactory['default'] : wrapperFactory;
  Handlebars = Handlebars && Handlebars.hasOwnProperty('default') ? Handlebars['default'] : Handlebars;
  __ = __ && __.hasOwnProperty('default') ? __['default'] : __;
  DOMPurify = DOMPurify && DOMPurify.hasOwnProperty('default') ? DOMPurify['default'] : DOMPurify;

  function _typeof(obj) {
    "@babel/helpers - typeof";

    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function Helpers0 (hb) {
    //register a i18n helper
    hb.registerHelper('__', function (key) {
      return __(key);
    });
    /**
     * Register dompurify helper
     *
     * https://github.com/cure53/DOMPurify
     * with config SAFE_FOR_TEMPLATES: true
     * to make output safe for template systems
     */

    hb.registerHelper('dompurify', function (context) {
      return DOMPurify.sanitize(context);
    });
    /**
     * Register join helper
     *
     * Example :
     * var values = {a:v1, b:v2, c:v3};
     * Using {{{join attributes '=' ' ' '"'}}} will return : a="v1" b="v2" c="v3"
     * Using {{{join values null ' or ' '*'}}} will return : *v1* or *v2* or *v3*
     */

    hb.registerHelper('join', function (arr, keyValueGlue, fragmentGlue, wrapper) {
      var fragments = [];
      keyValueGlue = typeof keyValueGlue === 'string' ? keyValueGlue : undefined;
      fragmentGlue = typeof fragmentGlue === 'string' ? fragmentGlue : ' ';
      wrapper = typeof wrapper === 'string' ? wrapper : '"';

      _.forIn(arr, function (value, key) {
        var fragment = '';

        if (value !== null || value !== undefined) {
          if (typeof value === 'boolean') {
            value = value ? 'true' : 'false';
          } else if (_typeof(value) === 'object') {
            value = _.values(value).join(' ');
          }
        } else {
          value = '';
        }

        if (keyValueGlue !== undefined) {
          fragment += key + keyValueGlue;
        }

        fragment += wrapper + value + wrapper;
        fragments.push(fragment);
      });

      return fragments.join(fragmentGlue);
    }); //register a classic "for loop" helper
    //it also adds a local variable "i" as the index in each iteration loop

    hb.registerHelper('for', function (startIndex, stopIndex, increment, options) {
      var ret = '';
      startIndex = parseInt(startIndex);
      stopIndex = parseInt(stopIndex);
      increment = parseInt(increment);

      for (var i = startIndex; i < stopIndex; i += increment) {
        ret += options.fn(_.extend({}, this, {
          i: i
        }));
      }

      return ret;
    });
    hb.registerHelper('equal', function (var1, var2, options) {
      if (var1 == var2) {
        return options.fn(this);
      } else {
        return options.inverse(this);
      }
    }); // register a "get property" helper
    // it gets the named property from the provided context

    hb.registerHelper('property', function (name, context) {
      return context[name] || '';
    }); // register an 'includes' helper
    // it checks if value is in array

    hb.registerHelper('includes', function (haystack, needle, options) {
      if (_.contains(haystack, needle)) {
        return options.fn(this);
      }
    });
  }

  if (!Helpers0.__initialized) {
    Helpers0(Handlebars);
    Helpers0.__initialized = true;
  }
  var Template = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
    this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
    var buffer = "", stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    var buffer = "", helper, options;
    buffer += "\n        <input type=\"checkbox\" id=\"fit-to-width\" data-control=\"fit-to-width\" value=\"1\" checked /> <label for=\"fit-to-width\">"
      + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Fit to width", options) : helperMissing.call(depth0, "__", "Fit to width", options)))
      + "</label>\n        ";
    return buffer;
    }

    buffer += "<div class=\"pdf-bar\">\n    <div class=\"pdf-actions\">\n        <button class=\"small navigation\" data-control=\"pdf-page-prev\" data-direction=\"-1\" title=\""
      + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Previous page", options) : helperMissing.call(depth0, "__", "Previous page", options)))
      + "\"><span class=\"icon icon-step-backward\"></span><span class=\"text\">"
      + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Previous", options) : helperMissing.call(depth0, "__", "Previous", options)))
      + "</span></button>\n        <button class=\"small navigation\" data-control=\"pdf-page-next\" data-direction=\"1\" title=\""
      + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Next page", options) : helperMissing.call(depth0, "__", "Next page", options)))
      + "\"><span class=\"icon icon-step-forward\"></span><span class=\"text\">"
      + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Next", options) : helperMissing.call(depth0, "__", "Next", options)))
      + "</span></button>\n        ";
    stack1 = helpers['if'].call(depth0, (depth0 && depth0.fitToWidth), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
    if(stack1 || stack1 === 0) { buffer += stack1; }
    buffer += "\n    </div>\n    <div class=\"pdf-info\">\n        <label for=\"pdf-page-num\">"
      + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Page", options) : helperMissing.call(depth0, "__", "Page", options)))
      + ":</label>\n        <input class=\"info\" id=\"pdf-page-num\" data-control=\"pdf-page-num\" value=\"1\" />\n        <label>"
      + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "of", options) : helperMissing.call(depth0, "__", "of", options)))
      + "</label>\n        <span class=\"info\" data-control=\"pdf-page-count\">1</span>\n    </div>\n</div>\n<div class=\"pdf-container\"></div>\n";
    return buffer;
    });
  function viewerTpl(data, options, asString) {
    var html = Template(data, options);
    return (asString || true) ? html : $(html);
  }

  /**
   * This program is free software; you can redistribute it and/or
   * modify it under the terms of the GNU General Public License
   * as published by the Free Software Foundation; under version 2
   * of the License (non-upgradable).
   *
   * This program is distributed in the hope that it will be useful,
   * but WITHOUT ANY WARRANTY; without even the implied warranty of
   * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   * GNU General Public License for more details.
   *
   * You should have received a copy of the GNU General Public License
   * along with this program; if not, write to the Free Software
   * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
   *
   * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;
   */
  /**
   * Enable/disable an element
   * @param {jQuery} $element
   * @param {Boolean} enabled
   */

  function toggleState($element, enabled) {
    if (enabled) {
      $element.removeAttr('disabled');
    } else {
      $element.attr('disabled', true);
    }
  }
  /**
   * Wraps the component that use the PDF.js lib to render a PDF.
   * @param {jQuery} $container
   * @param {Object} config
   * @param {Object} config.PDFJS - The PDFJS entry point
   * @param {Boolean} [config.fitToWidth] - Fit the page to the available width, a scroll bar may appear
   * @param {Boolean} [config.allowSearch] - Allow to search within the displayed PDF
   * @param {Boolean} [config.caseSensitiveSearch] - Use a case sensitive search when the search feature is available
   * @param {Boolean} [config.highlightAllMatches] - Highlight all matches to see all of them at a glance
   * @returns {Object}
   */


  function pdfjsViewerFactory($container, config) {
    var template = viewerTpl(config);
    var events = eventifier();
    var controls = {};
    var broker = null;
    var findBar = null;
    var pdfConfig = null;
    var pdf = null;
    var PDFJS = null;
    var enabled = true;
    /**
     * Will update the displayed controls according to the current PDF
     */

    function updateControls() {
      var page = pdf.getPage();
      var pageCount = pdf.getPageCount();

      if (page !== parseInt(controls.$pageNum.val(), 10)) {
        controls.$pageNum.val(page);
      }

      toggleState(controls.$pagePrev, enabled && page > 1);
      toggleState(controls.$pageNext, enabled && page < pageCount);
      toggleState(controls.$pageNum, enabled && pageCount > 1);
    }
    /**
     * Enables the controls
     */


    function enable() {
      /**
       * Requests an enabling
       * @event enable
       */
      events.trigger('enable');
    }
    /**
     * Disable the controls
     */


    function disable() {
      /**
       * Requests a disabling
       * @event disable
       */
      events.trigger('disable');
    }
    /**
     * Will refresh the page
     */


    function refresh() {
      /**
       * Requests a page refresh
       * @event refresh
       */
      events.trigger('refresh');
    }
    /**
     * Go to a particular page
     * @param page
     */


    function jumpPage(page) {
      /**
       * Requests a page change
       * @event setpage
       * @param {Number} pageNum
       */
      events.trigger('setpage', page);
    }
    /**
     * Move the current page by step
     * @param step
     */


    function movePage(step) {
      jumpPage(pdf.getPage() + step);
    }

    config = config || {};
    PDFJS = config.PDFJS;
    pdfConfig = _.merge({
      events: events
    }, _.pick(config, ['PDFJS', 'fitToWidth']));

    if (!_.isPlainObject(PDFJS)) {
      throw new TypeError('You must provide the entry point to the PDF.js library! [config.PDFJS is missing]');
    }

    return {
      /**
       * Loads and displays the document
       * @param {String} url
       * @returns {Promise}
       */
      load: function load(url) {
        // PDF.js installed
        $container.html(template); // Disable the streaming mode: the file needs to be fully loaded before display.
        // This will prevent "Bad offset" error under Chrome and IE, but will slow down the first display.
        // Other approach would be to provide a range loader callback, but need a lot of work.

        PDFJS.PDFJS.disableRange = true;
        events.on('enable', function () {
          enabled = true;
          updateControls();
        }).on('disable', function () {
          enabled = false;
          updateControls();
        }).on('loaded', function () {
          controls.$pageCount.html(pdf.getPageCount());
          enable();
        }).on('pagechange rendered', function () {
          updateControls();
        });
        broker = areaBroker($container, {
          bar: $$1('.pdf-bar', $container),
          actions: $$1('.pdf-actions', $container),
          info: $$1('.pdf-info', $container),
          content: $$1('.pdf-container', $container)
        });
        controls = {
          $navigation: $container.find('.navigation'),
          $pagePrev: $container.find('[data-control="pdf-page-prev"]'),
          $pageNext: $container.find('[data-control="pdf-page-next"]'),
          $pageNum: $container.find('[data-control="pdf-page-num"]'),
          $pageCount: $container.find('[data-control="pdf-page-count"]'),
          $fitToWidth: $container.find('[data-control="fit-to-width"]')
        };
        pdf = wrapperFactory(broker.getContentArea(), pdfConfig);

        if (config.allowSearch) {
          findBar = findBarFactory({
            events: events,
            areaBroker: broker,
            textManager: pdf.getTextManager(),
            caseSensitive: config.caseSensitiveSearch,
            highlightAll: config.highlightAllMatches
          });
        }

        this.setSize($container.width(), $container.height());
        controls.$fitToWidth.on('change', function () {
          pdfConfig.fitToWidth = controls.$fitToWidth.is(':checked');
          refresh();
        });
        controls.$navigation.on('click', function () {
          movePage(parseInt($$1(this).data('direction'), 10) || 1);
        });
        controls.$pageNum.on('change', function () {
          jumpPage(parseInt(controls.$pageNum.val(), 10) || pdf.getPage());
        }).on('keydown', function (event) {
          switch (event.keyCode) {
            case 38:
              movePage(1);
              event.stopPropagation();
              event.preventDefault();
              break;

            case 40:
              movePage(-1);
              event.stopPropagation();
              event.preventDefault();
              break;
          }
        });
        disable();
        return pdf.load(url);
      },

      /**
       * Destroys the component
       */
      unload: function unload() {
        disable();

        if (findBar) {
          findBar.destroy();
        }

        if (pdf) {
          pdf.destroy();
        }

        events.removeAllListeners();
        $container.empty();
        controls = {};
        pdfConfig = null;
        pdf = null;
        findBar = null;
        broker = null;
      },

      /**
       * Sets the size of the component
       * @param {Number} width
       * @param {Number} height
       */
      setSize: function setSize(width, height) {
        var contentHeight, $bar, $content; // only adjust the action bar width, and let the PDF viewer manage its size with the remaining space

        if (pdf) {
          $bar = broker.getBarArea();
          $content = broker.getContentArea();
          contentHeight = height - $bar.outerHeight();
          $bar.width(width);
          $content.width(width).height(contentHeight);
          /**
           * Notifies a resize
           * @event resized
           * @param {Number} width
           * @param {Number} height
           * @param {Number} contentHeight
           */

          events.trigger('resized', width, height, contentHeight); // force the repaint of the current page, the PDF wrapper will take care of its container's size

          return pdf.refresh();
        }
      }
    };
  }

  return pdfjsViewerFactory;

});
