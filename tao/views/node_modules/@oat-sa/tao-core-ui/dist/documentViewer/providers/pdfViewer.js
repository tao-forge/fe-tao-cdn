define(['lodash', 'core/requireIfExists', 'ui/documentViewer/providers/pdfViewer/fallback/viewer', 'ui/documentViewer/providers/pdfViewer/pdfjs/viewer', 'handlebars', 'i18n', 'lib/dompurify/purify'], function (_, requireIfExists, fallbackFactory, pdfjsFactory, Handlebars, __, DOMPurify) { 'use strict';

  _ = _ && _.hasOwnProperty('default') ? _['default'] : _;
  requireIfExists = requireIfExists && requireIfExists.hasOwnProperty('default') ? requireIfExists['default'] : requireIfExists;
  fallbackFactory = fallbackFactory && fallbackFactory.hasOwnProperty('default') ? fallbackFactory['default'] : fallbackFactory;
  pdfjsFactory = pdfjsFactory && pdfjsFactory.hasOwnProperty('default') ? pdfjsFactory['default'] : pdfjsFactory;
  Handlebars = Handlebars && Handlebars.hasOwnProperty('default') ? Handlebars['default'] : Handlebars;
  __ = __ && __.hasOwnProperty('default') ? __['default'] : __;
  DOMPurify = DOMPurify && DOMPurify.hasOwnProperty('default') ? DOMPurify['default'] : DOMPurify;

  function _typeof(obj) {
    "@babel/helpers - typeof";

    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function Helpers0 (hb) {
    //register a i18n helper
    hb.registerHelper('__', function (key) {
      return __(key);
    });
    /**
     * Register dompurify helper
     *
     * https://github.com/cure53/DOMPurify
     * with config SAFE_FOR_TEMPLATES: true
     * to make output safe for template systems
     */

    hb.registerHelper('dompurify', function (context) {
      return DOMPurify.sanitize(context);
    });
    /**
     * Register join helper
     *
     * Example :
     * var values = {a:v1, b:v2, c:v3};
     * Using {{{join attributes '=' ' ' '"'}}} will return : a="v1" b="v2" c="v3"
     * Using {{{join values null ' or ' '*'}}} will return : *v1* or *v2* or *v3*
     */

    hb.registerHelper('join', function (arr, keyValueGlue, fragmentGlue, wrapper) {
      var fragments = [];
      keyValueGlue = typeof keyValueGlue === 'string' ? keyValueGlue : undefined;
      fragmentGlue = typeof fragmentGlue === 'string' ? fragmentGlue : ' ';
      wrapper = typeof wrapper === 'string' ? wrapper : '"';

      _.forIn(arr, function (value, key) {
        var fragment = '';

        if (value !== null || value !== undefined) {
          if (typeof value === 'boolean') {
            value = value ? 'true' : 'false';
          } else if (_typeof(value) === 'object') {
            value = _.values(value).join(' ');
          }
        } else {
          value = '';
        }

        if (keyValueGlue !== undefined) {
          fragment += key + keyValueGlue;
        }

        fragment += wrapper + value + wrapper;
        fragments.push(fragment);
      });

      return fragments.join(fragmentGlue);
    }); //register a classic "for loop" helper
    //it also adds a local variable "i" as the index in each iteration loop

    hb.registerHelper('for', function (startIndex, stopIndex, increment, options) {
      var ret = '';
      startIndex = parseInt(startIndex);
      stopIndex = parseInt(stopIndex);
      increment = parseInt(increment);

      for (var i = startIndex; i < stopIndex; i += increment) {
        ret += options.fn(_.extend({}, this, {
          i: i
        }));
      }

      return ret;
    });
    hb.registerHelper('equal', function (var1, var2, options) {
      if (var1 == var2) {
        return options.fn(this);
      } else {
        return options.inverse(this);
      }
    }); // register a "get property" helper
    // it gets the named property from the provided context

    hb.registerHelper('property', function (name, context) {
      return context[name] || '';
    }); // register an 'includes' helper
    // it checks if value is in array

    hb.registerHelper('includes', function (haystack, needle, options) {
      if (_.contains(haystack, needle)) {
        return options.fn(this);
      }
    });
  }

  if (!Helpers0.__initialized) {
    Helpers0(Handlebars);
    Helpers0.__initialized = true;
  }
  var Template = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
    this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Handlebars.helpers);  


    return "<div class=\"pdf-viewer\"></div>";
    });
  function viewerTpl(data, options, asString) {
    var html = Template(data, options);
    return (asString || true) ? html : $(html);
  }

  /**
   * This program is free software; you can redistribute it and/or
   * modify it under the terms of the GNU General Public License
   * as published by the Free Software Foundation; under version 2
   * of the License (non-upgradable).
   *
   * This program is distributed in the hope that it will be useful,
   * but WITHOUT ANY WARRANTY; without even the implied warranty of
   * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   * GNU General Public License for more details.
   *
   * You should have received a copy of the GNU General Public License
   * along with this program; if not, write to the Free Software
   * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
   *
   * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;
   */
  var pdfViewer = {
    /**
     * Gets the template used to render the viewer
     * @returns {Function}
     */
    getTemplate: function getTemplate() {
      return viewerTpl;
    },

    /**
     * Initializes the component
     */
    init: function init() {
      this.pdf = null;
    },

    /**
     * Loads and displays the document
     */
    load: function load() {
      var self = this;
      var $element = this.getElement(); // try to load the  PDF.js lib, otherwise fallback to the browser native handling

      return requireIfExists('pdfjs-dist/build/pdf').then(function (pdfjs) {
        var config = _.clone(self.config);

        if (pdfjs) {
          config.PDFJS = pdfjs;
          self.pdf = pdfjsFactory($element, config);
        } else {
          self.pdf = fallbackFactory($element, config);
        }

        return self.pdf.load(self.getUrl());
      }).then(function () {
        self.setSize($element.width(), $element.height());
      });
    },

    /**
     * Destroys the component
     */
    unload: function unload() {
      if (this.pdf) {
        this.pdf.unload();
      }

      if (this.is('rendered')) {
        this.getElement().empty();
      }

      this.pdf = null;
    },

    /**
     * Sets the size of the component
     * @param {Number} width
     * @param {Number} height
     */
    setSize: function setSize(width, height) {
      if (this.pdf) {
        this.pdf.setSize(width, height);
      }
    }
  };

  return pdfViewer;

});
