define(['jquery', 'ui/hider', 'handlebars', 'i18n', 'lodash', 'lib/dompurify/purify'], function ($$1, hider, Handlebars, __, _, DOMPurify) { 'use strict';

  $$1 = $$1 && $$1.hasOwnProperty('default') ? $$1['default'] : $$1;
  hider = hider && hider.hasOwnProperty('default') ? hider['default'] : hider;
  Handlebars = Handlebars && Handlebars.hasOwnProperty('default') ? Handlebars['default'] : Handlebars;
  __ = __ && __.hasOwnProperty('default') ? __['default'] : __;
  _ = _ && _.hasOwnProperty('default') ? _['default'] : _;
  DOMPurify = DOMPurify && DOMPurify.hasOwnProperty('default') ? DOMPurify['default'] : DOMPurify;

  function _typeof(obj) {
    "@babel/helpers - typeof";

    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function Helpers0 (hb) {
    //register a i18n helper
    hb.registerHelper('__', function (key) {
      return __(key);
    });
    /**
     * Register dompurify helper
     *
     * https://github.com/cure53/DOMPurify
     * with config SAFE_FOR_TEMPLATES: true
     * to make output safe for template systems
     */

    hb.registerHelper('dompurify', function (context) {
      return DOMPurify.sanitize(context);
    });
    /**
     * Register join helper
     *
     * Example :
     * var values = {a:v1, b:v2, c:v3};
     * Using {{{join attributes '=' ' ' '"'}}} will return : a="v1" b="v2" c="v3"
     * Using {{{join values null ' or ' '*'}}} will return : *v1* or *v2* or *v3*
     */

    hb.registerHelper('join', function (arr, keyValueGlue, fragmentGlue, wrapper) {
      var fragments = [];
      keyValueGlue = typeof keyValueGlue === 'string' ? keyValueGlue : undefined;
      fragmentGlue = typeof fragmentGlue === 'string' ? fragmentGlue : ' ';
      wrapper = typeof wrapper === 'string' ? wrapper : '"';

      _.forIn(arr, function (value, key) {
        var fragment = '';

        if (value !== null || value !== undefined) {
          if (typeof value === 'boolean') {
            value = value ? 'true' : 'false';
          } else if (_typeof(value) === 'object') {
            value = _.values(value).join(' ');
          }
        } else {
          value = '';
        }

        if (keyValueGlue !== undefined) {
          fragment += key + keyValueGlue;
        }

        fragment += wrapper + value + wrapper;
        fragments.push(fragment);
      });

      return fragments.join(fragmentGlue);
    }); //register a classic "for loop" helper
    //it also adds a local variable "i" as the index in each iteration loop

    hb.registerHelper('for', function (startIndex, stopIndex, increment, options) {
      var ret = '';
      startIndex = parseInt(startIndex);
      stopIndex = parseInt(stopIndex);
      increment = parseInt(increment);

      for (var i = startIndex; i < stopIndex; i += increment) {
        ret += options.fn(_.extend({}, this, {
          i: i
        }));
      }

      return ret;
    });
    hb.registerHelper('equal', function (var1, var2, options) {
      if (var1 == var2) {
        return options.fn(this);
      } else {
        return options.inverse(this);
      }
    }); // register a "get property" helper
    // it gets the named property from the provided context

    hb.registerHelper('property', function (name, context) {
      return context[name] || '';
    }); // register an 'includes' helper
    // it checks if value is in array

    hb.registerHelper('includes', function (haystack, needle, options) {
      if (_.contains(haystack, needle)) {
        return options.fn(this);
      }
    });
  }

  if (!Helpers0.__initialized) {
    Helpers0(Handlebars);
    Helpers0.__initialized = true;
  }
  var Template = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
    this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
    var buffer = "", stack1, helper, functionType="function", escapeExpression=this.escapeExpression;


    buffer += "<div class=\"pdf-page hidden\" data-page=\"";
    if (helper = helpers.page) { stack1 = helper.call(depth0, {hash:{},data:data}); }
    else { helper = (depth0 && depth0.page); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
    buffer += escapeExpression(stack1)
      + "\">\n    <canvas class=\"pdf-content\"></canvas>\n    <div class=\"pdf-text\"></div>\n</div>\n";
    return buffer;
    });
  function pageTpl(data, options, asString) {
    var html = Template(data, options);
    return (asString || true) ? html : $(html);
  }

  /**
   * This program is free software; you can redistribute it and/or
   * modify it under the terms of the GNU General Public License
   * as published by the Free Software Foundation; under version 2
   * of the License (non-upgradable).
   *
   * This program is distributed in the hope that it will be useful,
   * but WITHOUT ANY WARRANTY; without even the implied warranty of
   * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   * GNU General Public License for more details.
   *
   * You should have received a copy of the GNU General Public License
   * along with this program; if not, write to the Free Software
   * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
   *
   * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;
   */
  /**
   * The default scale factor
   * @type {Number}
   */

  var DEFAULT_SCALE = 1.0;
  /**
   * The minimum scale factor that allows a good experience
   * @type {Number}
   */

  var MIN_SCALE = 0.25;
  /**
   * The maximum allowed scale factor
   * @type {Number}
   */

  var MAX_SCALE = 10.0;
  /**
   * A conversion factor from printed to displayed
   * @type {Number}
   */

  var CSS_UNITS = 96.0 / 72.0;
  /**
   * Returns scale factor for the canvas.
   * @param {CanvasRenderingContext2D} context
   * @returns {Number}
   */

  function getOutputScale(context) {
    var devicePixelRatio = window.devicePixelRatio || 1;
    var backingStoreRatio = context.backingStorePixelRatio || context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio || 1;
    return devicePixelRatio / backingStoreRatio;
  }
  /**
   * Normalize a scale factor
   * @param {Number} scale
   * @returns {Number}
   */


  function normalizeScale(scale) {
    return Math.min(Math.max(MIN_SCALE, parseInt(scale, 10) || DEFAULT_SCALE), MAX_SCALE);
  }
  /**
   * Creates a page view
   * @param {jQuery} $container
   * @param {Object} config
   * @param {Number} config.pageNum - The number of the page the view is displaying
   * @param {Object} [config.textManager] - The textManager component that gives access to the text content
   * @returns {Object}
   */


  function pageViewFactory($container, config) {
    var $pageView, $textLayer, $drawLayer;
    var canvas, context, scale;
    var textManager = null;
    var rendered = false;
    var pageNum;
    var view = {
      /**
       * The page number that is attached to this view
       * @type {Number}
       */
      get pageNum() {
        return pageNum;
      },

      set pageNum(num) {
        pageNum = parseInt(num, 10);
        $pageView.attr('data-page', num);
      },

      /**
       * Whether the view has been rendered or not
       * @returns {Boolean}
       */
      isRendered: function isRendered() {
        return rendered;
      },

      /**
       * Gets the page container
       * @returns {jQuery}
       */
      getContainer: function getContainer() {
        return $container;
      },

      /**
       * Gets the page view element
       * @returns {jQuery}
       */
      getElement: function getElement() {
        return $pageView;
      },

      /**
       * Gets the draw layer element
       * @returns {jQuery}
       */
      getDrawLayerElement: function getDrawLayerElement() {
        return $drawLayer;
      },

      /**
       * Gets the text layer container
       * @returns {jQuery}
       */
      getTextLayerElement: function getTextLayerElement() {
        return $textLayer;
      },

      /**
       * Gets the canvas element
       * @returns {HTMLElement}
       */
      getCanvas: function getCanvas() {
        return canvas;
      },

      /**
       * Gets the drawing context
       * @returns {CanvasRenderingContext2D}
       */
      getRenderingContext: function getRenderingContext() {
        return context;
      },

      /**
       * Sets the text manager
       * @param {Object} manager
       */
      setTextManager: function setTextManager(manager) {
        textManager = manager;
      },

      /**
       * Gets the text manager
       * @returns {Object}
       */
      getTextManager: function getTextManager() {
        return textManager;
      },

      /**
       * Renders a page into the view
       * @param {Object} page - The PDF page definition
       * @param {Boolean} [fitToWidth] - Force the page view to fit its container width, without respect of the container height
       * @returns {Promise}
       */
      render: function render(page, fitToWidth) {
        var viewport, textViewport, renderContext;
        var promises = [];
        var renderScale = scale * CSS_UNITS;
        rendered = false;
        viewport = page.getViewport(renderScale);
        renderContext = {
          canvasContext: view.getRenderingContext(),
          viewport: viewport
        };
        adjustSize(viewport, fitToWidth);
        promises.push(page.render(renderContext).promise);

        if (textManager) {
          $textLayer.empty();
          textViewport = viewport.clone({
            scale: renderScale * $textLayer.width() / viewport.width
          });
          promises.push(textManager.renderPage(page.pageIndex + 1, textViewport).then(function (renderedContent) {
            if ($textLayer) {
              $textLayer.append(renderedContent);
            }
          }));
        }

        return Promise.all(promises).then(function () {
          rendered = true;
        });
      },

      /**
       * Shows the page
       */
      show: function show() {
        hider.show($pageView);
      },

      /**
       * Hides the page
       */
      hide: function hide() {
        hider.hide($pageView);
      },

      /**
       * Removes and destroys the page view
       */
      destroy: function destroy() {
        $pageView.remove();
        $container = null;
        $pageView = null;
        $textLayer = null;
        $drawLayer = null;
        canvas = null;
        context = null;
        textManager = null;
        config = null;
      }
    };
    /**
     * Adjust the size of the page view to fit its container with respect to the provided viewport
     * @param {Object} viewport - The PDF page viewport
     * @param {Boolean} fitToWidth - Force the page view to fit its container width, without respect of the container height
     */

    function adjustSize(viewport, fitToWidth) {
      var ratio = viewport.width / (viewport.height || 1) || 1;
      var parentWidth = $container.width();
      var parentHeight = $container.height();
      var parentOffset = $container.offset();
      var width, height;

      function setSize(w, h) {
        $pageView.width(w).height(h).offset({
          left: parentOffset.left + Math.max(0, (parentWidth - w) / 2)
        });
        $drawLayer.width(w).height(h);
        $textLayer.width(w).height(h);
      }

      if (fitToWidth) {
        width = parentWidth;
        height = width / ratio;

        if (height > parentHeight) {
          setSize(Math.max(1, parentWidth / 2), height);
          parentWidth = $container.prop('scrollWidth');
          width = parentWidth;
          height = width / ratio;
        }
      } else {
        if (ratio >= 1) {
          height = Math.min(parentHeight, parentWidth / ratio);
          width = Math.min(parentWidth, height * ratio);
        } else {
          width = Math.min(parentWidth, parentHeight * ratio);
          height = Math.min(parentHeight, width / ratio);
        }
      }

      setSize(width, height);
      canvas.width = viewport.width;
      canvas.height = viewport.height;
    }

    config = config || {};
    textManager = config.textManager;
    pageNum = config.pageNum;
    $pageView = $$1(pageTpl({
      page: pageNum
    }));
    $textLayer = $pageView.find('.pdf-text');
    $drawLayer = $pageView.find('canvas');
    canvas = $drawLayer.get(0);
    context = canvas.getContext('2d');
    scale = normalizeScale(getOutputScale(context) * DEFAULT_SCALE); // the page view is automatically added to its container

    $container.append($pageView);
    return view;
  }

  return pageViewFactory;

});
