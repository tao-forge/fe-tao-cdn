define(['lodash', 'ui/component', 'handlebars', 'i18n', 'lib/dompurify/purify', 'css!ui/form/validator/css/validator.css'], function (_, componentFactory, Handlebars, __, DOMPurify, validator_css) { 'use strict';

  _ = _ && _.hasOwnProperty('default') ? _['default'] : _;
  componentFactory = componentFactory && componentFactory.hasOwnProperty('default') ? componentFactory['default'] : componentFactory;
  Handlebars = Handlebars && Handlebars.hasOwnProperty('default') ? Handlebars['default'] : Handlebars;
  __ = __ && __.hasOwnProperty('default') ? __['default'] : __;
  DOMPurify = DOMPurify && DOMPurify.hasOwnProperty('default') ? DOMPurify['default'] : DOMPurify;

  function _typeof(obj) {
    "@babel/helpers - typeof";

    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function Helpers0 (hb) {
    //register a i18n helper
    hb.registerHelper('__', function (key) {
      return __(key);
    });
    /**
     * Register dompurify helper
     *
     * https://github.com/cure53/DOMPurify
     * with config SAFE_FOR_TEMPLATES: true
     * to make output safe for template systems
     */

    hb.registerHelper('dompurify', function (context) {
      return DOMPurify.sanitize(context);
    });
    /**
     * Register join helper
     *
     * Example :
     * var values = {a:v1, b:v2, c:v3};
     * Using {{{join attributes '=' ' ' '"'}}} will return : a="v1" b="v2" c="v3"
     * Using {{{join values null ' or ' '*'}}} will return : *v1* or *v2* or *v3*
     */

    hb.registerHelper('join', function (arr, keyValueGlue, fragmentGlue, wrapper) {
      var fragments = [];
      keyValueGlue = typeof keyValueGlue === 'string' ? keyValueGlue : undefined;
      fragmentGlue = typeof fragmentGlue === 'string' ? fragmentGlue : ' ';
      wrapper = typeof wrapper === 'string' ? wrapper : '"';

      _.forIn(arr, function (value, key) {
        var fragment = '';

        if (value !== null || value !== undefined) {
          if (typeof value === 'boolean') {
            value = value ? 'true' : 'false';
          } else if (_typeof(value) === 'object') {
            value = _.values(value).join(' ');
          }
        } else {
          value = '';
        }

        if (keyValueGlue !== undefined) {
          fragment += key + keyValueGlue;
        }

        fragment += wrapper + value + wrapper;
        fragments.push(fragment);
      });

      return fragments.join(fragmentGlue);
    }); //register a classic "for loop" helper
    //it also adds a local variable "i" as the index in each iteration loop

    hb.registerHelper('for', function (startIndex, stopIndex, increment, options) {
      var ret = '';
      startIndex = parseInt(startIndex);
      stopIndex = parseInt(stopIndex);
      increment = parseInt(increment);

      for (var i = startIndex; i < stopIndex; i += increment) {
        ret += options.fn(_.extend({}, this, {
          i: i
        }));
      }

      return ret;
    });
    hb.registerHelper('equal', function (var1, var2, options) {
      if (var1 == var2) {
        return options.fn(this);
      } else {
        return options.inverse(this);
      }
    }); // register a "get property" helper
    // it gets the named property from the provided context

    hb.registerHelper('property', function (name, context) {
      return context[name] || '';
    }); // register an 'includes' helper
    // it checks if value is in array

    hb.registerHelper('includes', function (haystack, needle, options) {
      if (_.contains(haystack, needle)) {
        return options.fn(this);
      }
    });
  }

  if (!Helpers0.__initialized) {
    Helpers0(Handlebars);
    Helpers0.__initialized = true;
  }
  var Template = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
    this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
    var buffer = "", stack1, helper, functionType="function", escapeExpression=this.escapeExpression;


    buffer += "<div class=\"validation-error\">";
    if (helper = helpers.message) { stack1 = helper.call(depth0, {hash:{},data:data}); }
    else { helper = (depth0 && depth0.message); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
    buffer += escapeExpression(stack1)
      + "</div>\n";
    return buffer;
    });
  function messageTpl(data, options, asString) {
    var html = Template(data, options);
    return (asString || true) ? html : $(html);
  }

  if (!Helpers0.__initialized) {
    Helpers0(Handlebars);
    Helpers0.__initialized = true;
  }
  var Template$1 = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
    this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Handlebars.helpers);  


    return "<div class=\"form-validator\"></div>\n";
    });
  function validatorTpl(data, options, asString) {
    var html = Template$1(data, options);
    return (asString || true) ? html : $(html);
  }

  /**
   * This program is free software; you can redistribute it and/or
   * modify it under the terms of the GNU General Public License
   * as published by the Free Software Foundation; under version 2
   * of the License (non-upgradable).
   *
   * This program is distributed in the hope that it will be useful,
   * but WITHOUT ANY WARRANTY; without even the implied warranty of
   * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   * GNU General Public License for more details.
   *
   * You should have received a copy of the GNU General Public License
   * along with this program; if not, write to the Free Software
   * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
   *
   * Copyright (c) 2019 Open Assessment Technologies SA ;
   */
  /**
   * Some default config
   * @type {Object}
   */

  var defaults = {};
  /**
   * Builds a renderer component for the validation messages.
   *
   * @example
   *  const $container = $('.my-container');
   *  const validatorRenderer = validatorRendererFactory($container);
   *
   *  const messages = [
   *      'An error occurred!',
   *      'Please check your input'
   *  ];
   *
   *  if (isInvalid()) {
   *      validatorRenderer.display(messages);
   *  } else {
   *      validatorRenderer.clear();
   *  }
   *
   * @param {HTMLElement|String} container
   * @param {Object} config
   * @returns {validatorRenderer}
   * @fires ready - When the component is ready to work
   */

  function validatorRendererFactory(container, config) {
    var api = {
      /**
       * Displays messages
       * @param {String|String[]} messages
       * @returns {component}
       */
      display: function display(messages) {
        var $element = this.getElement();

        if (this.is('rendered')) {
          this.clear();

          if (messages && !_.isArray(messages)) {
            messages = [messages];
          }

          _.forEach(messages, function (message) {
            return $element.append(messageTpl({
              message: message
            }));
          });
        }

        return this;
      },

      /**
       * Clears all messages
       * @returns {component}
       */
      clear: function clear() {
        if (this.is('rendered')) {
          this.getElement().empty();
        }

        return this;
      }
    };
    var validatorRenderer = componentFactory(api, defaults).setTemplate(validatorTpl) // auto render on init
    .on('init', function () {
      var _this = this;

      // auto render on init (defer the call to give a chance to the init event to be completed before)
      _.defer(function () {
        return _this.render(container);
      });
    }) // renders the component
    .on('render', function () {
      if (this.getConfig().messages) {
        this.display(this.getConfig().messages);
      }
      /**
       * @event ready
       */


      this.trigger('ready');
    }); // initialize the component with the provided config
    // defer the call to allow to listen to the init event

    _.defer(function () {
      return validatorRenderer.init(config);
    });

    return validatorRenderer;
  }

  return validatorRendererFactory;

});
