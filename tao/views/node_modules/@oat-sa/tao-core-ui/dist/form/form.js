define(['lodash', 'ui/component', 'ui/button', 'ui/hider', 'ui/form/widget/definitions', 'ui/form/widget/loader', 'handlebars', 'i18n', 'lib/dompurify/purify', 'css!ui/form/css/form.css'], function (_, componentFactory, buttonFactory, hider, widgetDefinitions, widgetFactory, Handlebars, __, DOMPurify, form_css) { 'use strict';

  _ = _ && _.hasOwnProperty('default') ? _['default'] : _;
  componentFactory = componentFactory && componentFactory.hasOwnProperty('default') ? componentFactory['default'] : componentFactory;
  buttonFactory = buttonFactory && buttonFactory.hasOwnProperty('default') ? buttonFactory['default'] : buttonFactory;
  hider = hider && hider.hasOwnProperty('default') ? hider['default'] : hider;
  widgetDefinitions = widgetDefinitions && widgetDefinitions.hasOwnProperty('default') ? widgetDefinitions['default'] : widgetDefinitions;
  widgetFactory = widgetFactory && widgetFactory.hasOwnProperty('default') ? widgetFactory['default'] : widgetFactory;
  Handlebars = Handlebars && Handlebars.hasOwnProperty('default') ? Handlebars['default'] : Handlebars;
  __ = __ && __.hasOwnProperty('default') ? __['default'] : __;
  DOMPurify = DOMPurify && DOMPurify.hasOwnProperty('default') ? DOMPurify['default'] : DOMPurify;

  function _typeof(obj) {
    "@babel/helpers - typeof";

    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
  }

  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  function _iterableToArrayLimit(arr, i) {
    if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) {
      return;
    }

    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance");
  }

  function Helpers0 (hb) {
    //register a i18n helper
    hb.registerHelper('__', function (key) {
      return __(key);
    });
    /**
     * Register dompurify helper
     *
     * https://github.com/cure53/DOMPurify
     * with config SAFE_FOR_TEMPLATES: true
     * to make output safe for template systems
     */

    hb.registerHelper('dompurify', function (context) {
      return DOMPurify.sanitize(context);
    });
    /**
     * Register join helper
     *
     * Example :
     * var values = {a:v1, b:v2, c:v3};
     * Using {{{join attributes '=' ' ' '"'}}} will return : a="v1" b="v2" c="v3"
     * Using {{{join values null ' or ' '*'}}} will return : *v1* or *v2* or *v3*
     */

    hb.registerHelper('join', function (arr, keyValueGlue, fragmentGlue, wrapper) {
      var fragments = [];
      keyValueGlue = typeof keyValueGlue === 'string' ? keyValueGlue : undefined;
      fragmentGlue = typeof fragmentGlue === 'string' ? fragmentGlue : ' ';
      wrapper = typeof wrapper === 'string' ? wrapper : '"';

      _.forIn(arr, function (value, key) {
        var fragment = '';

        if (value !== null || value !== undefined) {
          if (typeof value === 'boolean') {
            value = value ? 'true' : 'false';
          } else if (_typeof(value) === 'object') {
            value = _.values(value).join(' ');
          }
        } else {
          value = '';
        }

        if (keyValueGlue !== undefined) {
          fragment += key + keyValueGlue;
        }

        fragment += wrapper + value + wrapper;
        fragments.push(fragment);
      });

      return fragments.join(fragmentGlue);
    }); //register a classic "for loop" helper
    //it also adds a local variable "i" as the index in each iteration loop

    hb.registerHelper('for', function (startIndex, stopIndex, increment, options) {
      var ret = '';
      startIndex = parseInt(startIndex);
      stopIndex = parseInt(stopIndex);
      increment = parseInt(increment);

      for (var i = startIndex; i < stopIndex; i += increment) {
        ret += options.fn(_.extend({}, this, {
          i: i
        }));
      }

      return ret;
    });
    hb.registerHelper('equal', function (var1, var2, options) {
      if (var1 == var2) {
        return options.fn(this);
      } else {
        return options.inverse(this);
      }
    }); // register a "get property" helper
    // it gets the named property from the provided context

    hb.registerHelper('property', function (name, context) {
      return context[name] || '';
    }); // register an 'includes' helper
    // it checks if value is in array

    hb.registerHelper('includes', function (haystack, needle, options) {
      if (_.contains(haystack, needle)) {
        return options.fn(this);
      }
    });
  }

  if (!Helpers0.__initialized) {
    Helpers0(Handlebars);
    Helpers0.__initialized = true;
  }
  var Template = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
    this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
    var buffer = "", stack1, helper, functionType="function", escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    var buffer = "", stack1, helper;
    buffer += " action=\"";
    if (helper = helpers.formAction) { stack1 = helper.call(depth0, {hash:{},data:data}); }
    else { helper = (depth0 && depth0.formAction); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
    buffer += escapeExpression(stack1)
      + "\"";
    return buffer;
    }

  function program3(depth0,data) {
    
    var buffer = "", stack1, helper;
    buffer += " method=\"";
    if (helper = helpers.formMethod) { stack1 = helper.call(depth0, {hash:{},data:data}); }
    else { helper = (depth0 && depth0.formMethod); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
    buffer += escapeExpression(stack1)
      + "\"";
    return buffer;
    }

    buffer += "<div class=\"form-component\">\n    <h2 class=\"form-title\">";
    if (helper = helpers.title) { stack1 = helper.call(depth0, {hash:{},data:data}); }
    else { helper = (depth0 && depth0.title); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
    buffer += escapeExpression(stack1)
      + "</h2>\n    <form";
    stack1 = helpers['if'].call(depth0, (depth0 && depth0.formAction), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
    if(stack1 || stack1 === 0) { buffer += stack1; }
    stack1 = helpers['if'].call(depth0, (depth0 && depth0.formMethod), {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});
    if(stack1 || stack1 === 0) { buffer += stack1; }
    buffer += ">\n        <fieldset class=\"fieldset\"></fieldset>\n        <div class=\"form-actions\"></div>\n    </form>\n</div>\n";
    return buffer;
    });
  function formTpl(data, options, asString) {
    var html = Template(data, options);
    return (asString || true) ? html : $(html);
  }

  /**
   * @typedef {Object} formConfig Defines the config entries available to setup a form
   * @property {String} [title] - An optional title for the form (default none)
   * @property {String} [formAction] - The url the form is targeting (default '')
   * @property {String} [formMethod] - The HTTP method the form should use (default '')
   * @property {widgetConfig[]} [widgets] - The list of widgets to set in the form (default none)
   * @property {buttonConfig[]} [buttons] - The list of buttons to set in the form (default none)
   * @property {Object} [values] - Initial values for the widgets
   * @property {Object} [ranges] - An optional list of ranges for the widgets (@see widgetConfig.range)
   */

  /**
   * @typedef {Object} widgetValue Defines the value serialized from a widget
   * @property {String} name - The identifier of the widget
   * @property {String} value - The value of the widget
   */

  /**
   * Some default config
   * @type {formConfig}
   */

  var defaults = {
    formAction: '',
    formMethod: ''
  };
  /**
   * Enables all components from the list
   * @param {Map} collection
   */

  function enableComponents(collection) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = collection.values()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var component = _step.value;
        component.enable();
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  }
  /**
   * Disables all components from the list
   * @param {Map} collection
   */


  function disableComponents(collection) {
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = collection.values()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var component = _step2.value;
        component.disable();
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
          _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }
  }
  /**
   * Remove and destroy a component from a collection.
   * @param {Map} collection
   * @param {String} key
   */


  function removeComponent(collection, key) {
    collection.get(key).off('.form').destroy();
    collection.delete(key);
  }
  /**
   * Gets indexed components from a collection.
   * @param {Map} collection
   * @returns {Object}
   */


  function getComponents(collection) {
    var components = {};
    var _iteratorNormalCompletion3 = true;
    var _didIteratorError3 = false;
    var _iteratorError3 = undefined;

    try {
      for (var _iterator3 = collection[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
        var _step3$value = _slicedToArray(_step3.value, 2),
            id = _step3$value[0],
            component = _step3$value[1];

        components[id] = component;
      }
    } catch (err) {
      _didIteratorError3 = true;
      _iteratorError3 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
          _iterator3.return();
        }
      } finally {
        if (_didIteratorError3) {
          throw _iteratorError3;
        }
      }
    }

    return components;
  }
  /**
   * Wait for a component to be ready
   * @param {component} component - The target component
   * @returns {Promise<component>}
   */


  function waitForRender(component) {
    return new Promise(function renderPromise(resolve) {
      var resolveRender = function resolveRender() {
        return resolve(component);
      };

      if (component.is('rendered')) {
        resolveRender();
      } else {
        component.on('ready', resolveRender);
      }
    });
  }
  /**
   * Validates a widget/button definition, then returns a promise
   * @param {component} component - The target component
   * @param {Object} definition - The definition to check
   * @param {String} key - The key name for the identifier within the definition object
   * @returns {Promise<component>}
   */


  function validateDefinition(component, definition, key) {
    if (!_.isPlainObject(definition)) {
      return Promise.reject(new TypeError('The definition must be an object'));
    }

    if (!definition[key] || !_.isString(definition[key])) {
      return Promise.reject(new TypeError('The definition must contain an identifier'));
    }

    return waitForRender(component);
  }
  /**
   * Builds a form component.
   *
   * @example
   *  const container = $('.my-container', $container);
   *
   *  const config = {
   *      title: 'My fancy form',
   *      widgets: [{
   *          widget: widgetDefinitions.TEXTBOX
   *          uri: 'nickname',
   *          label: 'Name',
   *          required: true
   *      }, {
   *          widget: widgetDefinitions.TEXTAREA
   *          uri: 'comment',
   *          label: 'Comment',
   *          required: true
   *      }],
   *      buttons = [{
   *          id: 'publish',
   *          label: 'Publish',
   *          icon: 'save
   *      }]
   *  };
   *
   *  const form = formFactory(container, config)
   *      .on('button-publish', () => {
   *          this.submit()
   *              .then(values => dataProvider('comment').send(values))
   *              .catch(reason => feedback().error('Invalid input!'))
   *      });
   *
   * @param {HTMLElement|String} container
   * @param {formConfig} config
   * @param {String} [config.title] - An optional title for the form (default none)
   * @param {String} [config.formAction] - The url the form is targeting (default '')
   * @param {String} [config.formMethod] - The HTTP method the form should use (default '')
   * @param {widgetConfig[]} [config.widgets] - The list of widgets to set in the form (default none)
   * @param {buttonConfig[]} [config.buttons] - The list of buttons to set in the form (default none)
   * @param {Object} [config.values] - Initial values for the widgets
   * @param {Object} [config.ranges] - An optional list of ranges for the widgets (@see widgetConfig.range)
   * @returns {form}
   * @fires ready - When the component is ready to work
   */


  function formFactory(container, config) {
    var widgets = new Map();
    var buttons = new Map();
    var controls = null;
    var api = {
      /**
       * Gets the url the form is targeting.
       * @returns {String}
       */
      getFormAction: function getFormAction() {
        return this.getConfig().formAction;
      },

      /**
       * Gets the HTTP method the form should use.
       * @returns {String}
       */
      getFormMethod: function getFormMethod() {
        return this.getConfig().formMethod;
      },

      /**
       * Gets access to the ranges set for the widgets (generis related)
       * @returns {Object}
       */
      getRanges: function getRanges() {
        return this.getConfig().ranges || {};
      },

      /**
       * Gets the title set to the form.
       * @returns {String}
       */
      getTitle: function getTitle() {
        return this.getConfig().title;
      },

      /**
       * Change the title of the form
       * @param {String} title
       * @returns {form}
       * @fires titlechange after the title has been changed
       */
      setTitle: function setTitle(title) {
        this.getConfig().title = title;

        if (this.is('rendered')) {
          controls.$title.text(title);
          hider.toggle(controls.$title, !!title);
        }
        /**
         * @event titlechange
         * @param {String} title
         */


        this.trigger('titlechange', title);
        return this;
      },

      /**
       * Gets a widget by its uri
       * @param {String} uri
       * @returns {widgetForm}
       */
      getWidget: function getWidget(uri) {
        return widgets.get(uri) || null;
      },

      /**
       * Adds a widget to the form
       * @param {widgetConfig} definition
       * @returns {Promise<widgetForm>}
       * @throws TypeError if the widget definition is invalid
       * @fires change when the widget's value changes
       * @fires change-<uri> when the widget's value changes
       * @fires widgetadd after the widget has been added
       */
      addWidget: function addWidget(definition) {
        var _this = this;

        return validateDefinition(this, definition, 'uri').then(function () {
          var ranges = _this.getRanges();

          if (definition.range && 'string' === typeof definition.range) {
            definition.range = ranges[definition.range];
          }

          if (!definition.widget) {
            definition.widget = widgetDefinitions.DEFAULT;
          }

          return new Promise(function (resolve) {
            var widget = widgetFactory(controls.$widgets, definition);
            widgets.set(definition.uri, widget);
            widget.on('change.form', function (value) {
              /**
               * @event change
               * @param {String} uri
               * @param {String} value
               */
              _this.trigger('change', definition.uri, value);
              /**
               * @event change-<uri>
               * @param {String} value
               */


              _this.trigger("change-".concat(definition.uri), value);
            }).on('ready.form', function () {
              /**
               * @event widgetadd
               * @param {String} uri
               * @param {widgetForm} widget
               */
              _this.trigger('widgetadd', definition.uri, widget);

              resolve(widget);
            });
          });
        });
      },

      /**
       * Removes a widget
       * @param {String} uri
       * @returns {form}
       * @fires widgetremove after the widget has been removed
       */
      removeWidget: function removeWidget(uri) {
        if (widgets.has(uri)) {
          removeComponent(widgets, uri);
          /**
           * @event widgetremove
           * @param {String} uri
           */

          this.trigger('widgetremove', uri);
        }

        return this;
      },

      /**
       * Gets the list of widgets.
       * @returns {Object}
       */
      getWidgets: function getWidgets() {
        return getComponents(widgets);
      },

      /**
       * Replace the widgets
       * @param {widgetConfig[]} definitions
       * @returns {Promise<widgetForm[]>}
       */
      setWidgets: function setWidgets(definitions) {
        var _this2 = this;

        this.removeWidgets();
        return Promise.all(_.map(definitions, function (definition) {
          return _this2.addWidget(definition);
        }));
      },

      /**
       * Removes all widgets
       * @returns {form}
       */
      removeWidgets: function removeWidgets() {
        var _iteratorNormalCompletion4 = true;
        var _didIteratorError4 = false;
        var _iteratorError4 = undefined;

        try {
          for (var _iterator4 = widgets.keys()[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
            var uri = _step4.value;
            this.removeWidget(uri);
          }
        } catch (err) {
          _didIteratorError4 = true;
          _iteratorError4 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion4 && _iterator4.return != null) {
              _iterator4.return();
            }
          } finally {
            if (_didIteratorError4) {
              throw _iteratorError4;
            }
          }
        }

        widgets.clear();
        return this;
      },

      /**
       * Gets a button by its identifier
       * @param {String} id
       * @returns {button}
       */
      getButton: function getButton(id) {
        return buttons.get(id) || null;
      },

      /**
       * Adds a button to the form
       * @param {buttonConfig} definition
       * @returns {Promise<button>}
       * @throws TypeError if the button definition is invalid
       * @fires button when the button is triggered
       * @fires button-<id> when the button is triggered
       * @fires buttonadd after the button has been added
       */
      addButton: function addButton(definition) {
        var _this3 = this;

        return validateDefinition(this, definition, 'id').then(function () {
          return new Promise(function (resolve) {
            var button = buttonFactory(definition);
            buttons.set(definition.id, button);
            button.on('click.form', function () {
              /**
               * @event button
               * @param {String} id
               */
              _this3.trigger('button', definition.id);
              /**
               * @event button-<id>
               */


              _this3.trigger("button-".concat(definition.id));
            }).on('ready.form', function () {
              /**
               * @event buttonadd
               * @param {String} id
               * @param {button} button
               */
              _this3.trigger('buttonadd', definition.id, button);

              resolve(button);
            });
            button.render(controls.$buttons);
          });
        });
      },

      /**
       * Removes a button
       * @param {String} id
       * @returns {form}
       * @fires buttonremove after the button has been removed
       */
      removeButton: function removeButton(id) {
        if (buttons.has(id)) {
          removeComponent(buttons, id);
          /**
           * @event buttonremove
           * @param {String} id
           */

          this.trigger('buttonremove', id);
        }

        return this;
      },

      /**
       * Gets the list of buttons.
       * @returns {Object}
       */
      getButtons: function getButtons() {
        return getComponents(buttons);
      },

      /**
       * Replace the buttons
       * @param {buttonConfig[]} definitions
       * @returns {Promise<button[]>}
       */
      setButtons: function setButtons(definitions) {
        var _this4 = this;

        this.removeButtons();
        return Promise.all(_.map(definitions, function (definition) {
          return _this4.addButton(definition);
        }));
      },

      /**
       * Removes all buttons
       * @returns {form}
       */
      removeButtons: function removeButtons() {
        var _iteratorNormalCompletion5 = true;
        var _didIteratorError5 = false;
        var _iteratorError5 = undefined;

        try {
          for (var _iterator5 = buttons.keys()[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
            var id = _step5.value;
            this.removeButton(id);
          }
        } catch (err) {
          _didIteratorError5 = true;
          _iteratorError5 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion5 && _iterator5.return != null) {
              _iterator5.return();
            }
          } finally {
            if (_didIteratorError5) {
              throw _iteratorError5;
            }
          }
        }

        buttons.clear();
        return this;
      },

      /**
       * Gets the value of a widget
       * @param {String} uri
       * @returns {String}
       */
      getValue: function getValue(uri) {
        if (widgets.has(uri)) {
          return widgets.get(uri).getValue();
        }

        return '';
      },

      /**
       * Sets the value of a widget
       * @param {String} uri
       * @param {String} value
       * @returns {form}
       */
      setValue: function setValue(uri, value) {
        if (widgets.has(uri)) {
          widgets.get(uri).setValue(value);
        }

        return this;
      },

      /**
       * Gets the values from all the form widgets
       * @returns {Object}
       */
      getValues: function getValues() {
        var values = {};
        var _iteratorNormalCompletion6 = true;
        var _didIteratorError6 = false;
        var _iteratorError6 = undefined;

        try {
          for (var _iterator6 = widgets[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
            var _step6$value = _slicedToArray(_step6.value, 2),
                uri = _step6$value[0],
                widget = _step6$value[1];

            values[uri] = widget.getValue();
          }
        } catch (err) {
          _didIteratorError6 = true;
          _iteratorError6 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion6 && _iterator6.return != null) {
              _iterator6.return();
            }
          } finally {
            if (_didIteratorError6) {
              throw _iteratorError6;
            }
          }
        }

        return values;
      },

      /**
       * Sets the values for the form widgets
       * @param {Object} values
       * @returns {form}
       */
      setValues: function setValues(values) {
        _.forEach(values, function (value, uri) {
          if (widgets.has(uri)) {
            widgets.get(uri).setValue(value);
          }
        });

        return this;
      },

      /**
       * Serializes form values to an array of name/value objects
       * @returns {widgetValue[]}
       */
      serializeValues: function serializeValues() {
        var values = [];
        var _iteratorNormalCompletion7 = true;
        var _didIteratorError7 = false;
        var _iteratorError7 = undefined;

        try {
          for (var _iterator7 = widgets.values()[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
            var widget = _step7.value;
            values.push({
              name: widget.getUri(),
              value: widget.getValue()
            });
          }
        } catch (err) {
          _didIteratorError7 = true;
          _iteratorError7 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion7 && _iterator7.return != null) {
              _iterator7.return();
            }
          } finally {
            if (_didIteratorError7) {
              throw _iteratorError7;
            }
          }
        }

        return values;
      },

      /**
       * Validate the form widgets
       * @returns {Promise}
       */
      validate: function validate() {
        var _this5 = this;

        var promises = [];
        var _iteratorNormalCompletion8 = true;
        var _didIteratorError8 = false;
        var _iteratorError8 = undefined;

        try {
          var _loop = function _loop() {
            var _step8$value = _slicedToArray(_step8.value, 2),
                uri = _step8$value[0],
                widget = _step8$value[1];

            promises.push(widget.validate().catch(function (messages) {
              return Promise.resolve({
                uri: uri,
                messages: messages
              });
            }));
          };

          for (var _iterator8 = widgets[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
            _loop();
          }
        } catch (err) {
          _didIteratorError8 = true;
          _iteratorError8 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion8 && _iterator8.return != null) {
              _iterator8.return();
            }
          } finally {
            if (_didIteratorError8) {
              throw _iteratorError8;
            }
          }
        }

        return Promise.all(promises).then(function (result) {
          var invalid = false;
          result = _.compact(result);

          if (result.length) {
            result = Promise.reject(result);
            invalid = true;
          }

          _this5.setState('invalid', invalid);

          return result;
        });
      },

      /**
       * Submits the form
       * @returns {form}
       * @fires submit in case of successful validation
       * @fires invalid in case of failed validation
       * @fires error when an error is raised
       */
      submit: function submit() {
        var _this6 = this;

        this.validate().then(function () {
          /**
           * @event submit
           * @param {widgetValue[]} values
           */
          _this6.trigger('submit', _this6.serializeValues());
        }).catch(function (reason) {
          /**
           * @event invalid
           * @param {Object} reason
           */
          _this6.trigger('invalid', reason);

          if (reason instanceof Error) {
            /**
             * @event error
             * @param {Error} err
             */
            _this6.trigger('error', reason);
          }
        });
        return this;
      },

      /**
       * Resets the form
       * @returns {form}
       * @fires reset
       */
      reset: function reset() {
        var _iteratorNormalCompletion9 = true;
        var _didIteratorError9 = false;
        var _iteratorError9 = undefined;

        try {
          for (var _iterator9 = widgets.values()[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
            var widget = _step9.value;
            widget.reset();
          }
          /**
           * @event reset
           */

        } catch (err) {
          _didIteratorError9 = true;
          _iteratorError9 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion9 && _iterator9.return != null) {
              _iterator9.return();
            }
          } finally {
            if (_didIteratorError9) {
              throw _iteratorError9;
            }
          }
        }

        this.trigger('reset');
        return this;
      }
    };
    var form = componentFactory(api, defaults) // set the component's layout
    .setTemplate(formTpl) // auto render on init
    .on('init', function onFormInit() {
      var _this7 = this;

      // auto render on init (defer the call to give a chance to the init event to be completed before)
      _.defer(function () {
        return _this7.render(container);
      });
    }) // renders the component
    .on('render', function onFormRender() {
      var _this8 = this;

      var $element = this.getElement();
      var initConfig = this.getConfig();
      var initPromises = [];
      controls = {
        $title: $element.find('.form-title'),
        $form: $element.find('form'),
        $widgets: $element.find('fieldset'),
        $buttons: $element.find('.form-actions')
      }; // prevent the default behavior of the form for submitting

      controls.$form.on('submit', function (e) {
        e.preventDefault();

        _this8.submit();
      });
      controls.$form.on('reset', function (e) {
        e.preventDefault();

        _this8.reset();
      }); // hide the title if empty

      hider.toggle(controls.$title, !!initConfig.title); // initial widgets and buttons

      if (_.size(initConfig.widgets)) {
        initPromises.push(this.setWidgets(initConfig.widgets));
      }

      if (_.size(initConfig.buttons)) {
        initPromises.push(this.setButtons(initConfig.buttons));
      }

      Promise.all(initPromises).then(function () {
        if (_.size(initConfig.values)) {
          _this8.setValues(initConfig.values);
        }
      }).catch(function (err) {
        _this8.trigger('error', err);
      }).then(function () {
        /**
         * @event ready
         */
        _this8.trigger('ready');
      });
    }) // take care of the disable state
    .on('disable', function () {
      disableComponents(widgets);
      disableComponents(buttons);
    }).on('enable', function () {
      enableComponents(widgets);
      enableComponents(buttons);
    }) // cleanup the place
    .on('destroy', function onFormDestroy() {
      this.removeButtons();
      this.removeWidgets();
      controls = null;
    }); // initialize the component with the provided config
    // defer the call to allow to listen to the init event

    _.defer(function () {
      return form.init(config);
    });

    return form;
  }

  return formFactory;

});
