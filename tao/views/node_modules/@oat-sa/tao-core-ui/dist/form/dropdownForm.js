define(['lodash', 'i18n', 'ui/component', 'ui/button', 'ui/form/simpleForm', 'handlebars', 'lib/dompurify/purify', 'css!ui/form/css/dropdownForm.css'], function (_, __, componentFactory, buttonFactory, formFactory, Handlebars, DOMPurify, dropdownForm_css) { 'use strict';

  _ = _ && _.hasOwnProperty('default') ? _['default'] : _;
  __ = __ && __.hasOwnProperty('default') ? __['default'] : __;
  componentFactory = componentFactory && componentFactory.hasOwnProperty('default') ? componentFactory['default'] : componentFactory;
  buttonFactory = buttonFactory && buttonFactory.hasOwnProperty('default') ? buttonFactory['default'] : buttonFactory;
  formFactory = formFactory && formFactory.hasOwnProperty('default') ? formFactory['default'] : formFactory;
  Handlebars = Handlebars && Handlebars.hasOwnProperty('default') ? Handlebars['default'] : Handlebars;
  DOMPurify = DOMPurify && DOMPurify.hasOwnProperty('default') ? DOMPurify['default'] : DOMPurify;

  function _typeof(obj) {
    "@babel/helpers - typeof";

    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function Helpers0 (hb) {
    //register a i18n helper
    hb.registerHelper('__', function (key) {
      return __(key);
    });
    /**
     * Register dompurify helper
     *
     * https://github.com/cure53/DOMPurify
     * with config SAFE_FOR_TEMPLATES: true
     * to make output safe for template systems
     */

    hb.registerHelper('dompurify', function (context) {
      return DOMPurify.sanitize(context);
    });
    /**
     * Register join helper
     *
     * Example :
     * var values = {a:v1, b:v2, c:v3};
     * Using {{{join attributes '=' ' ' '"'}}} will return : a="v1" b="v2" c="v3"
     * Using {{{join values null ' or ' '*'}}} will return : *v1* or *v2* or *v3*
     */

    hb.registerHelper('join', function (arr, keyValueGlue, fragmentGlue, wrapper) {
      var fragments = [];
      keyValueGlue = typeof keyValueGlue === 'string' ? keyValueGlue : undefined;
      fragmentGlue = typeof fragmentGlue === 'string' ? fragmentGlue : ' ';
      wrapper = typeof wrapper === 'string' ? wrapper : '"';

      _.forIn(arr, function (value, key) {
        var fragment = '';

        if (value !== null || value !== undefined) {
          if (typeof value === 'boolean') {
            value = value ? 'true' : 'false';
          } else if (_typeof(value) === 'object') {
            value = _.values(value).join(' ');
          }
        } else {
          value = '';
        }

        if (keyValueGlue !== undefined) {
          fragment += key + keyValueGlue;
        }

        fragment += wrapper + value + wrapper;
        fragments.push(fragment);
      });

      return fragments.join(fragmentGlue);
    }); //register a classic "for loop" helper
    //it also adds a local variable "i" as the index in each iteration loop

    hb.registerHelper('for', function (startIndex, stopIndex, increment, options) {
      var ret = '';
      startIndex = parseInt(startIndex);
      stopIndex = parseInt(stopIndex);
      increment = parseInt(increment);

      for (var i = startIndex; i < stopIndex; i += increment) {
        ret += options.fn(_.extend({}, this, {
          i: i
        }));
      }

      return ret;
    });
    hb.registerHelper('equal', function (var1, var2, options) {
      if (var1 == var2) {
        return options.fn(this);
      } else {
        return options.inverse(this);
      }
    }); // register a "get property" helper
    // it gets the named property from the provided context

    hb.registerHelper('property', function (name, context) {
      return context[name] || '';
    }); // register an 'includes' helper
    // it checks if value is in array

    hb.registerHelper('includes', function (haystack, needle, options) {
      if (_.contains(haystack, needle)) {
        return options.fn(this);
      }
    });
  }

  if (!Helpers0.__initialized) {
    Helpers0(Handlebars);
    Helpers0.__initialized = true;
  }
  var Template = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
    this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Handlebars.helpers);  


    return "<div class=\"dropdown-form\">\n    <div class=\"trigger-button\"></div>\n    <div class=\"form-panel\"></div>\n</div>\n";
    });
  function dropdownFormTpl(data, options, asString) {
    var html = Template(data, options);
    return (asString || true) ? html : $(html);
  }

  /**
   * This program is free software; you can redistribute it and/or
   * modify it under the terms of the GNU General Public License
   * as published by the Free Software Foundation; under version 2
   * of the License (non-upgradable).
   *
   * This program is distributed in the hope that it will be useful,
   * but WITHOUT ANY WARRANTY; without even the implied warranty of
   * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   * GNU General Public License for more details.
   *
   * You should have received a copy of the GNU General Public License
   * along with this program; if not, write to the Free Software
   * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
   *
   * Copyright (c) 2019 Open Assessment Technologies SA ;
   */
  /**
   * @typedef {Object} dropdownFormConfig Defines the config entries available to setup a dropdown form
   * @property {String} [triggerText] - The caption of the trigger button
   * @property {String} [triggerIcon] - The icon of the trigger button
   * @property {String} [submitText] - The caption of the submit button
   * @property {String} [submitIcon] - The icon of the submit button
   * @property {widgetConfig[]} [widgets] - The list of widgets to set in the form (default none)
   * @property {buttonConfig[]} [buttons] - The list of buttons to set in the form (default none)
   * @property {Object} [values] - Initial values for the widgets
   * @property {Object} [ranges] - An optional list of ranges for the widgets (@see widgetConfig.range)
   */

  /**
   * Some default config
   * @type {Object}
   */

  var defaults = {
    triggerIcon: null,
    triggerText: __('Form'),
    submitIcon: null,
    submitText: __('Submit')
  };
  /**
   * Builds a dropdown form component.
   *
   * @example
   *  const container = $('.my-container', $container);
   *
   *  const config = {
   *      title: 'My fancy form',
   *      triggerText: 'Comment',
   *      submitText: 'Publish',
   *      widgets: [{
   *          widget: widgetDefinitions.TEXTBOX
   *          uri: 'nickname',
   *          label: 'Name',
   *          required: true
   *      }, {
   *          widget: widgetDefinitions.TEXTAREA
   *          uri: 'comment',
   *          label: 'Comment',
   *          required: true
   *      }]
   *  };
   *
   *  const form = dropdownFormFactory(container, config)
   *      .on('submit', function(values) {
   *          // ...
   *      });
   *
   * @param {HTMLElement|String} container
   * @param {dropdownFormConfig} config
   * @param {String} [config.triggerText] - The caption of the trigger button
   * @param {String} [config.triggerIcon] - The icon of the trigger button
   * @param {String} [config.submitText] - The caption of the submit button
   * @param {String} [config.submitIcon] - The icon of the submit button
   * @param {widgetConfig[]} [config.widgets] - The list of widgets to set in the form (default none)
   * @param {buttonConfig[]} [config.buttons] - The list of buttons to set in the form (default none)
   * @param {Object} [config.values] - Initial values for the widgets
   * @param {Object} [config.ranges] - An optional list of ranges for the widgets (@see widgetConfig.range)
   * @returns {dropdownForm}
   * @fires ready - When the component is ready to work
   */

  function dropdownFormFactory(container, config) {
    var form = null;
    var button = null;
    var controls = null;
    var api = {
      /**
       * Gets access to the form
       * @returns {form}
       */
      getForm: function getForm() {
        return form;
      },

      /**
       * Update the form with a new list of widgets
       * @param {widgetConfig[]} widgets
       * @returns {Promise}
       * @throws {Error} if the form is not yet rendered
       */
      setFormWidgets: function setFormWidgets(widgets) {
        if (!this.is('rendered') || !form) {
          return Promise.reject(new Error('The form is not rendered'));
        }

        return form.setWidgets(widgets);
      },

      /**
       * Gets the values from the form widgets
       * @returns {Object}
       */
      getFormValues: function getFormValues() {
        if (this.is('rendered')) {
          return form.getValues();
        }

        return {};
      },

      /**
       * Sets the values to the form widgets
       * @param {Object} values
       * @returns {dropdownForm}
       */
      setFormValues: function setFormValues(values) {
        if (this.is('rendered')) {
          form.setValues(values);
        }

        return this;
      },

      /**
       * Opens the form attached to the dropdown
       * @returns {dropdownForm}
       * @fires open - When the form is open
       */
      openForm: function openForm() {
        this.setState('open', true); // the event is emitted only if the component is rendered.

        if (this.is('rendered')) {
          if (this.getContainer().width() < this.getElement().position().left + controls.$form.width()) {
            this.setState('open-on-left', false);
            this.setState('open-on-right', true);
          } else {
            this.setState('open-on-left', true);
            this.setState('open-on-right', false);
          }
          /**
           * @event open
           */


          this.trigger('open');
        }

        return this;
      },

      /**
       * Closes the form attached to the dropdown
       * @returns {dropdownForm}
       * @fires close - When the form is closed
       */
      closeForm: function closeForm() {
        this.setState('open', false);
        this.setState('open-on-left', false);
        this.setState('open-on-right', false); // the event is emitted only if the component is rendered.

        if (this.is('rendered')) {
          /**
           * @event open
           */
          this.trigger('close');
        }

        return this;
      }
    };
    var dropdownForm = componentFactory(api, defaults) // set the component's layout
    .setTemplate(dropdownFormTpl) // auto render on init
    .on('init', function onDropdownFormInit() {
      var _this = this;

      // auto render on init (defer the call to give a chance to the init event to be completed before)
      _.defer(function () {
        return _this.render(container);
      });
    }) // renders the component
    .on('render', function onDropdownFormRender() {
      var _this2 = this;

      var initConfig = this.getConfig();

      var formConfig = _.defaults({
        reset: false
      }, initConfig);

      var buttonConfig = {
        id: 'trigger',
        type: 'info',
        label: initConfig.triggerText,
        icon: initConfig.triggerIcon
      };
      controls = {
        $trigger: this.getElement().find('.trigger-button'),
        $form: this.getElement().find('.form-panel')
      }; // toggle the form when clicking the dropdown button

      button = buttonFactory(buttonConfig).on('click', function () {
        if (_this2.is('open')) {
          _this2.closeForm();
        } else {
          _this2.openForm();
        }
      }).render(controls.$trigger);
      /**
       * @event ready
       */

      form = formFactory(controls.$form, formConfig).spread(this, 'ready change submit invalid error');
    }).on('ready', function onDropdownFormReady() {
      // init state
      if (this.is('open')) {
        this.openForm();
      }
    }).on('submit', function onDropdownFormSubmit() {
      this.closeForm();
    }) // take care of the disable state
    .on('disable', function onDropdownFormDisable() {
      if (this.is('open')) {
        this.closeForm();
      }

      if (this.is('rendered')) {
        button.disable();
        form.disable();
      }
    }).on('enable', function onDropdownFormEnable() {
      if (this.is('rendered')) {
        button.enable();
        form.enable();
      }
    }) // cleanup the place
    .on('destroy', function onDropdownFormDestroy() {
      button.destroy();
      form.destroy();
      button = null;
      form = null;
      controls = null;
    }); // initialize the component with the provided config
    // defer the call to allow to listen to the init event

    _.defer(function () {
      return dropdownForm.init(config);
    });

    return dropdownForm;
  }

  return dropdownFormFactory;

});
