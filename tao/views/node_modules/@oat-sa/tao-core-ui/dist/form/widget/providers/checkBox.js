define(['jquery', 'lodash', 'i18n', 'handlebars', 'lib/dompurify/purify'], function ($$1, _, __, Handlebars, DOMPurify) { 'use strict';

  $$1 = $$1 && $$1.hasOwnProperty('default') ? $$1['default'] : $$1;
  _ = _ && _.hasOwnProperty('default') ? _['default'] : _;
  __ = __ && __.hasOwnProperty('default') ? __['default'] : __;
  Handlebars = Handlebars && Handlebars.hasOwnProperty('default') ? Handlebars['default'] : Handlebars;
  DOMPurify = DOMPurify && DOMPurify.hasOwnProperty('default') ? DOMPurify['default'] : DOMPurify;

  function _typeof(obj) {
    "@babel/helpers - typeof";

    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function Helpers0 (hb) {
    //register a i18n helper
    hb.registerHelper('__', function (key) {
      return __(key);
    });
    /**
     * Register dompurify helper
     *
     * https://github.com/cure53/DOMPurify
     * with config SAFE_FOR_TEMPLATES: true
     * to make output safe for template systems
     */

    hb.registerHelper('dompurify', function (context) {
      return DOMPurify.sanitize(context);
    });
    /**
     * Register join helper
     *
     * Example :
     * var values = {a:v1, b:v2, c:v3};
     * Using {{{join attributes '=' ' ' '"'}}} will return : a="v1" b="v2" c="v3"
     * Using {{{join values null ' or ' '*'}}} will return : *v1* or *v2* or *v3*
     */

    hb.registerHelper('join', function (arr, keyValueGlue, fragmentGlue, wrapper) {
      var fragments = [];
      keyValueGlue = typeof keyValueGlue === 'string' ? keyValueGlue : undefined;
      fragmentGlue = typeof fragmentGlue === 'string' ? fragmentGlue : ' ';
      wrapper = typeof wrapper === 'string' ? wrapper : '"';

      _.forIn(arr, function (value, key) {
        var fragment = '';

        if (value !== null || value !== undefined) {
          if (typeof value === 'boolean') {
            value = value ? 'true' : 'false';
          } else if (_typeof(value) === 'object') {
            value = _.values(value).join(' ');
          }
        } else {
          value = '';
        }

        if (keyValueGlue !== undefined) {
          fragment += key + keyValueGlue;
        }

        fragment += wrapper + value + wrapper;
        fragments.push(fragment);
      });

      return fragments.join(fragmentGlue);
    }); //register a classic "for loop" helper
    //it also adds a local variable "i" as the index in each iteration loop

    hb.registerHelper('for', function (startIndex, stopIndex, increment, options) {
      var ret = '';
      startIndex = parseInt(startIndex);
      stopIndex = parseInt(stopIndex);
      increment = parseInt(increment);

      for (var i = startIndex; i < stopIndex; i += increment) {
        ret += options.fn(_.extend({}, this, {
          i: i
        }));
      }

      return ret;
    });
    hb.registerHelper('equal', function (var1, var2, options) {
      if (var1 == var2) {
        return options.fn(this);
      } else {
        return options.inverse(this);
      }
    }); // register a "get property" helper
    // it gets the named property from the provided context

    hb.registerHelper('property', function (name, context) {
      return context[name] || '';
    }); // register an 'includes' helper
    // it checks if value is in array

    hb.registerHelper('includes', function (haystack, needle, options) {
      if (_.contains(haystack, needle)) {
        return options.fn(this);
      }
    });
  }

  if (!Helpers0.__initialized) {
    Helpers0(Handlebars);
    Helpers0.__initialized = true;
  }
  var Template = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
    this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Handlebars.helpers); partials = this.merge(partials, Handlebars.partials); data = data || {};
    var buffer = "", stack1, helper, functionType="function", escapeExpression=this.escapeExpression, self=this, helperMissing=helpers.helperMissing;

  function program1(depth0,data,depth1) {
    
    var buffer = "", stack1, helper, options;
    buffer += "\n            <div class=\"option\">\n                <label>\n                    <input\n                        class=\"widget-input-inline\"\n                        type=\"checkbox\"\n                        name=\""
      + escapeExpression(((stack1 = (depth0 && depth0.uri)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
      + "\"\n                        value=\""
      + escapeExpression(((stack1 = (depth0 && depth0.uri)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
      + "\"\n                        ";
    stack1 = (helper = helpers.includes || (depth1 && depth1.includes),options={hash:{},inverse:self.noop,fn:self.program(2, program2, data),data:data},helper ? helper.call(depth0, (depth1 && depth1.value), (depth0 && depth0.uri), options) : helperMissing.call(depth0, "includes", (depth1 && depth1.value), (depth0 && depth0.uri), options));
    if(stack1 || stack1 === 0) { buffer += stack1; }
    buffer += ">\n                    <span class=\"icon-checkbox\"></span>\n                    "
      + escapeExpression(((stack1 = (depth0 && depth0.label)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
      + "\n                </label>\n            </div>\n            ";
    return buffer;
    }
  function program2(depth0,data) {
    
    
    return "\n                        checked=\"true\"\n                        ";
    }

    buffer += "<div class=\"form-widget ";
    if (helper = helpers.widgetType) { stack1 = helper.call(depth0, {hash:{},data:data}); }
    else { helper = (depth0 && depth0.widgetType); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
    buffer += escapeExpression(stack1)
      + "\">\n    <div class=\"widget-label\">\n        ";
    stack1 = self.invokePartial(partials['ui-form-widget-label'], 'ui-form-widget-label', depth0, helpers, partials, data);
    if(stack1 || stack1 === 0) { buffer += stack1; }
    buffer += "\n    </div>\n    <div class=\"widget-field\">\n        <div class=\"check-box-input\">\n            ";
    stack1 = helpers.each.call(depth0, (depth0 && depth0.range), {hash:{},inverse:self.noop,fn:self.programWithDepth(1, program1, data, depth0),data:data});
    if(stack1 || stack1 === 0) { buffer += stack1; }
    buffer += "\n        </div>\n    </div>\n</div>\n";
    return buffer;
    });
  function checkBoxTpl(data, options, asString) {
    var html = Template(data, options);
    return (asString || true) ? html : $(html);
  }

  /**
   * This program is free software; you can redistribute it and/or
   * modify it under the terms of the GNU General Public License
   * as published by the Free Software Foundation; under version 2
   * of the License (non-upgradable).
   *
   * This program is distributed in the hope that it will be useful,
   * but WITHOUT ANY WARRANTY; without even the implied warranty of
   * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   * GNU General Public License for more details.
   *
   * You should have received a copy of the GNU General Public License
   * along with this program; if not, write to the Free Software
   * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
   *
   * Copyright (c) 2019 Open Assessment Technologies SA ;
   */
  /**
   * Defines the provider for a checkBox widget.
   *
   * @example
   * import widgetCheckBoxProvider from 'ui/form/widget/providers/checkBox';
   * widgetFactory.registerProvider('checkBox', widgetCheckBoxProvider);
   * const widget = widgetFactory(container, {
   *     widget: 'checkBox'
   *     uri: 'cb',
   *     label: 'All good?',
   *     range: [{
   *         uri: 'yes',
   *         label: 'Yes'
   *     }, {
   *         uri: 'no',
   *         label: 'No'
   *     }]
   * });
   */

  var widgetCheckBoxProvider = {
    /**
     * Initialize the widget.
     * @param {widgetConfig} config
     */
    init: function init(config) {
      // the type will be reflected to the HTML markup
      config.widgetType = 'check-box'; // the value must be an array

      if (config.value && !_.isArray(config.value)) {
        config.value = [config.value];
      } else {
        config.value = config.value || [];
      }
    },

    /**
     * Resets the widget to the default validators
     */
    setDefaultValidators: function setDefaultValidators() {
      // set default validator if the field is required
      if (this.getConfig().required) {
        this.getValidator().addValidation({
          id: 'required',
          message: __('This field is required'),
          predicate: function predicate(value) {
            return value.length > 0;
          },
          precedence: 1
        });
      }
    },

    /**
     * Gets the value of the widget, which will be either an empty array or a list of URI from the range
     * @returns {String[]}
     */
    getValue: function getValue() {
      var value = this.getConfig().value || [];

      if (this.is('rendered')) {
        value = [];
        this.getElement().find('.option input:checked').map(function mapElement() {
          value.push($$1(this).val());
        });
      }

      return value;
    },

    /**
     * Sets the value of the widget, which can be either an empty array or a list of URI from the range
     * @param {String[]} value
     */
    setValue: function setValue(value) {
      var _this = this;

      if (this.is('rendered')) {
        this.getWidgetElement().prop('checked', false);

        _.forEach(value, function (v) {
          _this.getElement().find("input[name=\"".concat(v, "\"]")).prop('checked', true);
        });
      }
    },

    /**
     * Resets the widget to its default value
     * @returns {widgetForm}
     */
    reset: function reset() {
      this.setValue([]);
      return this;
    },

    /**
     * Gets access to the actual form element
     * @returns {jQuery|null}
     */
    getWidgetElement: function getWidgetElement() {
      return this.getElement().find('.option input');
    },

    /**
     * Expose the template to the factory and it will apply it
     */
    template: checkBoxTpl
  };

  return widgetCheckBoxProvider;

});
