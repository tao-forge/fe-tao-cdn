define(['jquery', 'lodash', 'core/eventifier', 'handlebars', 'i18n', 'lib/dompurify/purify', 'css!ui/component/css/components.css'], function ($$1, _, eventifier, Handlebars, __, DOMPurify, components_css) { 'use strict';

  $$1 = $$1 && $$1.hasOwnProperty('default') ? $$1['default'] : $$1;
  _ = _ && _.hasOwnProperty('default') ? _['default'] : _;
  eventifier = eventifier && eventifier.hasOwnProperty('default') ? eventifier['default'] : eventifier;
  Handlebars = Handlebars && Handlebars.hasOwnProperty('default') ? Handlebars['default'] : Handlebars;
  __ = __ && __.hasOwnProperty('default') ? __['default'] : __;
  DOMPurify = DOMPurify && DOMPurify.hasOwnProperty('default') ? DOMPurify['default'] : DOMPurify;

  function _typeof(obj) {
    "@babel/helpers - typeof";

    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function Helpers0 (hb) {
    //register a i18n helper
    hb.registerHelper('__', function (key) {
      return __(key);
    });
    /**
     * Register dompurify helper
     *
     * https://github.com/cure53/DOMPurify
     * with config SAFE_FOR_TEMPLATES: true
     * to make output safe for template systems
     */

    hb.registerHelper('dompurify', function (context) {
      return DOMPurify.sanitize(context);
    });
    /**
     * Register join helper
     *
     * Example :
     * var values = {a:v1, b:v2, c:v3};
     * Using {{{join attributes '=' ' ' '"'}}} will return : a="v1" b="v2" c="v3"
     * Using {{{join values null ' or ' '*'}}} will return : *v1* or *v2* or *v3*
     */

    hb.registerHelper('join', function (arr, keyValueGlue, fragmentGlue, wrapper) {
      var fragments = [];
      keyValueGlue = typeof keyValueGlue === 'string' ? keyValueGlue : undefined;
      fragmentGlue = typeof fragmentGlue === 'string' ? fragmentGlue : ' ';
      wrapper = typeof wrapper === 'string' ? wrapper : '"';

      _.forIn(arr, function (value, key) {
        var fragment = '';

        if (value !== null || value !== undefined) {
          if (typeof value === 'boolean') {
            value = value ? 'true' : 'false';
          } else if (_typeof(value) === 'object') {
            value = _.values(value).join(' ');
          }
        } else {
          value = '';
        }

        if (keyValueGlue !== undefined) {
          fragment += key + keyValueGlue;
        }

        fragment += wrapper + value + wrapper;
        fragments.push(fragment);
      });

      return fragments.join(fragmentGlue);
    }); //register a classic "for loop" helper
    //it also adds a local variable "i" as the index in each iteration loop

    hb.registerHelper('for', function (startIndex, stopIndex, increment, options) {
      var ret = '';
      startIndex = parseInt(startIndex);
      stopIndex = parseInt(stopIndex);
      increment = parseInt(increment);

      for (var i = startIndex; i < stopIndex; i += increment) {
        ret += options.fn(_.extend({}, this, {
          i: i
        }));
      }

      return ret;
    });
    hb.registerHelper('equal', function (var1, var2, options) {
      if (var1 == var2) {
        return options.fn(this);
      } else {
        return options.inverse(this);
      }
    }); // register a "get property" helper
    // it gets the named property from the provided context

    hb.registerHelper('property', function (name, context) {
      return context[name] || '';
    }); // register an 'includes' helper
    // it checks if value is in array

    hb.registerHelper('includes', function (haystack, needle, options) {
      if (_.contains(haystack, needle)) {
        return options.fn(this);
      }
    });
  }

  if (!Helpers0.__initialized) {
    Helpers0(Handlebars);
    Helpers0.__initialized = true;
  }
  var Template = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
    this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Handlebars.helpers);  


    return "<div class=\"component\"></div>";
    });
  function defaultTpl(data, options, asString) {
    var html = Template(data, options);
    return (asString || true) ? html : $(html);
  }

  /**
   * This program is free software; you can redistribute it and/or
   * modify it under the terms of the GNU General Public License
   * as published by the Free Software Foundation; under version 2
   * of the License (non-upgradable).
   *
   * This program is distributed in the hope that it will be useful,
   * but WITHOUT ANY WARRANTY; without even the implied warranty of
   * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   * GNU General Public License for more details.
   *
   * You should have received a copy of the GNU General Public License
   * along with this program; if not, write to the Free Software
   * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
   *
   * Copyright (c) 2015 (original work) Open Assessment Technologies SA ;
   */
  var _slice = [].slice;
  /**
   * Handles the resize of the component regarding the config set
   */

  function delegatedResize() {
    var width = this.config.width;
    var height = this.config.height;
    var $container = this.getContainer();
    var $element = this.getElement();

    if ($container) {
      if ('auto' === width) {
        width = $container.width();
      }

      if ('auto' === height) {
        height = $container.height();
      }
    }

    if ($element) {
      if (_.isNumber(width)) {
        $element.css({
          width: "".concat(width, "px")
        });
      }

      if (_.isNumber(height)) {
        $element.css({
          height: "".concat(height, "px")
        });
      }
    }

    this._width = width;
    this._height = height;
  }
  /**
   * Builds a component from a base skeleton
   * @param {Object} [specs] - Some extra methods to assign to the component instance
   * @param {Object} [defaults] - Some default config entries
   * @returns {component}
   */


  function component(specs, defaults) {
    // the template is a private property
    var componentTpl = defaultTpl; //contains the states of the components

    var componentState = {}; //where the component is added

    var $container; // base skeleton

    /**
     * @typedef {Object} Component
     */

    var componentApi = {
      /**
       * Initializes the component
       * @param {Object} config
       * @param {jQuery|HTMLElement|String} [config.renderTo] - An optional container in which renders the component
       * @param {Boolean} [config.replace] - When the component is appended to its container, clears the place before
       * @param {Number|String} [config.width] - The width in pixels, or 'auto' to use the container's width
       * @param {Number|String} [config.height] - The height in pixels, or 'auto' to use the container's height
       * @returns {component}
       * @fires component#init
       */
      init: function init(config) {
        this.config = _(config || {}).omit(function (value) {
          return value === null || typeof value === 'undefined';
        }).defaults(defaults || {}).value();
        componentState = {};
        /**
         * Executes extra init tasks
         * @event component#init
         */

        this.trigger('init');

        if (this.config.renderTo) {
          $container = $$1(this.config.renderTo);
          this.render();
        }

        return this;
      },

      /**
       * Uninstalls the component
       * @returns {component}
       * @fires component#destroy
       */
      destroy: function destroy() {
        /**
         * Executes extra destroy tasks
         * @event component#destroy
         */
        this.trigger('destroy');

        if (this.$component) {
          this.$component.remove();
        }

        this.$component = null;
        componentState = {};
        return this;
      },

      /**
       * Renders the component
       * @param {jQuery|HTMLElement|String} [container] - where the component is rendered
       * @returns {component}
       * @fires component#render
       */
      render: function render(container) {
        if (container) {
          $container = $$1(container);
        }

        this.$component = $$1(componentTpl(this.config));

        if ($container) {
          if (this.config.replace) {
            $container.empty();
          }

          $container.append(this.$component);
        }

        this.setState('rendered', true);
        delegatedResize.call(this);
        /**
         * Executes extra render tasks
         * @event component#render
         * @param {jQuery} $component
         */

        this.trigger('render', this.$component);
        return this;
      },

      /**
       * Sets the component's size
       * @param {Number|String} width - The width in pixels, or 'auto' to use the container's width
       * @param {Number|String} height - The height in pixels, or 'auto' to use the container's height
       * @returns {component}
       * @fires component#setsize
       */
      setSize: function setSize(width, height) {
        this.config.width = width;
        this.config.height = height;

        if (this.is('rendered')) {
          delegatedResize.call(this);
        }
        /**
         * Executes extra resize tasks
         * @event component#setsize
         * @param {Number|String} width
         * @param {Number|String} height
         */


        this.trigger('setsize', width, height);
        return this;
      },

      /**
       * Get the component's size
       * @returns {Object}
       * @fires component#setsize
       */
      getSize: function getSize() {
        if (this.is('rendered')) {
          return {
            width: this._width || 0,
            height: this._height || 0
          };
        }
      },

      /**
       * Get the component rendered size
       * @param {Boolean} includeMargin - include the margins in the returned size
       * @returns {{width: number, height: number}}
       */
      getOuterSize: function getOuterSize(includeMargin) {
        var $component;

        if (this.is('rendered')) {
          $component = this.getElement();
          includeMargin = includeMargin || false;
          return {
            width: Math.round($component.outerWidth(includeMargin)),
            height: Math.round($component.outerHeight(includeMargin))
          };
        }
      },

      /**
       * Shows the component
       * @returns {component}
       * @fires component#show
       */
      show: function show() {
        /**
         * Executes extra tasks on show
         * @event component#show
         * @param {component} component
         */
        this.trigger('show', this);
        return this.setState('hidden', false);
      },

      /**
       * Hides the component
       * @returns {component}
       * @fires component#hide
       */
      hide: function hide() {
        /**
         * Executes extra tasks on hide
         * @event component#hide
         * @param {component} component
         */
        this.trigger('hide', this);
        return this.setState('hidden', true);
      },

      /**
       * Enables the component
       * @returns {component}
       * @fires component#enable
       */
      enable: function enable() {
        /**
         * Executes extra tasks on enable
         * @event component#enable
         * @param {component} component
         */
        this.trigger('enable', this);
        return this.setState('disabled', false);
      },

      /**
       * Disables the component
       * @returns {component}
       * @fires component#disable
       */
      disable: function disable() {
        /**
         * Executes extra tasks on disable
         * @event component#disable
         * @param {component} component
         */
        this.trigger('disable', this);
        return this.setState('disabled', true);
      },

      /**
       * Checks if the component has a particular state
       * @param {String} state
       * @returns {Boolean}
       */
      is: function is(state) {
        return !!componentState[state];
      },

      /**
       * Sets the component to a particular state
       * @param {String} state
       * @param {Boolean} flag
       * @returns {component}
       * @fires component#state
       */
      setState: function setState(state, flag) {
        flag = !!flag;
        componentState[state] = flag;

        if (this.$component) {
          this.$component.toggleClass(state, flag);
        }
        /**
         * Executes extra tasks on state change
         * @event component#state
         * @param {String} state
         * @param {Boolean} flag
         * @param {component} component
         */


        this.trigger('state', state, flag, this);
        return this;
      },

      /**
       * Gets the underlying DOM element
       * @returns {jQuery}
       */
      getContainer: function getContainer() {
        return $container;
      },

      /**
       * Gets the underlying DOM element
       * @returns {jQuery}
       */
      getElement: function getElement() {
        return this.$component;
      },

      /**
       * Gets the template used to render this component
       * @returns {Function}
       */
      getTemplate: function getTemplate() {
        return componentTpl;
      },

      /**
       * Sets the template used to render this component
       * @param {Function} template
       * @returns {componentApi}
       * @fires component#template
       */
      setTemplate: function setTemplate(template) {
        var tpl = template || defaultTpl;
        componentTpl = tpl; // ensure the template is defined as a function

        if (!_.isFunction(componentTpl)) {
          componentTpl = function componentTpl() {
            return tpl;
          };
        }
        /**
         * Executes extra tasks on template change
         * @event component#template
         * @param {function} componentTpl
         */


        this.trigger('template', componentTpl);
        return this;
      },

      /**
       * Get the component's configuration
       */
      getConfig: function getConfig() {
        return this.config || defaults || {};
      }
    }; // let's extend the instance with extra methods

    if (specs) {
      _(specs).functions().forEach(function (method) {
        componentApi[method] = function delegate() {
          return specs[method].apply(componentApi, _slice.call(arguments));
        };
      });
    }

    return eventifier(componentApi);
  }

  return component;

});
