define(['jquery', 'lodash', 'i18n', 'ui/report', 'ui/feedback', 'layout/loading-bar', 'handlebars', 'lib/dompurify/purify', 'css!ui/taskQueueButton/css/taskable.css'], function ($$1, _, __, reportFactory, feedback, loadingBar, Handlebars, DOMPurify, taskable_css) { 'use strict';

  $$1 = $$1 && $$1.hasOwnProperty('default') ? $$1['default'] : $$1;
  _ = _ && _.hasOwnProperty('default') ? _['default'] : _;
  __ = __ && __.hasOwnProperty('default') ? __['default'] : __;
  reportFactory = reportFactory && reportFactory.hasOwnProperty('default') ? reportFactory['default'] : reportFactory;
  feedback = feedback && feedback.hasOwnProperty('default') ? feedback['default'] : feedback;
  loadingBar = loadingBar && loadingBar.hasOwnProperty('default') ? loadingBar['default'] : loadingBar;
  Handlebars = Handlebars && Handlebars.hasOwnProperty('default') ? Handlebars['default'] : Handlebars;
  DOMPurify = DOMPurify && DOMPurify.hasOwnProperty('default') ? DOMPurify['default'] : DOMPurify;

  function _typeof(obj) {
    "@babel/helpers - typeof";

    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function Helpers0 (hb) {
    //register a i18n helper
    hb.registerHelper('__', function (key) {
      return __(key);
    });
    /**
     * Register dompurify helper
     *
     * https://github.com/cure53/DOMPurify
     * with config SAFE_FOR_TEMPLATES: true
     * to make output safe for template systems
     */

    hb.registerHelper('dompurify', function (context) {
      return DOMPurify.sanitize(context);
    });
    /**
     * Register join helper
     *
     * Example :
     * var values = {a:v1, b:v2, c:v3};
     * Using {{{join attributes '=' ' ' '"'}}} will return : a="v1" b="v2" c="v3"
     * Using {{{join values null ' or ' '*'}}} will return : *v1* or *v2* or *v3*
     */

    hb.registerHelper('join', function (arr, keyValueGlue, fragmentGlue, wrapper) {
      var fragments = [];
      keyValueGlue = typeof keyValueGlue === 'string' ? keyValueGlue : undefined;
      fragmentGlue = typeof fragmentGlue === 'string' ? fragmentGlue : ' ';
      wrapper = typeof wrapper === 'string' ? wrapper : '"';

      _.forIn(arr, function (value, key) {
        var fragment = '';

        if (value !== null || value !== undefined) {
          if (typeof value === 'boolean') {
            value = value ? 'true' : 'false';
          } else if (_typeof(value) === 'object') {
            value = _.values(value).join(' ');
          }
        } else {
          value = '';
        }

        if (keyValueGlue !== undefined) {
          fragment += key + keyValueGlue;
        }

        fragment += wrapper + value + wrapper;
        fragments.push(fragment);
      });

      return fragments.join(fragmentGlue);
    }); //register a classic "for loop" helper
    //it also adds a local variable "i" as the index in each iteration loop

    hb.registerHelper('for', function (startIndex, stopIndex, increment, options) {
      var ret = '';
      startIndex = parseInt(startIndex);
      stopIndex = parseInt(stopIndex);
      increment = parseInt(increment);

      for (var i = startIndex; i < stopIndex; i += increment) {
        ret += options.fn(_.extend({}, this, {
          i: i
        }));
      }

      return ret;
    });
    hb.registerHelper('equal', function (var1, var2, options) {
      if (var1 == var2) {
        return options.fn(this);
      } else {
        return options.inverse(this);
      }
    }); // register a "get property" helper
    // it gets the named property from the provided context

    hb.registerHelper('property', function (name, context) {
      return context[name] || '';
    }); // register an 'includes' helper
    // it checks if value is in array

    hb.registerHelper('includes', function (haystack, needle, options) {
      if (_.contains(haystack, needle)) {
        return options.fn(this);
      }
    });
  }

  if (!Helpers0.__initialized) {
    Helpers0(Handlebars);
    Helpers0.__initialized = true;
  }
  var Template = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
    this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
    var buffer = "", stack1, helper, functionType="function", escapeExpression=this.escapeExpression;


    buffer += "<div class=\"task-report-container\">\n    <div class=\"section-header flex-container-full\">\n        <h2>";
    if (helper = helpers.title) { stack1 = helper.call(depth0, {hash:{},data:data}); }
    else { helper = (depth0 && depth0.title); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
    buffer += escapeExpression(stack1)
      + "</h2>\n    </div>\n    <div class=\"main-container flex-container-full report\"></div>\n</div>";
    return buffer;
    });
  function reportTpl(data, options, asString) {
    var html = Template(data, options);
    return (asString || true) ? html : $(html);
  }

  /**
   * This program is free software; you can redistribute it and/or
   * modify it under the terms of the GNU General Public License
   * as published by the Free Software Foundation; under version 2
   * of the License (non-upgradable).
   *
   * This program is distributed in the hope that it will be useful,
   * but WITHOUT ANY WARRANTY; without even the implied warranty of
   * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   * GNU General Public License for more details.
   *
   * You should have received a copy of the GNU General Public License
   * along with this program; if not, write to the Free Software
   * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
   *
   * Copyright (c) 2017 (original work) Open Assessment Technologies SA;
   */
  var defaultConfig = {};
  var taskableComponent = {
    /**
     * Set configuration for task creation
     * @param config
     * @returns {taskableComponent}
     */
    setTaskConfig: function setTaskConfig(config) {
      _.assign(this.config, config);

      return this;
    },

    /**
     * Create a task
     * @param requestUrl
     * @param requestData
     */
    createTask: function createTask() {
      var self = this;
      var taskQueue,
          requestUrl,
          requestData = {}; //prepare the request parameter if applicable

      if (_.isFunction(this.config.taskCreationData)) {
        requestData = this.config.taskCreationData.call(this);
      } else if (_.isPlainObject(this.config.taskCreationData)) {
        requestData = this.config.taskCreationData;
      }

      if (!this.config.taskCreationUrl) {
        return this.trigger('error', 'the request url is required to create a task');
      }

      requestUrl = this.config.taskCreationUrl;

      if (!this.config.taskQueue) {
        return this.trigger('error', 'the taskQueue model is required to create a task');
      }

      taskQueue = this.config.taskQueue;
      loadingBar.start();
      taskQueue.pollAllStop();
      taskQueue.create(requestUrl, requestData).then(function (result) {
        var infoBox,
            message,
            task = result.task;

        if (result.finished) {
          if (task.hasFile) {
            //download if its is a export-typed task
            taskQueue.download(task.id).then(function () {
              //immediately archive the finished task as there is no need to display this task in the queue list
              return taskQueue.archive(task.id);
            }).then(function () {
              self.trigger('finished', result);
              taskQueue.pollAll();
            }).catch(function (err) {
              self.trigger('error', err);
              taskQueue.pollAll();
            });
          } else {
            //immediately archive the finished task as there is no need to display this task in the queue list
            taskQueue.archive(task.id).then(function () {
              self.trigger('finished', result);
              taskQueue.pollAll();
            }).catch(function (err) {
              self.trigger('error', err);
              taskQueue.pollAll();
            });
          }
        } else {
          //enqueuing process:
          message = __('<strong> %s </strong> has been moved to the background.', task.taskLabel);
          infoBox = feedback(null, {
            encodeHtml: false,
            timeout: {
              info: 8000
            }
          }).info(message);
          taskQueue.trigger('taskcreated', {
            task: task,
            sourceDom: infoBox.getElement()
          });
          self.trigger('enqueued', result);
        }

        loadingBar.stop();
      }).catch(function (err) {
        //in case of error display it and continue task queue activity
        taskQueue.pollAll();
        loadingBar.stop();
        self.trigger('error', err);
      });
    },

    /**
     * prepare the given container to display the final report
     * @param {Object} report - the standard report object
     * @param {String} title - the report title
     * @param {String} result - raw result data from the task creation action
     */
    displayReport: function displayReport(report, title, result) {
      var self = this,
          $reportContainer;

      if (this.config.taskReportContainer instanceof $$1) {
        $reportContainer = $$1(reportTpl({
          title: title
        }));
        this.config.taskReportContainer.html($reportContainer);
        return reportFactory({
          actions: [{
            id: 'continue',
            icon: 'right',
            title: 'continue',
            label: __('Continue')
          }]
        }, report).on('action-continue', function () {
          self.trigger('continue', result);
        }).render($reportContainer.find('.report'));
      }
    }
  };
  /**
   * @param {Component} component - an instance of ui/component
   * @param {Object} config - task queue creation specific config
   * @param {Object} config.taskQueue - the task queue model to be used
   * @param {String} config.taskCreationUrl - endpoint to create a task
   * @param {Object|Function} [config.taskCreationData] - the parameters that will be send to the task creation request
   * @param {JQuery} [config.taskReportContainer] - the container where the inline report can be printed to
   * @return {taskableComponent}
   */

  function makeTaskable(component, config) {
    _.assign(component, taskableComponent);
    /**
     * @typedef {ui/component} taskableComponent
     */


    return component.off('.taskable').on('init.taskable', function () {
      _.defaults(this.config, config || {}, defaultConfig);
    });
  }

  return makeTaskable;

});
