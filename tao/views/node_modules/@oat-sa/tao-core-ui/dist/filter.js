define(['jquery', 'lodash', 'i18n', 'core/eventifier', 'handlebars', 'lib/dompurify/purify', 'ui/selecter'], function ($$1, _, __, eventifier, Handlebars, DOMPurify, selecter) { 'use strict';

  $$1 = $$1 && $$1.hasOwnProperty('default') ? $$1['default'] : $$1;
  _ = _ && _.hasOwnProperty('default') ? _['default'] : _;
  __ = __ && __.hasOwnProperty('default') ? __['default'] : __;
  eventifier = eventifier && eventifier.hasOwnProperty('default') ? eventifier['default'] : eventifier;
  Handlebars = Handlebars && Handlebars.hasOwnProperty('default') ? Handlebars['default'] : Handlebars;
  DOMPurify = DOMPurify && DOMPurify.hasOwnProperty('default') ? DOMPurify['default'] : DOMPurify;

  function _typeof(obj) {
    "@babel/helpers - typeof";

    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function Helpers0 (hb) {
    //register a i18n helper
    hb.registerHelper('__', function (key) {
      return __(key);
    });
    /**
     * Register dompurify helper
     *
     * https://github.com/cure53/DOMPurify
     * with config SAFE_FOR_TEMPLATES: true
     * to make output safe for template systems
     */

    hb.registerHelper('dompurify', function (context) {
      return DOMPurify.sanitize(context);
    });
    /**
     * Register join helper
     *
     * Example :
     * var values = {a:v1, b:v2, c:v3};
     * Using {{{join attributes '=' ' ' '"'}}} will return : a="v1" b="v2" c="v3"
     * Using {{{join values null ' or ' '*'}}} will return : *v1* or *v2* or *v3*
     */

    hb.registerHelper('join', function (arr, keyValueGlue, fragmentGlue, wrapper) {
      var fragments = [];
      keyValueGlue = typeof keyValueGlue === 'string' ? keyValueGlue : undefined;
      fragmentGlue = typeof fragmentGlue === 'string' ? fragmentGlue : ' ';
      wrapper = typeof wrapper === 'string' ? wrapper : '"';

      _.forIn(arr, function (value, key) {
        var fragment = '';

        if (value !== null || value !== undefined) {
          if (typeof value === 'boolean') {
            value = value ? 'true' : 'false';
          } else if (_typeof(value) === 'object') {
            value = _.values(value).join(' ');
          }
        } else {
          value = '';
        }

        if (keyValueGlue !== undefined) {
          fragment += key + keyValueGlue;
        }

        fragment += wrapper + value + wrapper;
        fragments.push(fragment);
      });

      return fragments.join(fragmentGlue);
    }); //register a classic "for loop" helper
    //it also adds a local variable "i" as the index in each iteration loop

    hb.registerHelper('for', function (startIndex, stopIndex, increment, options) {
      var ret = '';
      startIndex = parseInt(startIndex);
      stopIndex = parseInt(stopIndex);
      increment = parseInt(increment);

      for (var i = startIndex; i < stopIndex; i += increment) {
        ret += options.fn(_.extend({}, this, {
          i: i
        }));
      }

      return ret;
    });
    hb.registerHelper('equal', function (var1, var2, options) {
      if (var1 == var2) {
        return options.fn(this);
      } else {
        return options.inverse(this);
      }
    }); // register a "get property" helper
    // it gets the named property from the provided context

    hb.registerHelper('property', function (name, context) {
      return context[name] || '';
    }); // register an 'includes' helper
    // it checks if value is in array

    hb.registerHelper('includes', function (haystack, needle, options) {
      if (_.contains(haystack, needle)) {
        return options.fn(this);
      }
    });
  }

  if (!Helpers0.__initialized) {
    Helpers0(Handlebars);
    Helpers0.__initialized = true;
  }
  var Template = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
    this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
    var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    var buffer = "", stack1, helper;
    buffer += "\n    <label class=\"form_desc\">";
    if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }
    else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
    buffer += escapeExpression(stack1)
      + "</label>\n    ";
    return buffer;
    }

    buffer += "<div>\n    ";
    stack1 = helpers['if'].call(depth0, (depth0 && depth0.label), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
    if(stack1 || stack1 === 0) { buffer += stack1; }
    buffer += "\n    <div class=\"item-filter\"></div>\n</div>";
    return buffer;
    });
  function filterTpl(data, options, asString) {
    var html = Template(data, options);
    return (asString || true) ? html : $(html);
  }

  /**
   * Copyright (c) 2016 Open Assessment Technologies, S.A.
   *
   * @author Bertrand Chevrier <bertrand@taotesting.com>
   * @author Alexander Zagovorichev <zagovorichev@1pt.com>
   * @author Ivan Klimchuk <klimchuk@1pt.com>
   * @author Mikhail Kamarouski <kamarouski@1pt.com>
   */
  var defaults = {
    placeholder: __('Filter by value'),
    width: 300,
    minimumResultsForSearch: 10,
    minimumInputLength: 3,
    enable: true,
    quietMillis: 2000,
    label: false
  };
  /**
   * Creates a item filter component
   *
   * @param {Object[]} items - the list of items
   * @param {Object} [options] - configuration options
   * @param {String} [options.placeholder] - the filter placeholder
   * @param {Number} [options.width] - the select width
   * @param {Function} [options.formatter] - function for formatting result lines
   * @returns {itemFilter} the component
   */

  function itemFilterFactory($container, options) {
    var selected = {
      uri: '',
      code: '',
      name: ''
    };
    options = _.defaults(options || {}, defaults);
    /**
     * The item filter component
     * @typedef {Object} itemFilter
     */

    return eventifier({
      /**
       * Render the component into a container
       * @returns {itemFilter} chains
       * @fires itemFilter#change
       */
      render: function render(format) {
        var self = this;
        var $component = $$1(filterTpl(options));
        var $list = $$1('.item-filter', $component);
        $list.select2({
          placeholder: options.placeholder,
          allowClear: true,
          width: options.width,
          minimumResultsForSearch: options.minimumResultsForSearch,
          minimumInputLength: options.minimumInputLength,
          maximumInputLength: 200,
          formatResult: _.isFunction(options.formatter) ? options.formatter : function (data) {
            return _.template(format)(data);
          },
          ajax: {
            quietMillis: options.quietMillis,
            data: function data(term, page) {
              return {
                q: term,
                // search term
                page: page
              };
            },
            transport: function transport(params) {
              self.trigger('request', params);
            },
            results: function results(data, page) {
              var more = page * 25 < data.total;
              return {
                results: data.items,
                more: more
              };
            },
            cache: true
          }
        });
        $list.select2('enable', options.enable);
        $list.on('change.select2', function () {
          selected = $list.select2('data');
          self.trigger('change', selected && selected.uri ? selected.uri : '');
        });
        $container.append($component);
        return this;
      },
      enable: function enable() {
        $$1('.item-filter', $container).select2('enable', true);
      },
      disable: function disable() {
        $$1('.item-filter', $container).select2('enable', false);
      },
      getSelected: function getSelected() {
        return selected;
      },
      reset: function reset() {
        var $list = $$1('.item-filter', $container);
        $list.select2('val', '');
      },

      /**
       * Leave the place as clean as before
       * @returns {selector} for chaining
       * @fires selector#destroy
       */
      destroy: function destroy() {
        var $list = $$1('.item-filter', $container);
        $list.select2('destroy');
        $list.remove();
        /**
         * The selector is destroyed
         * @event selector#destroy
         */

        this.trigger('destroy');
        return this;
      }
    });
  }

  return itemFilterFactory;

});
