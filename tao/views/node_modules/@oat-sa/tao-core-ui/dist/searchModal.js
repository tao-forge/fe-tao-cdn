define(['jquery', 'lodash', 'i18n', 'context', 'handlebars', 'lib/dompurify/purify', 'css!ui/searchModal/css/searchModal.css', 'ui/component', 'ui/modal', 'ui/datatable', 'core/store'], function ($$1, _, __, context, Handlebars, DOMPurify, searchModal_css, component, modal, datatable, store) { 'use strict';

  $$1 = $$1 && $$1.hasOwnProperty('default') ? $$1['default'] : $$1;
  _ = _ && _.hasOwnProperty('default') ? _['default'] : _;
  __ = __ && __.hasOwnProperty('default') ? __['default'] : __;
  context = context && context.hasOwnProperty('default') ? context['default'] : context;
  Handlebars = Handlebars && Handlebars.hasOwnProperty('default') ? Handlebars['default'] : Handlebars;
  DOMPurify = DOMPurify && DOMPurify.hasOwnProperty('default') ? DOMPurify['default'] : DOMPurify;
  component = component && component.hasOwnProperty('default') ? component['default'] : component;
  store = store && store.hasOwnProperty('default') ? store['default'] : store;

  function _typeof(obj) {
    "@babel/helpers - typeof";

    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function Helpers0 (hb) {
    //register a i18n helper
    hb.registerHelper('__', function (key) {
      return __(key);
    });
    /**
     * Register dompurify helper
     *
     * https://github.com/cure53/DOMPurify
     * with config SAFE_FOR_TEMPLATES: true
     * to make output safe for template systems
     */

    hb.registerHelper('dompurify', function (context) {
      return DOMPurify.sanitize(context);
    });
    /**
     * Register join helper
     *
     * Example :
     * var values = {a:v1, b:v2, c:v3};
     * Using {{{join attributes '=' ' ' '"'}}} will return : a="v1" b="v2" c="v3"
     * Using {{{join values null ' or ' '*'}}} will return : *v1* or *v2* or *v3*
     */

    hb.registerHelper('join', function (arr, keyValueGlue, fragmentGlue, wrapper) {
      var fragments = [];
      keyValueGlue = typeof keyValueGlue === 'string' ? keyValueGlue : undefined;
      fragmentGlue = typeof fragmentGlue === 'string' ? fragmentGlue : ' ';
      wrapper = typeof wrapper === 'string' ? wrapper : '"';

      _.forIn(arr, function (value, key) {
        var fragment = '';

        if (value !== null || value !== undefined) {
          if (typeof value === 'boolean') {
            value = value ? 'true' : 'false';
          } else if (_typeof(value) === 'object') {
            value = _.values(value).join(' ');
          }
        } else {
          value = '';
        }

        if (keyValueGlue !== undefined) {
          fragment += key + keyValueGlue;
        }

        fragment += wrapper + value + wrapper;
        fragments.push(fragment);
      });

      return fragments.join(fragmentGlue);
    }); //register a classic "for loop" helper
    //it also adds a local variable "i" as the index in each iteration loop

    hb.registerHelper('for', function (startIndex, stopIndex, increment, options) {
      var ret = '';
      startIndex = parseInt(startIndex);
      stopIndex = parseInt(stopIndex);
      increment = parseInt(increment);

      for (var i = startIndex; i < stopIndex; i += increment) {
        ret += options.fn(_.extend({}, this, {
          i: i
        }));
      }

      return ret;
    });
    hb.registerHelper('equal', function (var1, var2, options) {
      if (var1 == var2) {
        return options.fn(this);
      } else {
        return options.inverse(this);
      }
    }); // register a "get property" helper
    // it gets the named property from the provided context

    hb.registerHelper('property', function (name, context) {
      return context[name] || '';
    }); // register an 'includes' helper
    // it checks if value is in array

    hb.registerHelper('includes', function (haystack, needle, options) {
      if (_.contains(haystack, needle)) {
        return options.fn(this);
      }
    });
  }

  if (!Helpers0.__initialized) {
    Helpers0(Handlebars);
    Helpers0.__initialized = true;
  }
  var Template = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
    this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
    var buffer = "", helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;


    buffer += "<div class=\"search-modal section-container\">\n    <div class=\"clear content-wrapper content-panel\">\n        <div class=\"navi-container\">\n            <div class=\"search-bar-container\">\n                <span class=\"icon-find\"></span>\n                <input type=\"text\" placeholder=\""
      + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Search Item", options) : helperMissing.call(depth0, "__", "Search Item", options)))
      + "\">\n            </div>\n            <div class=\"buttons-container\">\n                <button class=\"btn-clear btn-transparent small\">"
      + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Clear", options) : helperMissing.call(depth0, "__", "Clear", options)))
      + "</button>\n                <button class=\"btn-search btn-info small\">"
      + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Search", options) : helperMissing.call(depth0, "__", "Search", options)))
      + "</button>\n            </div>\n        </div>\n        <div class=\"content-container\" style=\"padding:40px 20px\">\n        </div>\n    </div>\n</div>";
    return buffer;
    });
  function layoutTpl(data, options, asString) {
    var html = Template(data, options);
    return (asString || true) ? html : $(html);
  }

  if (!Helpers0.__initialized) {
    Helpers0(Handlebars);
    Helpers0.__initialized = true;
  }
  var Template$1 = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
    this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
    var buffer = "", stack1, helper, functionType="function", escapeExpression=this.escapeExpression;


    buffer += "<div class='no-datatable-container'>\n    <span class=\"no-datatable-icon ";
    if (helper = helpers.icon) { stack1 = helper.call(depth0, {hash:{},data:data}); }
    else { helper = (depth0 && depth0.icon); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
    buffer += escapeExpression(stack1)
      + "\"></span>\n    <p class=\"no-datatable-message\">";
    if (helper = helpers.message) { stack1 = helper.call(depth0, {hash:{},data:data}); }
    else { helper = (depth0 && depth0.message); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
    buffer += escapeExpression(stack1)
      + "</p>\n</div>";
    return buffer;
    });
  function infoMessageTpl(data, options, asString) {
    var html = Template$1(data, options);
    return (asString || true) ? html : $(html);
  }

  /**
   * This program is free software; you can redistribute it and/or
   * modify it under the terms of the GNU General Public License
   * as published by the Free Software Foundation; under version 2
   * of the License (non-upgradable).
   *
   * This program is distributed in the hope that it will be useful,
   * but WITHOUT ANY WARRANTY; without even the implied warranty of
   * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   * GNU General Public License for more details.
   *
   * You should have received a copy of the GNU General Public License
   * along with this program; if not, write to the Free Software
   * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
   *
   * Copyright (c) 2020 (original work) Open Assessment Technologies SA ;
   */
  /**
   * Creates a searchModal instance
   *
   * @param {object} config
   * @param {object} config.renderTo - DOM element where component will be rendered to
   * @param {string} config.query - search query to be set on component creation
   * @param {boolean} config.searchOnInit - if init search must be triggered or not (stored results are used instead)
   * @param {string} config.url - search endpoint to be set on datatable
   * @returns {searchModal}
   */

  function searchModalFactory(config) {
    var defaults = {
      renderTo: 'body',
      query: '',
      searchOnInit: true
    }; // Private properties to be easily accessible by instance methods

    var searchInput = null;
    var searchButton = null;
    var clearButton = null;
    var running = false;
    var searchStore = null;
    /**
     * Creates search modal, inits template selectors, inits search store, and once is created triggers initial search
     */

    function renderModal() {
      initModal();
      initUiSelectors();
      initSearchStore().then(function () {
        instance.trigger('ready');
        searchButton.trigger('click');
      }).catch(function (e) {
        return instance.trigger('error', e);
      });
    }
    /**
     * Removes search modal
     */


    function destroyModal() {
      instance.getElement().removeClass('modal').modal('destroy');
      $$1('.modal-bg').remove();
    } // Creates new component


    var instance = component({}, defaults).setTemplate(layoutTpl).on('render', renderModal).on('destroy', destroyModal);
    /**
     * Creates search modal
     */

    function initModal() {
      instance.getElement().addClass('modal').on('closed.modal', function () {
        instance.destroy();
      }).modal({
        disableEscape: true,
        width: $$1(window).width(),
        minHeight: $$1(window).height(),
        modalCloseClass: 'modal-close-left'
      }).focus();
    }
    /**
     * Inits template selectors and sets initial search query on search input
     */


    function initUiSelectors() {
      searchButton = $$1('.btn-search', instance.getElement());
      clearButton = $$1('.btn-clear', instance.getElement());
      searchInput = $$1('.search-bar-container input', instance.getElement());
      searchButton.on('click', search);
      clearButton.on('click', clear);
      searchInput.val(config.query);
    }
    /**
     * Loads search store so it is accessible in the component
     * @returns {Promise}
     */


    function initSearchStore() {
      return store('search').then(function (store) {
        searchStore = store;
      }).catch(function (e) {
        return instance.trigger('error', e);
      });
    }
    /**
     * Request search results and manages its results
     */


    function search() {
      var query = searchInput.val(); // if query is empty just clear datatable

      if (query === '') {
        clear();
        return;
      } //throttle and control to prevent sending too many requests


      var searchHandler = _.throttle(function (query) {
        if (running === false) {
          running = true;
          $$1.ajax({
            url: config.url,
            type: 'POST',
            data: {
              query: query
            },
            dataType: 'json'
          }).done(function (data) {
            appendDefaultDatasetToDatatable(data).then(function () {
              return buildSearchResultsDatatable(data);
            }).catch(function (e) {
              return instance.trigger('error', e);
            });
          }).always(function () {
            running = false;
          });
        }
      }, 100);

      searchHandler(query);
    }
    /**
     * If search on init is not required, extends data with stored dataset
     * @param {object} data - search configuration including model and endpoint for datatable
     * @returns {Promise}
     */


    function appendDefaultDatasetToDatatable(data) {
      return new Promise(function (resolve, reject) {
        // If no search on init, get dataset from searchStore
        if (config.searchOnInit === false) {
          searchStore.getItem('results').then(function (storedSearchResults) {
            config.searchOnInit = true;
            data.storedSearchResults = storedSearchResults;
            resolve();
          }).catch(function (e) {
            instance.trigger('error', e);
            reject(new Error('Error appending default dataset from searchStore to datatable'));
          });
        } else {
          resolve();
        }
      });
    }
    /**
     * Creates a datatable with search results
     * @param {object} data - search configuration including model and endpoint for datatable
     */


    function buildSearchResultsDatatable(data) {
      //update the section container
      var $tableContainer = $$1('<div class="flex-container-full"></div>');
      var section = $$1('.content-container', instance.getElement());
      section.empty();
      section.append($tableContainer);
      $tableContainer.on('load.datatable', searchResultsLoaded); //create datatable

      $tableContainer.datatable({
        url: data.url,
        model: _.values(data.model),
        labels: {
          actions: ''
        },
        actions: [{
          id: 'go-to-item',
          label: __('Go to item'),
          action: function openResource(uri) {
            instance.trigger('refresh', uri);
            instance.destroy();
          }
        }],
        params: {
          params: data.params,
          filters: data.filters,
          rows: 20
        }
      }, data.storedSearchResults);
    }
    /**
     * Triggered on load.datatable event, it updates searchStore and manages possible exceptions
     * @param {object} e - load.datatable event
     * @param {object} dataset - datatable dataset
     */


    function searchResultsLoaded(e, dataset) {
      if (dataset.records === 0) {
        replaceSearchResultsDatatableWithMessage('no-matches');
      }

      instance.trigger("datatable-loaded");
      updateSearchStore({
        action: 'update',
        dataset: dataset,
        context: context.shownStructure,
        query: searchInput.val()
      });
    }
    /**
     * Updates searchStore. If action is 'clear', searchStore is claread. If not, received
     * data is assigned to searchStore. Once all actions have been done,
     * store-updated event is triggered
     * @param {object} data - data to store
     */


    function updateSearchStore(data) {
      var promises = [];

      if (data.action === 'clear') {
        promises.push(searchStore.clear());
      } else if (data.action === 'update') {
        promises.push(searchStore.setItem('query', data.query));
        promises.push(searchStore.setItem('context', data.context));
        promises.push(data.dataset.records === 0 ? searchStore.removeItem('results') : searchStore.setItem('results', data.dataset));
      }

      Promise.all(promises).then(function () {
        return instance.trigger("store-updated");
      }).catch(function (e) {
        return instance.trigger('error', e);
      });
    }
    /**
     * Clear search input and search results from both, view and store
     */


    function clear() {
      searchInput.val('');
      replaceSearchResultsDatatableWithMessage('no-query');
      updateSearchStore({
        action: 'clear'
      });
    }
    /**
     * Removes datatable container and displays a message instead
     * @param {string} reason - reason why datatable is not rendered, to display appropiate message
     */


    function replaceSearchResultsDatatableWithMessage(reason) {
      var section = $$1('.content-container', instance.getElement());
      section.empty();
      var message = '';
      var icon = '';

      if (reason === 'no-query') {
        message = __('Please define your search in the search panel.');
        icon = 'icon-find';
      } else if (reason === 'no-matches') {
        message = __('No item found. Please try other search criteria.');
        icon = 'icon-info';
      }

      var infoMessage = infoMessageTpl({
        message: message,
        icon: icon
      });
      section.append(infoMessage);
    } // return initialized instance of searchModal


    return instance.init(config);
  }

  return searchModalFactory;

});
