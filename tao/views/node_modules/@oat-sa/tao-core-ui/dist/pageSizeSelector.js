define(['jquery', 'lodash', 'i18n', 'ui/component', 'handlebars', 'lib/dompurify/purify', 'select2'], function ($$1, _, __, component, Handlebars, DOMPurify, select2) { 'use strict';

  $$1 = $$1 && $$1.hasOwnProperty('default') ? $$1['default'] : $$1;
  _ = _ && _.hasOwnProperty('default') ? _['default'] : _;
  __ = __ && __.hasOwnProperty('default') ? __['default'] : __;
  component = component && component.hasOwnProperty('default') ? component['default'] : component;
  Handlebars = Handlebars && Handlebars.hasOwnProperty('default') ? Handlebars['default'] : Handlebars;
  DOMPurify = DOMPurify && DOMPurify.hasOwnProperty('default') ? DOMPurify['default'] : DOMPurify;

  function _typeof(obj) {
    "@babel/helpers - typeof";

    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function Helpers0 (hb) {
    //register a i18n helper
    hb.registerHelper('__', function (key) {
      return __(key);
    });
    /**
     * Register dompurify helper
     *
     * https://github.com/cure53/DOMPurify
     * with config SAFE_FOR_TEMPLATES: true
     * to make output safe for template systems
     */

    hb.registerHelper('dompurify', function (context) {
      return DOMPurify.sanitize(context);
    });
    /**
     * Register join helper
     *
     * Example :
     * var values = {a:v1, b:v2, c:v3};
     * Using {{{join attributes '=' ' ' '"'}}} will return : a="v1" b="v2" c="v3"
     * Using {{{join values null ' or ' '*'}}} will return : *v1* or *v2* or *v3*
     */

    hb.registerHelper('join', function (arr, keyValueGlue, fragmentGlue, wrapper) {
      var fragments = [];
      keyValueGlue = typeof keyValueGlue === 'string' ? keyValueGlue : undefined;
      fragmentGlue = typeof fragmentGlue === 'string' ? fragmentGlue : ' ';
      wrapper = typeof wrapper === 'string' ? wrapper : '"';

      _.forIn(arr, function (value, key) {
        var fragment = '';

        if (value !== null || value !== undefined) {
          if (typeof value === 'boolean') {
            value = value ? 'true' : 'false';
          } else if (_typeof(value) === 'object') {
            value = _.values(value).join(' ');
          }
        } else {
          value = '';
        }

        if (keyValueGlue !== undefined) {
          fragment += key + keyValueGlue;
        }

        fragment += wrapper + value + wrapper;
        fragments.push(fragment);
      });

      return fragments.join(fragmentGlue);
    }); //register a classic "for loop" helper
    //it also adds a local variable "i" as the index in each iteration loop

    hb.registerHelper('for', function (startIndex, stopIndex, increment, options) {
      var ret = '';
      startIndex = parseInt(startIndex);
      stopIndex = parseInt(stopIndex);
      increment = parseInt(increment);

      for (var i = startIndex; i < stopIndex; i += increment) {
        ret += options.fn(_.extend({}, this, {
          i: i
        }));
      }

      return ret;
    });
    hb.registerHelper('equal', function (var1, var2, options) {
      if (var1 == var2) {
        return options.fn(this);
      } else {
        return options.inverse(this);
      }
    }); // register a "get property" helper
    // it gets the named property from the provided context

    hb.registerHelper('property', function (name, context) {
      return context[name] || '';
    }); // register an 'includes' helper
    // it checks if value is in array

    hb.registerHelper('includes', function (haystack, needle, options) {
      if (_.contains(haystack, needle)) {
        return options.fn(this);
      }
    });
  }

  if (!Helpers0.__initialized) {
    Helpers0(Handlebars);
    Helpers0.__initialized = true;
  }
  var Template = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
    this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
    var buffer = "", stack1, self=this, functionType="function", escapeExpression=this.escapeExpression;

  function program1(depth0,data) {
    
    var buffer = "", stack1, helper;
    buffer += "\n        <option ";
    stack1 = helpers['if'].call(depth0, (depth0 && depth0.selected), {hash:{},inverse:self.noop,fn:self.program(2, program2, data),data:data});
    if(stack1 || stack1 === 0) { buffer += stack1; }
    buffer += " value=\"";
    if (helper = helpers.value) { stack1 = helper.call(depth0, {hash:{},data:data}); }
    else { helper = (depth0 && depth0.value); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
    buffer += escapeExpression(stack1)
      + "\">\n            ";
    if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }
    else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
    buffer += escapeExpression(stack1)
      + "\n        </option>\n        ";
    return buffer;
    }
  function program2(depth0,data) {
    
    
    return "selected";
    }

    buffer += "<div class=\"page-size-selector-container\">\n    <select class=\"select2\">\n        ";
    stack1 = helpers.each.call(depth0, (depth0 && depth0.options), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
    if(stack1 || stack1 === 0) { buffer += stack1; }
    buffer += "\n    </select>\n</div>\n";
    return buffer;
    });
  function pageSizeSelectorTpl(data, options, asString) {
    var html = Template(data, options);
    return (asString || true) ? html : $(html);
  }

  /**
   * This program is free software; you can redistribute it and/or
   * modify it under the terms of the GNU General Public License
   * as published by the Free Software Foundation; under version 2
   * of the License (non-upgradable).
   *
   * This program is distributed in the hope that it will be useful,
   * but WITHOUT ANY WARRANTY; without even the implied warranty of
   * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   * GNU General Public License for more details.
   *
   * You should have received a copy of the GNU General Public License
   * along with this program; if not, write to the Free Software
   * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
   *
   * Copyright (c) 2019 (original work) Open Assessment Technologies SA ;
   */
  /**
   * Default config values
   * @type {Object}
   */

  var defaults = {
    defaultSize: 25,
    options: [{
      label: '25 ' + __('items per page'),
      value: 25
    }, {
      label: '50 ' + __('items per page'),
      value: 50
    }, {
      label: '75 ' + __('items per page'),
      value: 75
    }, {
      label: '100 ' + __('items per page'),
      value: 100
    }, {
      label: '200 ' + __('items per page'),
      value: 200
    }]
  };
  /**
   * Builds a select component with page size options
   *
   * @param {Object} config
   * @param {Number} [config.defaultSize] - selected page size
   * @param {Object} [config.items] - available options
   * @returns {pageSizeSelector}
   */

  var pageSizeSelectorFactory = function pageSizeSelectorFactory(config) {
    var pageSizeSelectorSpecs = {
      setSelectedOption: function setSelectedOption() {
        var options = this.config.options;
        var defaultSize = this.config.defaultSize;
        var selectedOption;
        options.forEach(function (option) {
          if (option.value == defaultSize) {
            selectedOption = option;
            option.selected = true;
          } else {
            option.selected = false;
          }
        }); // if there is no option with provided default size use first option as default

        if (!selectedOption) {
          options[0].selected = true;
        }
      }
    };
    return component(pageSizeSelectorSpecs, defaults).setTemplate(pageSizeSelectorTpl).on('init', function () {
      this.setSelectedOption();
    }).on('render', function () {
      var self = this;
      var $component = this.getElement();
      $$1('.select2', $component).select2({
        dropdownCssClass: 'page-size-dropdown',
        minimumResultsForSearch: Infinity
      }).on('change', function (e) {
        self.trigger('change', e.val);
      });
    }).after('render', function () {
      var $component = this.getElement(); // Notify about the default value after render

      this.trigger('change', $$1('select', $component).val());
    }).on('destroy', function () {
      var $component = this.getElement();
      $$1('.select2', $component).select2('destroy');
    }).init(config);
  };

  return pageSizeSelectorFactory;

});
