define(['jquery', 'lodash', 'i18n', 'ui/component', 'ui/dialog/confirm', 'ui/resource/selector', 'ui/loadingButton/loadingButton', 'ui/taskQueueButton/standardButton', 'handlebars', 'lib/dompurify/purify', 'css!ui/destination/css/selector.css'], function ($$1, _, __, component, confirmDialog, resourceSelectorFactory, loadingButtonFactory, taskCreationButtonFactory, Handlebars, DOMPurify, selector_css) { 'use strict';

  $$1 = $$1 && $$1.hasOwnProperty('default') ? $$1['default'] : $$1;
  _ = _ && _.hasOwnProperty('default') ? _['default'] : _;
  __ = __ && __.hasOwnProperty('default') ? __['default'] : __;
  component = component && component.hasOwnProperty('default') ? component['default'] : component;
  confirmDialog = confirmDialog && confirmDialog.hasOwnProperty('default') ? confirmDialog['default'] : confirmDialog;
  resourceSelectorFactory = resourceSelectorFactory && resourceSelectorFactory.hasOwnProperty('default') ? resourceSelectorFactory['default'] : resourceSelectorFactory;
  loadingButtonFactory = loadingButtonFactory && loadingButtonFactory.hasOwnProperty('default') ? loadingButtonFactory['default'] : loadingButtonFactory;
  taskCreationButtonFactory = taskCreationButtonFactory && taskCreationButtonFactory.hasOwnProperty('default') ? taskCreationButtonFactory['default'] : taskCreationButtonFactory;
  Handlebars = Handlebars && Handlebars.hasOwnProperty('default') ? Handlebars['default'] : Handlebars;
  DOMPurify = DOMPurify && DOMPurify.hasOwnProperty('default') ? DOMPurify['default'] : DOMPurify;

  function _typeof(obj) {
    "@babel/helpers - typeof";

    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function Helpers0 (hb) {
    //register a i18n helper
    hb.registerHelper('__', function (key) {
      return __(key);
    });
    /**
     * Register dompurify helper
     *
     * https://github.com/cure53/DOMPurify
     * with config SAFE_FOR_TEMPLATES: true
     * to make output safe for template systems
     */

    hb.registerHelper('dompurify', function (context) {
      return DOMPurify.sanitize(context);
    });
    /**
     * Register join helper
     *
     * Example :
     * var values = {a:v1, b:v2, c:v3};
     * Using {{{join attributes '=' ' ' '"'}}} will return : a="v1" b="v2" c="v3"
     * Using {{{join values null ' or ' '*'}}} will return : *v1* or *v2* or *v3*
     */

    hb.registerHelper('join', function (arr, keyValueGlue, fragmentGlue, wrapper) {
      var fragments = [];
      keyValueGlue = typeof keyValueGlue === 'string' ? keyValueGlue : undefined;
      fragmentGlue = typeof fragmentGlue === 'string' ? fragmentGlue : ' ';
      wrapper = typeof wrapper === 'string' ? wrapper : '"';

      _.forIn(arr, function (value, key) {
        var fragment = '';

        if (value !== null || value !== undefined) {
          if (typeof value === 'boolean') {
            value = value ? 'true' : 'false';
          } else if (_typeof(value) === 'object') {
            value = _.values(value).join(' ');
          }
        } else {
          value = '';
        }

        if (keyValueGlue !== undefined) {
          fragment += key + keyValueGlue;
        }

        fragment += wrapper + value + wrapper;
        fragments.push(fragment);
      });

      return fragments.join(fragmentGlue);
    }); //register a classic "for loop" helper
    //it also adds a local variable "i" as the index in each iteration loop

    hb.registerHelper('for', function (startIndex, stopIndex, increment, options) {
      var ret = '';
      startIndex = parseInt(startIndex);
      stopIndex = parseInt(stopIndex);
      increment = parseInt(increment);

      for (var i = startIndex; i < stopIndex; i += increment) {
        ret += options.fn(_.extend({}, this, {
          i: i
        }));
      }

      return ret;
    });
    hb.registerHelper('equal', function (var1, var2, options) {
      if (var1 == var2) {
        return options.fn(this);
      } else {
        return options.inverse(this);
      }
    }); // register a "get property" helper
    // it gets the named property from the provided context

    hb.registerHelper('property', function (name, context) {
      return context[name] || '';
    }); // register an 'includes' helper
    // it checks if value is in array

    hb.registerHelper('includes', function (haystack, needle, options) {
      if (_.contains(haystack, needle)) {
        return options.fn(this);
      }
    });
  }

  if (!Helpers0.__initialized) {
    Helpers0(Handlebars);
    Helpers0.__initialized = true;
  }
  var Template = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
    this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
    var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    var buffer = "", stack1, helper;
    buffer += "\n    <h2>";
    if (helper = helpers.title) { stack1 = helper.call(depth0, {hash:{},data:data}); }
    else { helper = (depth0 && depth0.title); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
    buffer += escapeExpression(stack1)
      + "</h2>\n    ";
    return buffer;
    }

  function program3(depth0,data) {
    
    var buffer = "", stack1, helper;
    buffer += "\n        <p>";
    if (helper = helpers.description) { stack1 = helper.call(depth0, {hash:{},data:data}); }
    else { helper = (depth0 && depth0.description); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
    buffer += escapeExpression(stack1)
      + "</p>\n        ";
    return buffer;
    }

    buffer += "<div class=\"destination-selector\">\n    ";
    stack1 = helpers['if'].call(depth0, (depth0 && depth0.title), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
    if(stack1 || stack1 === 0) { buffer += stack1; }
    buffer += "\n    <div>\n        ";
    stack1 = helpers['if'].call(depth0, (depth0 && depth0.description), {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});
    if(stack1 || stack1 === 0) { buffer += stack1; }
    buffer += "\n        <div class=\"selector-container\"></div>\n        <div class=\"actions\">\n        </div>\n    </div>\n</div>\n";
    return buffer;
    });
  function selectorTpl(data, options, asString) {
    var html = Template(data, options);
    return (asString || true) ? html : $(html);
  }

  /**
   * This program is free software; you can redistribute it and/or
   * modify it under the terms of the GNU General Public License
   * as published by the Free Software Foundation; under version 2
   * of the License (non-upgradable).
   *
   * This program is distributed in the hope that it will be useful,
   * but WITHOUT ANY WARRANTY; without even the implied warranty of
   * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   * GNU General Public License for more details.
   *
   * You should have received a copy of the GNU General Public License
   * along with this program; if not, write to the Free Software
   * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
   *
   * Copyright (c) 2018-2019 (original work) Open Assessment Technologies SA ;
   */
  var defaultConfig = {
    title: __('Copy to'),
    description: __('Select a destination'),
    actionName: __('Copy'),
    icon: 'copy'
  };
  /**
   * Creates the selector component
   * @param {jQueryElement} $container - where the component is rendered
   * @param {Object} [config] - the configuration
   * @param {String} [config.classUri] - the root classUri
   * @param {String} [config.title] - header
   * @param {String} [config.description] - a description sentence
   * @param {String} [config.confirm] - when defined, confirmation message that will be displayed before triggering the action
   * @param {String} [config.actionName] - the action button text
   * @param {String} [config.icon] - the action button icon
   * @param {Object} [config.taskQueue] - define the taskQueue model to be used (only useful if the triggered action uses the task queue)
   * @param {String} [config.taskCreationUrl] - the task creation endpoint (only required if the option taskQueue is defined)
   * @param {Object} [config.taskCreationData] - optionally define the data that will be sent to the task creation endpoint
   * @param {Function} [config.preventSelection] - prevent selection callback (@see ui/resource/selectable)
   * @returns {destinationSelector} the component itself
   */

  function destinationSelectorFactory($container, config) {
    /**
     * @typedef {destinationSelector} the component
     */
    var destinationSelector = component({
      /**
       * Forwards data update to it's resource selector
       * @see ui/resource/selector#update
       */
      update: function udpate(results, params) {
        if (this.resourceSelector) {
          this.resourceSelector.update(results, params);
        }
      },

      /**
       * Updates the url on taskCreationButton
       * @param {String} url - url of the task creation
       */
      updateTaskCreationUrl: function updateTaskCreationUrl(url) {
        if (this.config && this.taskCreationButton && this.taskCreationButton.config) {
          this.taskCreationButton.config.taskCreationUrl = url;
          this.config.taskCreationUrl = url;
        }
      }
    }, defaultConfig).setTemplate(selectorTpl).on('init', function () {
      this.render($container);
    }).on('render', function () {
      var self = this;
      var $component = this.getElement();
      /**
       * Get the current selected class uri
       * @returns {String} the selected uri
       */

      var getSelectedUri = function getSelectedUri() {
        var select = self.resourceSelector.getSelection();
        var uris; //validate the selection

        if (_.isPlainObject(select)) {
          uris = _.pluck(select, 'uri');

          if (uris.length) {
            return uris[0];
          }
        }
      };

      if (this.config.taskQueue) {
        this.taskCreationButton = taskCreationButtonFactory({
          type: 'info',
          icon: this.config.icon,
          label: this.config.actionName,
          terminatedLabel: 'Interrupted',
          taskQueue: this.config.taskQueue,
          taskCreationData: this.config.taskCreationData || {},
          taskCreationUrl: this.config.taskCreationUrl,
          taskReportContainer: $container
        }).on('finished', function (result) {
          self.trigger('finished', result, self.taskCreationButton);
          this.reset(); //reset the button
        }).on('continue', function () {
          self.trigger('continue');
        });
      } else {
        this.taskCreationButton = loadingButtonFactory({
          type: 'info',
          icon: this.config.icon,
          label: this.config.actionName,
          terminatedLabel: 'Interrupted'
        });
      }

      this.taskCreationButton.on('started', function () {
        function triggerAction() {
          /**
           * @event destinationSelector#select
           * @param {String} classUri - the destination class
           */
          self.trigger('select', getSelectedUri());
        }

        if (self.config.confirm) {
          confirmDialog(self.config.confirm, triggerAction, function () {
            self.taskCreationButton.terminate().reset();
          });
        } else {
          triggerAction();
        }
      }).on('error', function (err) {
        self.trigger('error', err);
      }).render($component.find('.actions')).disable(); //set up the inner resource selector

      this.resourceSelector = resourceSelectorFactory($$1('.selector-container', $component), {
        selectionMode: 'single',
        selectClass: true,
        classUri: this.config.classUri,
        showContext: false,
        showSelection: false,
        preventSelection: this.config.preventSelection
      }); //spread the events

      this.resourceSelector.spread(this, ['query', 'error', 'update']); //enable disable the action button

      this.resourceSelector.on('change', function (selected) {
        if (selected && _.size(selected) > 0) {
          self.taskCreationButton.enable(); //append the selected class URI to the task creation data

          if (_.isPlainObject(self.taskCreationButton.config.taskCreationData)) {
            self.taskCreationButton.config.taskCreationData.classUri = getSelectedUri();
          }
        } else {
          self.taskCreationButton.disable();
        }
      });
    });

    _.defer(function () {
      destinationSelector.init(config);
    });

    return destinationSelector;
  }

  return destinationSelectorFactory;

});
