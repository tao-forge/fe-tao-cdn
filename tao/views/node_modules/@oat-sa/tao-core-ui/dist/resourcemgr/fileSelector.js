define(['jquery', 'lodash', 'async', 'i18n', 'core/mimetype', 'handlebars', 'lib/dompurify/purify', 'ui/feedback', 'context', 'ui/uploader'], function ($$1, _, async, __, mimeType, Handlebars, DOMPurify, feedback, context, uploader) { 'use strict';

  $$1 = $$1 && $$1.hasOwnProperty('default') ? $$1['default'] : $$1;
  _ = _ && _.hasOwnProperty('default') ? _['default'] : _;
  async = async && async.hasOwnProperty('default') ? async['default'] : async;
  __ = __ && __.hasOwnProperty('default') ? __['default'] : __;
  mimeType = mimeType && mimeType.hasOwnProperty('default') ? mimeType['default'] : mimeType;
  Handlebars = Handlebars && Handlebars.hasOwnProperty('default') ? Handlebars['default'] : Handlebars;
  DOMPurify = DOMPurify && DOMPurify.hasOwnProperty('default') ? DOMPurify['default'] : DOMPurify;
  feedback = feedback && feedback.hasOwnProperty('default') ? feedback['default'] : feedback;
  context = context && context.hasOwnProperty('default') ? context['default'] : context;

  function _typeof(obj) {
    "@babel/helpers - typeof";

    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function Helpers0 (hb) {
    //register a i18n helper
    hb.registerHelper('__', function (key) {
      return __(key);
    });
    /**
     * Register dompurify helper
     *
     * https://github.com/cure53/DOMPurify
     * with config SAFE_FOR_TEMPLATES: true
     * to make output safe for template systems
     */

    hb.registerHelper('dompurify', function (context) {
      return DOMPurify.sanitize(context);
    });
    /**
     * Register join helper
     *
     * Example :
     * var values = {a:v1, b:v2, c:v3};
     * Using {{{join attributes '=' ' ' '"'}}} will return : a="v1" b="v2" c="v3"
     * Using {{{join values null ' or ' '*'}}} will return : *v1* or *v2* or *v3*
     */

    hb.registerHelper('join', function (arr, keyValueGlue, fragmentGlue, wrapper) {
      var fragments = [];
      keyValueGlue = typeof keyValueGlue === 'string' ? keyValueGlue : undefined;
      fragmentGlue = typeof fragmentGlue === 'string' ? fragmentGlue : ' ';
      wrapper = typeof wrapper === 'string' ? wrapper : '"';

      _.forIn(arr, function (value, key) {
        var fragment = '';

        if (value !== null || value !== undefined) {
          if (typeof value === 'boolean') {
            value = value ? 'true' : 'false';
          } else if (_typeof(value) === 'object') {
            value = _.values(value).join(' ');
          }
        } else {
          value = '';
        }

        if (keyValueGlue !== undefined) {
          fragment += key + keyValueGlue;
        }

        fragment += wrapper + value + wrapper;
        fragments.push(fragment);
      });

      return fragments.join(fragmentGlue);
    }); //register a classic "for loop" helper
    //it also adds a local variable "i" as the index in each iteration loop

    hb.registerHelper('for', function (startIndex, stopIndex, increment, options) {
      var ret = '';
      startIndex = parseInt(startIndex);
      stopIndex = parseInt(stopIndex);
      increment = parseInt(increment);

      for (var i = startIndex; i < stopIndex; i += increment) {
        ret += options.fn(_.extend({}, this, {
          i: i
        }));
      }

      return ret;
    });
    hb.registerHelper('equal', function (var1, var2, options) {
      if (var1 == var2) {
        return options.fn(this);
      } else {
        return options.inverse(this);
      }
    }); // register a "get property" helper
    // it gets the named property from the provided context

    hb.registerHelper('property', function (name, context) {
      return context[name] || '';
    }); // register an 'includes' helper
    // it checks if value is in array

    hb.registerHelper('includes', function (haystack, needle, options) {
      if (_.contains(haystack, needle)) {
        return options.fn(this);
      }
    });
  }

  if (!Helpers0.__initialized) {
    Helpers0(Handlebars);
    Helpers0.__initialized = true;
  }
  var Template = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
    this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
    var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing, self=this;

  function program1(depth0,data) {
    
    var buffer = "", stack1, helper, options;
    buffer += "\n<li data-type=\"";
    if (helper = helpers.type) { stack1 = helper.call(depth0, {hash:{},data:data}); }
    else { helper = (depth0 && depth0.type); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
    buffer += escapeExpression(stack1)
      + "\" data-file=\"";
    if (helper = helpers.uri) { stack1 = helper.call(depth0, {hash:{},data:data}); }
    else { helper = (depth0 && depth0.uri); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
    buffer += escapeExpression(stack1)
      + "\" data-display=\"";
    if (helper = helpers.display) { stack1 = helper.call(depth0, {hash:{},data:data}); }
    else { helper = (depth0 && depth0.display); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
    buffer += escapeExpression(stack1)
      + "\" data-mime=\"";
    if (helper = helpers.mime) { stack1 = helper.call(depth0, {hash:{},data:data}); }
    else { helper = (depth0 && depth0.mime); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
    buffer += escapeExpression(stack1)
      + "\" data-size=\"";
    if (helper = helpers.size) { stack1 = helper.call(depth0, {hash:{},data:data}); }
    else { helper = (depth0 && depth0.size); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
    buffer += escapeExpression(stack1)
      + "\" data-url=\"";
    if (helper = helpers.viewUrl) { stack1 = helper.call(depth0, {hash:{},data:data}); }
    else { helper = (depth0 && depth0.viewUrl); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
    buffer += escapeExpression(stack1)
      + "\" data-download=\"";
    if (helper = helpers.downloadUrl) { stack1 = helper.call(depth0, {hash:{},data:data}); }
    else { helper = (depth0 && depth0.downloadUrl); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
    buffer += escapeExpression(stack1)
      + "\" data-alt=\"";
    if (helper = helpers.alt) { stack1 = helper.call(depth0, {hash:{},data:data}); }
    else { helper = (depth0 && depth0.alt); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
    buffer += escapeExpression(stack1)
      + "\">\n    <span class=\"desc truncate\">";
    if (helper = helpers.name) { stack1 = helper.call(depth0, {hash:{},data:data}); }
    else { helper = (depth0 && depth0.name); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
    buffer += escapeExpression(stack1)
      + "</span>\n    <div class=\"actions\">\n        <div class=\"tlb\">\n            <div class=\"tlb-top\">\n                <span class=\"tlb-box\">\n                    <span class=\"tlb-bar\">\n                        <span class=\"tlb-start\"></span>\n                        <span class=\"tlb-group\">\n                            <a href=\"#\" class=\"tlb-button-off select\" title=\""
      + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Select this file", options) : helperMissing.call(depth0, "__", "Select this file", options)))
      + "\"><span class=\"icon-move-item\"></span></a>\n                            <a href=\"";
    if (helper = helpers.downloadUrl) { stack1 = helper.call(depth0, {hash:{},data:data}); }
    else { helper = (depth0 && depth0.downloadUrl); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
    buffer += escapeExpression(stack1)
      + "\" download=\"";
    if (helper = helpers.name) { stack1 = helper.call(depth0, {hash:{},data:data}); }
    else { helper = (depth0 && depth0.name); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
    buffer += escapeExpression(stack1)
      + "\" target=\"_blank\" class=\"tlb-button-off download\" title=\""
      + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Download this file", options) : helperMissing.call(depth0, "__", "Download this file", options)))
      + "\"><span class=\"icon-download\"></span></a>\n                            <a href=\"#\" class=\"tlb-button-off\" title=\""
      + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Remove this file", options) : helperMissing.call(depth0, "__", "Remove this file", options)))
      + "\" data-delete=\":parent li\"><span class=\"icon-bin\"></span></a>\n                        </span>\n                        <span class=\"tlb-end\"></span>\n                    </span>  \n                </span>   \n            </div>\n        </div>\n    </div>\n</li>\n";
    return buffer;
    }

    stack1 = helpers.each.call(depth0, (depth0 && depth0.files), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
    if(stack1 || stack1 === 0) { buffer += stack1; }
    buffer += "\n";
    return buffer;
    });
  function fileSelectTpl(data, options, asString) {
    var html = Template(data, options);
    return (asString || true) ? html : $(html);
  }

  /*
   * This program is free software; you can redistribute it and/or
   * modify it under the terms of the GNU General Public License
   * as published by the Free Software Foundation; under version 2
   * of the License (non-upgradable).
   *
   * This program is distributed in the hope that it will be useful,
   * but WITHOUT ANY WARRANTY; without even the implied warranty of
   * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   * GNU General Public License for more details.
   *
   * You should have received a copy of the GNU General Public License
   * along with this program; if not, write to the Free Software
   * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
   *
   * Copyright (c) 2015 (original work) Open Assessment Technologies SA;
   *
   */
  var ns = 'resourcemgr';

  function shortenPath(path) {
    var tokens = path.replace(/\/$/, '').split('/');
    var start = tokens.length - 3;
    var end = tokens.length - 1;

    var title = _.map(tokens, function (token, index) {
      return index > start && token ? index < end ? token[0] : token : undefined;
    });

    title = title.filter(Boolean);
    return title.join('/');
  }

  function isTextLarger($element, text) {
    var $dummy = $element.clone().detach().css({
      position: 'absolute',
      visibility: 'hidden',
      'text-overflow': 'clip',
      width: 'auto'
    }).text(text).insertAfter($element);
    var textSize = $dummy.width();
    $dummy.remove();
    return textSize > $element.width();
  }

  function fileSelector (options) {
    var root = options.root || '/';
    var disableUpload = options.disableUpload || false;
    var $container = options.$target;
    var $fileSelector = $$1('.file-selector', $container);
    var $fileContainer = $$1('.files', $fileSelector);
    var $placeholder = $$1('.empty', $fileSelector);
    var $uploader = $$1('.file-upload-container', $fileSelector);
    var parentSelector = '#' + $container.attr('id') + ' .file-selector';
    var $pathTitle = $fileSelector.find('h1 > .title');
    var $browserTitle = $$1('.file-browser > h1', $container); //set up the uploader

    if (disableUpload) {
      var $switcher = $$1('.upload-switcher', $fileSelector);
      $switcher.remove();
    } else {
      setUpUploader(root);
    } //update current folder


    $container.on('folderselect.' + ns, function (e, fullPath, data, activePath) {
      var files; //update title

      $pathTitle.text(isTextLarger($pathTitle, fullPath) ? shortenPath(fullPath) : fullPath); //update content here

      if (_.isArray(data)) {
        files = _.filter(data, function (item) {
          return !!item.uri;
        }).map(function (file) {
          file.type = mimeType.getFileType(file);

          if (file.identifier === undefined) {
            file.display = (fullPath + '/' + file.name).replace('//', '/');
          } else {
            file.display = file.identifier + file.name;
          }

          file.viewUrl = options.downloadUrl + '?' + $$1.param(options.params) + '&' + options.pathParam + '=' + encodeURIComponent(file.uri);
          file.downloadUrl = file.viewUrl + '&svgzsupport=true';
          return file;
        });
        updateFiles(fullPath, files);

        if (activePath) {
          $$1('li[data-file="' + activePath + '"]').trigger('click');
        }
      }
    }); //listen for file activation

    $$1(parentSelector).off('click', '.files li').on('click', '.files li', function (e) {
      var $selected = $$1(this);
      var $files = $$1('.files > li', $fileSelector);

      var data = _.clone($selected.data());

      $files.removeClass('active');
      $selected.addClass('active');
      $container.trigger('fileselect.' + ns, [data]);
    }); //select a file

    $$1(parentSelector).off('click', '.files li a.select').on('click', '.files li a.select', function (e) {
      e.preventDefault();

      var data = _.pick($$1(this).parents('li').data(), ['file', 'type', 'mime', 'size', 'alt']);

      if (context.mediaSources && context.mediaSources.length === 0 && data.file.indexOf('local/') > -1) {
        data.file = data.file.substring(6);
      }

      $container.trigger('select.' + ns, [[data]]);
    }); //delete a file

    $fileContainer.on('delete.deleter', function (e, $target) {
      var path,
          params = {};

      if (e.namespace === 'deleter' && $target.length) {
        path = $target.data('file');
        params[options.pathParam] = path;
        $$1.getJSON(options.deleteUrl, _.merge(params, options.params), function (response) {
          if (response.deleted) {
            $container.trigger('filedelete.' + ns, [path]);
          }
        });
      }
    });

    function setUpUploader(currentPath) {
      var errors = [];
      var $switcher = $$1('.upload-switcher a', $fileSelector);
      $uploader.on('upload.uploader', function (e, file, result) {
        var path = $$1('[data-display="' + currentPath + '"]').data('path') || $$1('[data-display="/' + currentPath + '"]').data('path');

        if (!path) {
          path = currentPath;
        }

        $container.trigger('filenew.' + ns, [result, path]);
      });
      $uploader.on('fail.uploader', function (e, file, err) {
        errors.push(__('Unable to upload file %s : %s', file.name, err.message));
      });
      $uploader.on('end.uploader', function () {
        if (errors.length === 0) {
          _.delay(switchUpload, 500);
        } else {
          feedback().error('<ul><li>' + errors.join('</li><li>') + '</li></ul>', {
            encodeHtml: false
          });
        } //reset errors


        errors = [];
      });
      $uploader.uploader({
        upload: true,
        multiple: true,
        uploadUrl: options.uploadUrl + '?' + $$1.param(options.params) + '&' + options.pathParam + '=' + currentPath,
        fileSelect: function fileSelect(files, done) {
          var givenLength = files.length;
          var fileNames = [];
          $fileContainer.find('li > .desc').each(function () {
            fileNames.push($$1(this).text().toLowerCase());
          }); //check the mime-type

          if (options.params.filters) {
            var filters = [],
                i;

            if (!_.isString(options.params.filters)) {
              for (i in options.params.filters) {
                filters.push(options.params.filters[i]['mime']);
              }
            } else {
              filters = options.params.filters.split(',');
            } //TODO check stars


            files = _.filter(files, function (file) {
              // Under rare circumstances a browser may report the mime type
              // with quotes (e.g. "application/foo" instead of application/foo)
              var checkType = file.type.replace(/^["']+|['"]+$/g, '');
              return _.contains(filters, checkType);
            });

            if (files.length !== givenLength) {
              //TODO use a feedback popup
              feedback().error('Unauthorized files have been removed');
            }
          }

          async.filter(files, function (file, cb) {
            var result = true; //try to call a server side service to check whether the selected files exists or not.

            if (options.fileExistsUrl) {
              var pathParam = currentPath + '/' + file.name;
              pathParam.replace('//', '/');
              $$1.getJSON(options.fileExistsUrl + '?' + $$1.param(options.params) + '&' + options.pathParam + '=' + pathParam, function (response) {
                if (response && response.exists === true) {
                  result = window.confirm('Do you want to override ' + file.name + '?');
                }

                cb(result);
              });
            } else {
              //fallback on client side check
              if (_.contains(fileNames, file.name.toLowerCase())) {
                result = window.confirm('Do you want to override ' + file.name + '?');
              }

              cb(result);
            }
          }, done);
        }
      });
      $container.on('folderselect.' + ns, function (e, fullPath, data, uri) {
        currentPath = uri;
        $uploader.uploader('options', {
          uploadUrl: options.uploadUrl + '?' + $$1.param(options.params) + '&' + options.pathParam + '=' + currentPath + '&relPath=' + currentPath
        });
      }); //switch to upload mode

      $switcher.click(function (e) {
        e.preventDefault();
        switchUpload();
      });

      var switchUpload = function switchUpload() {
        if ($fileContainer.css('display') === 'none') {
          $uploader.hide();
          $fileContainer.show(); // Note: show() would display as inline, not inline-block!

          $switcher.filter('.upload').css({
            display: 'inline-block'
          });
          $switcher.filter('.listing').hide();
          $browserTitle.text(__('Browse folders:'));
        } else {
          $fileContainer.hide();
          $placeholder.hide();
          $uploader.show();
          $switcher.filter('.upload').hide();
          $switcher.filter('.listing').css({
            display: 'inline-block'
          });
          $browserTitle.text(__('Upload into:'));
          $uploader.uploader('reset');
        }
      };
    }

    function updateFiles(path, files) {
      $fileContainer.empty();

      if (files.length) {
        $placeholder.hide();
        $fileContainer.append(fileSelectTpl({
          files: files
        }));
      } else if ($fileContainer.css('display') !== 'none') {
        $placeholder.show();
      }
    }
  }

  return fileSelector;

});
