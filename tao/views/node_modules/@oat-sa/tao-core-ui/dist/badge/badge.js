define(['lodash', 'ui/hider', 'ui/component', 'handlebars', 'i18n', 'lib/dompurify/purify', 'css!ui/badge/css/badge.css'], function (_, hider, component, Handlebars, __, DOMPurify, badge_css) { 'use strict';

  _ = _ && _.hasOwnProperty('default') ? _['default'] : _;
  hider = hider && hider.hasOwnProperty('default') ? hider['default'] : hider;
  component = component && component.hasOwnProperty('default') ? component['default'] : component;
  Handlebars = Handlebars && Handlebars.hasOwnProperty('default') ? Handlebars['default'] : Handlebars;
  __ = __ && __.hasOwnProperty('default') ? __['default'] : __;
  DOMPurify = DOMPurify && DOMPurify.hasOwnProperty('default') ? DOMPurify['default'] : DOMPurify;

  function _typeof(obj) {
    "@babel/helpers - typeof";

    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function Helpers0 (hb) {
    //register a i18n helper
    hb.registerHelper('__', function (key) {
      return __(key);
    });
    /**
     * Register dompurify helper
     *
     * https://github.com/cure53/DOMPurify
     * with config SAFE_FOR_TEMPLATES: true
     * to make output safe for template systems
     */

    hb.registerHelper('dompurify', function (context) {
      return DOMPurify.sanitize(context);
    });
    /**
     * Register join helper
     *
     * Example :
     * var values = {a:v1, b:v2, c:v3};
     * Using {{{join attributes '=' ' ' '"'}}} will return : a="v1" b="v2" c="v3"
     * Using {{{join values null ' or ' '*'}}} will return : *v1* or *v2* or *v3*
     */

    hb.registerHelper('join', function (arr, keyValueGlue, fragmentGlue, wrapper) {
      var fragments = [];
      keyValueGlue = typeof keyValueGlue === 'string' ? keyValueGlue : undefined;
      fragmentGlue = typeof fragmentGlue === 'string' ? fragmentGlue : ' ';
      wrapper = typeof wrapper === 'string' ? wrapper : '"';

      _.forIn(arr, function (value, key) {
        var fragment = '';

        if (value !== null || value !== undefined) {
          if (typeof value === 'boolean') {
            value = value ? 'true' : 'false';
          } else if (_typeof(value) === 'object') {
            value = _.values(value).join(' ');
          }
        } else {
          value = '';
        }

        if (keyValueGlue !== undefined) {
          fragment += key + keyValueGlue;
        }

        fragment += wrapper + value + wrapper;
        fragments.push(fragment);
      });

      return fragments.join(fragmentGlue);
    }); //register a classic "for loop" helper
    //it also adds a local variable "i" as the index in each iteration loop

    hb.registerHelper('for', function (startIndex, stopIndex, increment, options) {
      var ret = '';
      startIndex = parseInt(startIndex);
      stopIndex = parseInt(stopIndex);
      increment = parseInt(increment);

      for (var i = startIndex; i < stopIndex; i += increment) {
        ret += options.fn(_.extend({}, this, {
          i: i
        }));
      }

      return ret;
    });
    hb.registerHelper('equal', function (var1, var2, options) {
      if (var1 == var2) {
        return options.fn(this);
      } else {
        return options.inverse(this);
      }
    }); // register a "get property" helper
    // it gets the named property from the provided context

    hb.registerHelper('property', function (name, context) {
      return context[name] || '';
    }); // register an 'includes' helper
    // it checks if value is in array

    hb.registerHelper('includes', function (haystack, needle, options) {
      if (_.contains(haystack, needle)) {
        return options.fn(this);
      }
    });
  }

  if (!Helpers0.__initialized) {
    Helpers0(Handlebars);
    Helpers0.__initialized = true;
  }
  var Template = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
    this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Handlebars.helpers);  


    return "<div class=\"badge-component\">\n    <div class=\"loader\"></div>\n    <span class=\"badge-border\"></span>\n    <span class=\"badge\"></span>\n</div>";
    });
  function badgeTpl(data, options, asString) {
    var html = Template(data, options);
    return (asString || true) ? html : $(html);
  }

  /**
   * This program is free software; you can redistribute it and/or
   * modify it under the terms of the GNU General Public License
   * as published by the Free Software Foundation; under version 2
   * of the License (non-upgradable).
   *
   * This program is distributed in the hope that it will be useful,
   * but WITHOUT ANY WARRANTY; without even the implied warranty of
   * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   * GNU General Public License for more details.
   *
   * You should have received a copy of the GNU General Public License
   * along with this program; if not, write to the Free Software
   * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
   *
   * Copyright (c) 2017 (original work) Open Assessment Technologies SA ;
   */
  var _defaults = {
    loading: false,
    type: 'info',
    value: 0
  };
  var _allowedTypes = ['success', 'warning', 'error', 'info'];
  var badgeApi = {
    /**
     * Update and refresh the rendering of the badge
     * @param {Object} config - the display config
     * @param {Number} config.value - the number to be display in the badge, if above 99, the 99+ will be displayed instead
     * @param {String} config.type - define the type of the badge (success, error, info)
     * @param {Boolean} [config.loading] - if true, show the loading animation around it
     * @returns {badgeApi}
     */
    update: function update(config) {
      var $component = this.getElement();
      var $border = $component.find('.badge-border');
      var $badge = $component.find('.badge').removeClass('badge-info badge-success badge-warning badge-error icon-result-ok');
      var $loader = $component.find('.loader');
      var displayValue;

      _.assign(this.config, config);

      if (this.config && this.config.value) {
        displayValue = parseInt(this.config.value, 10);
        displayValue = displayValue > 99 ? '99+' : displayValue; //only display up to a value of 99
        //set status

        if (_allowedTypes.indexOf(this.config.type) === -1) {
          throw new Error('Invalid badge type : '.this.config.type);
        }

        $badge.addClass('badge-' + this.config.type).html(displayValue); //if any is running

        if (this.config.loading) {
          //replace by loading
          hider.show($loader);
          hider.hide($border);
        } else {
          hider.hide($loader);
          hider.show($border);
        }
      } else {
        //idle state as no border nor loader
        hider.hide($loader);
        hider.hide($border); //set the complete state (with the check box icon and clear any number in it)

        $badge.addClass('icon-result-ok').empty();
      }

      return this;
    }
  };
  /**
   * Create a badge that indicates the status and a number
   *
   * @param {Object} config - the component config
   * @param {Number} config.value - the number to be display in the badge, if above 99, the 99+ will be displayed instead
   * @param {String} config.type - define the type of the badge (success, error, info)
   * @param {Boolean} [config.loading] - if true, show the loading animation around it
   * @returns {badge} the component
   */

  function badgeFactory(config) {
    var initConfig = _.defaults(config || {}, _defaults);
    /**
     * The component
     * @typedef {ui/component} badge
     */


    return component(badgeApi).setTemplate(badgeTpl).on('render', function () {
      this.update(this.config);
    }).init(initConfig);
  }

  return badgeFactory;

});
