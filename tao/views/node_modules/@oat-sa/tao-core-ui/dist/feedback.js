define(['jquery', 'lodash', 'core/format', 'ui/component', 'util/wrapLongWords', 'util/encode', 'handlebars', 'i18n', 'lib/dompurify/purify'], function ($$1, _, format, component, wrapLongWords, encode, Handlebars, __, DOMPurify) { 'use strict';

  $$1 = $$1 && $$1.hasOwnProperty('default') ? $$1['default'] : $$1;
  _ = _ && _.hasOwnProperty('default') ? _['default'] : _;
  format = format && format.hasOwnProperty('default') ? format['default'] : format;
  component = component && component.hasOwnProperty('default') ? component['default'] : component;
  wrapLongWords = wrapLongWords && wrapLongWords.hasOwnProperty('default') ? wrapLongWords['default'] : wrapLongWords;
  encode = encode && encode.hasOwnProperty('default') ? encode['default'] : encode;
  Handlebars = Handlebars && Handlebars.hasOwnProperty('default') ? Handlebars['default'] : Handlebars;
  __ = __ && __.hasOwnProperty('default') ? __['default'] : __;
  DOMPurify = DOMPurify && DOMPurify.hasOwnProperty('default') ? DOMPurify['default'] : DOMPurify;

  function _typeof(obj) {
    "@babel/helpers - typeof";

    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function Helpers0 (hb) {
    //register a i18n helper
    hb.registerHelper('__', function (key) {
      return __(key);
    });
    /**
     * Register dompurify helper
     *
     * https://github.com/cure53/DOMPurify
     * with config SAFE_FOR_TEMPLATES: true
     * to make output safe for template systems
     */

    hb.registerHelper('dompurify', function (context) {
      return DOMPurify.sanitize(context);
    });
    /**
     * Register join helper
     *
     * Example :
     * var values = {a:v1, b:v2, c:v3};
     * Using {{{join attributes '=' ' ' '"'}}} will return : a="v1" b="v2" c="v3"
     * Using {{{join values null ' or ' '*'}}} will return : *v1* or *v2* or *v3*
     */

    hb.registerHelper('join', function (arr, keyValueGlue, fragmentGlue, wrapper) {
      var fragments = [];
      keyValueGlue = typeof keyValueGlue === 'string' ? keyValueGlue : undefined;
      fragmentGlue = typeof fragmentGlue === 'string' ? fragmentGlue : ' ';
      wrapper = typeof wrapper === 'string' ? wrapper : '"';

      _.forIn(arr, function (value, key) {
        var fragment = '';

        if (value !== null || value !== undefined) {
          if (typeof value === 'boolean') {
            value = value ? 'true' : 'false';
          } else if (_typeof(value) === 'object') {
            value = _.values(value).join(' ');
          }
        } else {
          value = '';
        }

        if (keyValueGlue !== undefined) {
          fragment += key + keyValueGlue;
        }

        fragment += wrapper + value + wrapper;
        fragments.push(fragment);
      });

      return fragments.join(fragmentGlue);
    }); //register a classic "for loop" helper
    //it also adds a local variable "i" as the index in each iteration loop

    hb.registerHelper('for', function (startIndex, stopIndex, increment, options) {
      var ret = '';
      startIndex = parseInt(startIndex);
      stopIndex = parseInt(stopIndex);
      increment = parseInt(increment);

      for (var i = startIndex; i < stopIndex; i += increment) {
        ret += options.fn(_.extend({}, this, {
          i: i
        }));
      }

      return ret;
    });
    hb.registerHelper('equal', function (var1, var2, options) {
      if (var1 == var2) {
        return options.fn(this);
      } else {
        return options.inverse(this);
      }
    }); // register a "get property" helper
    // it gets the named property from the provided context

    hb.registerHelper('property', function (name, context) {
      return context[name] || '';
    }); // register an 'includes' helper
    // it checks if value is in array

    hb.registerHelper('includes', function (haystack, needle, options) {
      if (_.contains(haystack, needle)) {
        return options.fn(this);
      }
    });
  }

  if (!Helpers0.__initialized) {
    Helpers0(Handlebars);
    Helpers0.__initialized = true;
  }
  var Template = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
    this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
    var buffer = "", stack1, helper, options, functionType="function", escapeExpression=this.escapeExpression, self=this, helperMissing=helpers.helperMissing;

  function program1(depth0,data) {
    
    
    return "popup";
    }

    buffer += "<div id=\"";
    if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }
    else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
    buffer += escapeExpression(stack1)
      + "\" class=\"feedback feedback-";
    if (helper = helpers.level) { stack1 = helper.call(depth0, {hash:{},data:data}); }
    else { helper = (depth0 && depth0.level); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
    buffer += escapeExpression(stack1)
      + " ";
    stack1 = helpers['if'].call(depth0, (depth0 && depth0.popup), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
    if(stack1 || stack1 === 0) { buffer += stack1; }
    buffer += "\" role=\"alert\" >\n    <span class=\"icon-";
    if (helper = helpers.level) { stack1 = helper.call(depth0, {hash:{},data:data}); }
    else { helper = (depth0 && depth0.level); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
    buffer += escapeExpression(stack1)
      + "\"></span>\n    <div>\n        ";
    stack1 = (helper = helpers.dompurify || (depth0 && depth0.dompurify),options={hash:{},data:data},helper ? helper.call(depth0, (depth0 && depth0.msg), options) : helperMissing.call(depth0, "dompurify", (depth0 && depth0.msg), options));
    if(stack1 || stack1 === 0) { buffer += stack1; }
    buffer += "\n    </div>\n    <span title=\""
      + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Close message", options) : helperMissing.call(depth0, "__", "Close message", options)))
      + "\" class=\"icon-close\" data-close=\":parent .feedback\" role=\"button\" tabindex=\"0\"></span>\n</div>\n";
    return buffer;
    });
  function tpl(data, options, asString) {
    var html = Template(data, options);
    return (asString || true) ? html : $(html);
  }

  /*
   * This program is free software; you can redistribute it and/or
   * modify it under the terms of the GNU General Public License
   * as published by the Free Software Foundation; under version 2
   * of the License (non-upgradable).
   *
   * This program is distributed in the hope that it will be useful,
   * but WITHOUT ANY WARRANTY; without even the implied warranty of
   * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   * GNU General Public License for more details.
   *
   * You should have received a copy of the GNU General Public License
   * along with this program; if not, write to the Free Software
   * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
   *
   * Copyright (c) 2015-2020 (original work) Open Assessment Technologies SA ;
   *
   */

  var defaultContainerSelector = '#feedback-box'; //keep a reference to ALL alive feedback

  var currents = []; //available levels

  var levels = ['info', 'success', 'warning', 'danger', 'error'];
  var defaultOptions = {
    timeout: {
      info: 2000,
      success: 2000,
      warning: 4000,
      danger: 4000,
      error: 8000
    },
    // Note: value depends on font, font-weight and such.
    // 40 is pretty good in the current setup but will
    // never be exact with a non-proportional font.
    wrapLongWordsAfter: 40,
    //by default HTML content is encoded
    encodeHtml: true,
    //change the display (absolute or in the flow)
    popup: true
  };
  /**
   * Creates a feedback object.
   *
   * @exports ui/feedback
   * @param {jQUeryElement} [$container] - only to specify another container
   * @param {Object} [config] - change the config
   * @param {Object|Number} [config.timeout] - either one for every level or per level timeout in ms
   * @param {Number} [config.wrapLongWordsAfter] - add a space in the middle of very long word to enable wrap lines
   * @param {Boolean} [config.encodeHtml] - weither the message is html encoded
   * @param {Boolean} [config.popup] - displays the message as a popup or in the flow
   * @returns {feedback} the feedback object
   * @throws {TypeError} without a container
   */

  var feedbackFactory = function feedbackFactory($container, config) {
    var feedback;
    var codeEnter = 13;
    var codeSpace = 32;

    if (!$container || !$container.length) {
      $container = $$1(defaultContainerSelector);
    }

    if (!$container.length) {
      throw new TypeError('The feedback needs to belong to an existing container');
    }
    /**
     * @typedef {Object} feedback - the feedback component
     */


    feedback = component({
      /**
       * Creates a message, not displayed.
       * @param {String} [level = 'info'] - the message level
       * @param {String} msg - the message to display
       * @param {Array} [params] - parameters for the message format (%s,%d,%j)
       * @param {Object} [options] - specify the config
       * @returns {feedback} chains
       */
      message: function message(level, msg, params, options) {
        var displayedMessage = msg;

        if (!level || !_.contains(levels, level)) {
          level = 'info';
        } //parameterized messages


        if (_.isPlainObject(params)) {
          options = params;
          params = [];
        }

        this.config = _.defaults(options || {}, this.config);
        this.config.level = level; // encode plain text string to html

        if (this.config.encodeHtml) {
          displayedMessage = encode.html(displayedMessage);
        } // wrap long words


        if (this.config.wrapLongWordsAfter) {
          displayedMessage = wrapLongWords(displayedMessage, this.config.wrapLongWordsAfter);
        } //apply strf like format parameters


        if (_.isArray(params) && params.length) {
          displayedMessage = format.apply(format, [displayedMessage].concat(params));
        }

        this.config.msg = displayedMessage;
        return this;
      },

      /**
       * Opens an info message
       * @param {String} msg - the message to display
       * @param {Array} [params] - parameters for the message format (%s,%d,%j)
       * @param {Object} [options] - specify the config
       * @returns {feedback} chains
       */
      info: function info(msg, params, options) {
        return this.message('info', msg, params, options).open();
      },

      /**
       * Opens an success message
       * @param {String} msg - the message to display
       * @param {Array} [params] - parameters for the message format (%s,%d,%j)
       * @param {Object} [options] - specify the config
       * @returns {feedback} chains
       */
      success: function success(msg, params, options) {
        return this.message('success', msg, params, options).open();
      },

      /**
       * Opens an warning message
       * @param {String} msg - the message to display
       * @param {Array} [params] - parameters for the message format (%s,%d,%j)
       * @param {Object} [options] - specify the config
       * @returns {feedback} chains
       */
      warning: function warning(msg, params, options) {
        return this.message('warning', msg, params, options).open();
      },

      /**
       * Opens an danger message
       * @param {String} msg - the message to display
       * @param {Array} [params] - parameters for the message format (%s,%d,%j)
       * @param {Object} [options] - specify the config
       * @returns {feedback} chains
       */
      danger: function danger(msg, params, options) {
        return this.message('danger', msg, params, options).open();
      },

      /**
       * Opens an error message
       * @param {String} msg - the message to display
       * @param {Array} [params] - parameters for the message format (%s,%d,%j)
       * @param {Object} [options] - specify the config
       * @returns {feedback} chains
       */
      error: function error(msg, params, options) {
        return this.message('error', msg, params, options).open();
      },

      /**
       * Opens the message (and close previous one)
       * ! Method kept for backward compat with previous version !
       * @returns {feedback} chains
       */
      open: function open() {
        //close others
        _(currents).reject(this).invoke('close'); //and display


        return this.display();
      },

      /**
       * Closes the message
       * ! Method kept for backward compat with previous version !
       * @returns {feedback} chains
       */
      close: function close() {
        if (this.is('rendered')) {
          this.destroy();
        }
      },

      /**
       * Displays the message (does the render)
       * ! Method kept for backward compat with previous version !
       * @returns {feedback} chains
       */
      display: function display() {
        if (this.is('rendered')) {
          this.show();
        } else {
          this.render($container);
        }

        return this;
      }
    }, defaultOptions);
    return feedback.setTemplate(tpl).on('init', function () {
      this.config.id = 'feedback-' + (currents.length + 1);
      currents.push(this); //for backward compat

      $container.trigger('create.feedback');
    }).on('render', function () {
      var _this = this;

      var self = this;
      var $component = this.getElement();
      var $closer = $$1('.icon-close', $component);
      var timeout = _.isPlainObject(this.config.timeout) ? this.config.timeout[this.config.level] : this.config.timeout;
      $closer.off('click').on('click', function (e) {
        e.preventDefault();

        _this.destroy();
      }).off('keyup').on('keyup', function (e) {
        if ([codeEnter, codeSpace].indexOf(e.which) !== -1) {
          _this.destroy();
        }
      });

      if (_.isNumber(timeout) && timeout > 0) {
        _.delay(function () {
          self.close();
        }, timeout);
      } //for backward compat


      $container.trigger('display.feedback');
    }).on('destroy', function () {
      //for backward compat
      $container.trigger('close.feedback');

      _.remove(currents, this);
    }).init(config);
  };

  return feedbackFactory;

});
