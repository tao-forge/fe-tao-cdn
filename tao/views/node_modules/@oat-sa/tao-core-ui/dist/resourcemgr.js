define(['jquery', 'lodash', 'core/pluginifier', 'ui/resourcemgr/fileBrowser', 'ui/resourcemgr/filePreview', 'ui/resourcemgr/fileSelector', 'handlebars', 'i18n', 'lib/dompurify/purify', 'ui/modal', 'css!ui/resourcemgr/css/resourcemgr.css'], function ($$1, _, Pluginifier, fileBrowser, filePreview, fileSelector, Handlebars, __, DOMPurify, modal, resourcemgr_css) { 'use strict';

  $$1 = $$1 && $$1.hasOwnProperty('default') ? $$1['default'] : $$1;
  _ = _ && _.hasOwnProperty('default') ? _['default'] : _;
  Pluginifier = Pluginifier && Pluginifier.hasOwnProperty('default') ? Pluginifier['default'] : Pluginifier;
  fileBrowser = fileBrowser && fileBrowser.hasOwnProperty('default') ? fileBrowser['default'] : fileBrowser;
  filePreview = filePreview && filePreview.hasOwnProperty('default') ? filePreview['default'] : filePreview;
  fileSelector = fileSelector && fileSelector.hasOwnProperty('default') ? fileSelector['default'] : fileSelector;
  Handlebars = Handlebars && Handlebars.hasOwnProperty('default') ? Handlebars['default'] : Handlebars;
  __ = __ && __.hasOwnProperty('default') ? __['default'] : __;
  DOMPurify = DOMPurify && DOMPurify.hasOwnProperty('default') ? DOMPurify['default'] : DOMPurify;

  function _typeof(obj) {
    "@babel/helpers - typeof";

    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function Helpers0 (hb) {
    //register a i18n helper
    hb.registerHelper('__', function (key) {
      return __(key);
    });
    /**
     * Register dompurify helper
     *
     * https://github.com/cure53/DOMPurify
     * with config SAFE_FOR_TEMPLATES: true
     * to make output safe for template systems
     */

    hb.registerHelper('dompurify', function (context) {
      return DOMPurify.sanitize(context);
    });
    /**
     * Register join helper
     *
     * Example :
     * var values = {a:v1, b:v2, c:v3};
     * Using {{{join attributes '=' ' ' '"'}}} will return : a="v1" b="v2" c="v3"
     * Using {{{join values null ' or ' '*'}}} will return : *v1* or *v2* or *v3*
     */

    hb.registerHelper('join', function (arr, keyValueGlue, fragmentGlue, wrapper) {
      var fragments = [];
      keyValueGlue = typeof keyValueGlue === 'string' ? keyValueGlue : undefined;
      fragmentGlue = typeof fragmentGlue === 'string' ? fragmentGlue : ' ';
      wrapper = typeof wrapper === 'string' ? wrapper : '"';

      _.forIn(arr, function (value, key) {
        var fragment = '';

        if (value !== null || value !== undefined) {
          if (typeof value === 'boolean') {
            value = value ? 'true' : 'false';
          } else if (_typeof(value) === 'object') {
            value = _.values(value).join(' ');
          }
        } else {
          value = '';
        }

        if (keyValueGlue !== undefined) {
          fragment += key + keyValueGlue;
        }

        fragment += wrapper + value + wrapper;
        fragments.push(fragment);
      });

      return fragments.join(fragmentGlue);
    }); //register a classic "for loop" helper
    //it also adds a local variable "i" as the index in each iteration loop

    hb.registerHelper('for', function (startIndex, stopIndex, increment, options) {
      var ret = '';
      startIndex = parseInt(startIndex);
      stopIndex = parseInt(stopIndex);
      increment = parseInt(increment);

      for (var i = startIndex; i < stopIndex; i += increment) {
        ret += options.fn(_.extend({}, this, {
          i: i
        }));
      }

      return ret;
    });
    hb.registerHelper('equal', function (var1, var2, options) {
      if (var1 == var2) {
        return options.fn(this);
      } else {
        return options.inverse(this);
      }
    }); // register a "get property" helper
    // it gets the named property from the provided context

    hb.registerHelper('property', function (name, context) {
      return context[name] || '';
    }); // register an 'includes' helper
    // it checks if value is in array

    hb.registerHelper('includes', function (haystack, needle, options) {
      if (_.contains(haystack, needle)) {
        return options.fn(this);
      }
    });
  }

  if (!Helpers0.__initialized) {
    Helpers0(Handlebars);
    Helpers0.__initialized = true;
  }
  var Template = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
    this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
    var buffer = "", stack1, helper, options, functionType="function", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing;


    buffer += "<div class=\"resourcemgr modal\">\n\n    <h2>";
    if (helper = helpers.title) { stack1 = helper.call(depth0, {hash:{},data:data}); }
    else { helper = (depth0 && depth0.title); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
    buffer += escapeExpression(stack1)
      + "</h2>\n\n    <div class=\"file-wrapper\">\n    \n        <!-- left section: items selection -->\n        <section class=\"file-browser\">\n            <h1>"
      + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Browse resources", options) : helperMissing.call(depth0, "__", "Browse resources", options)))
      + "</h1>\n            <div class=\"file-browser-wrapper\"></div>\n        </section>\n \n        <!-- test editor  -->\n        <section class=\"file-selector\">\n\n            <h1>\n                <div class=\"title lft\"></div>\n                <div class=\"upload-switcher rgt\">\n                    <a href=\"#\" class=\"btn-info small upload\"><span class=\"icon-add\"></span>"
      + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Add file(s)", options) : helperMissing.call(depth0, "__", "Add file(s)", options)))
      + "</a>\n                    <a href=\"#\" class=\"btn-info small listing\"><span class=\"icon-undo\"></span>"
      + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Back to listing", options) : helperMissing.call(depth0, "__", "Back to listing", options)))
      + "</a>\n                </div>\n            </h1>\n\n            <div class=\"empty\">\n                "
      + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "No files", options) : helperMissing.call(depth0, "__", "No files", options)))
      + "\n            </div>\n\n            <ul class=\"files\"></ul>\n\n            <div class=\"file-upload-container\"></div>\n\n        </section>\n\n        <section class=\"file-preview\">\n\n            <h1>"
      + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Preview", options) : helperMissing.call(depth0, "__", "Preview", options)))
      + "</h1>\n\n            <div class=\"previewer\">\n                <p class=\"nopreview\">"
      + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "No Preview available", options) : helperMissing.call(depth0, "__", "No Preview available", options)))
      + "</p>\n            </div>\n       \n            <h2 class=\"toggler\" data-toggle=\"~ .file-properties\">"
      + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "File Properties", options) : helperMissing.call(depth0, "__", "File Properties", options)))
      + "</h2>\n\n            <div class=\"file-properties\">\n\n                <div class=\"grid-row\">\n                    <div class=\"col-2\">\n                        "
      + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Type", options) : helperMissing.call(depth0, "__", "Type", options)))
      + "\n                    </div>\n                    <div class=\"col-10 prop-type\"></div>\n                </div>\n\n                <div class=\"grid-row\">\n                    <div class=\"col-2\">\n                        "
      + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Size", options) : helperMissing.call(depth0, "__", "Size", options)))
      + "\n                    </div>\n                    <div class=\"col-10 prop-size\"></div>\n                </div>\n            \n                <div class=\"grid-row prop-url\">\n                    <div class=\"actions\">\n                        <a href=\"#\" download=\"\" target=\"_blank\" class=\"tlb-button-off download hidden\" title=\""
      + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Download this file", options) : helperMissing.call(depth0, "__", "Download this file", options)))
      + "\">\n                            <button class=\"btn-info small\">\n                                <span class=\"icon-download\"></span>"
      + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Download this file", options) : helperMissing.call(depth0, "__", "Download this file", options)))
      + "\n                            </button>\n                        </a>\n                    </div>\n                </div>\n            </div>\n\n            <h2 class=\"toggler\" data-toggle=\"~ .actions\">"
      + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Actions", options) : helperMissing.call(depth0, "__", "Actions", options)))
      + "</h2>\n\n            <div class=\"actions\">\n                <button class=\"btn-success select-action small\" disabled>\n                    <span class=\"icon-move-item\"></span>"
      + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Select", options) : helperMissing.call(depth0, "__", "Select", options)))
      + "\n                </button>\n            </div>\n\n        </section>\n\n    </div>\n</div>\n";
    return buffer;
    });
  function layout(data, options, asString) {
    var html = Template(data, options);
    return (asString || true) ? html : $(html);
  }

  var ns = 'resourcemgr';
  var dataNs = 'ui.' + ns;
  var defaults = {
    mediaSources: [{
      root: 'local',
      path: '/'
    }],
    open: true,
    appendContainer: '.tao-scope:first',
    title: ''
  };
  /**
   * The ResourceMgr component helps you to browse and select external resources.
   * @exports ui/resourcemgr
   */

  var resourceMgr = {
    /**
     * Initialize the plugin.
     *
     * Called the jQuery way once registered by the Pluginifier.
     * @example $('selector').resourcemgr({
     *
     *  });
     *
     * @constructor
     * @param {Object} options - the plugin options
     * @param {Sring|Boolean} [options.bindEvent = 'click'] - the event that trigger the toggling
     * @param {String} options.url - the URL of the service used to retrieve the resources.
     * @fires ResourceMgr#create.resourcemgr
     * @returns {jQueryElement} for chaining
     */
    init: function init(options) {
      var self = resourceMgr; //get options using default

      options = _.defaults(options, defaults);
      return this.each(function () {
        var $elt = $$1(this);
        var $target;

        if (!$elt.data(dataNs)) {
          //add data to the element
          $elt.data(dataNs, options); //auto bind events configured in options

          _.functions(options).forEach(function (eventName) {
            $elt.on(eventName + '.' + ns, function () {
              options[eventName].apply($elt, arguments);
            });
          });

          $target = options.$target || self._createTarget($elt);
          $target.modal({
            startClosed: true,
            minWidth: 'responsive'
          }); //rethrow some events

          $target.on('select.' + ns, function (e, files) {
            self._close($elt);

            $elt.trigger(e, [files]);
          });
          $target.on('closed.modal', function () {
            $elt.trigger('close.' + ns);
          }); //initialize the components

          var $fileBrowser = $$1('.file-browser .file-browser-wrapper', $target);

          if (options.mediaSourcesUrl) {
            $$1.getJSON(options.mediaSourcesUrl).done(function (data) {
              var mediaSources = data || defaults.mediaSources;

              for (var i = 0; i < mediaSources.length; i++) {
                options.root = mediaSources[i].root;
                options.path = mediaSources[i].path;
                $fileBrowser.append('<div class="' + options.root + '"><ul class="folders"></ul></div>');
                fileBrowser(options);
              }
            }).fail(function () {
              for (var i = 0; i < defaults.mediaSources.length; i++) {
                options.root = defaults.mediaSources[i].root;
                options.path = defaults.mediaSources[i].path;
                $fileBrowser.append('<div class="' + options.root + '"><ul class="folders"></ul></div>');
                fileBrowser(options);
              }
            });
          } else if (options.path && options.root) {
            $fileBrowser.append('<div class="' + options.root + '"><ul class="folders"></ul></div>');
            fileBrowser(options);
          }

          $fileBrowser.find('li.root:last').addClass('active');
          fileSelector(options);
          filePreview(options);
          /**
           * The plugin have been created.
           * @event ResourceMgr#create.resourcemgr
           */

          $elt.trigger('create.' + ns, [$target[0]]);

          if (options.open) {
            self._open($elt);
          }
        } else {
          options = $elt.data(dataNs);

          if (options.open) {
            self._open($elt);
          }
        }
      });
    },
    _createTarget: function _createTarget($elt) {
      var options = $elt.data(dataNs);

      if (options) {
        //create an identifier to the target content
        options.targetId = 'resourcemgr-' + $$1(document).find('.resourcemgr').length; //generate

        options.$target = $$1(layout({
          title: options.title || ''
        }));
        options.$target.attr('id', options.targetId).css('display', 'none').appendTo(options.appendContainer);
        $elt.data(dataNs, options);
      }

      return options.$target;
    },
    _open: function _open($elt) {
      var options = $elt.data(dataNs);

      if (options && options.$target) {
        options.$target.modal('open');
        /**
         * Open the resource manager.
         * @event ResourceMgr#open.resourcemgr
         */

        $elt.trigger('open.' + ns);
      }
    },
    _close: function _close($elt) {
      var options = $elt.data(dataNs);

      if (options && options.$target) {
        options.$target.modal('close');
      }
    },

    /**
     * Destroy completely the plugin.
     *
     * Called the jQuery way once registered by the Pluginifier.
     * @example $('selector').resourcemgr('destroy');
     * @public
     */
    destroy: function destroy() {
      this.each(function () {
        var $elt = $$1(this);
        var options = $elt.data(dataNs);
        $elt.data(dataNs, null);

        if (options.bindEvent !== undefined && options.bindEvent !== false) {
          $elt.off(options.bindEvent);
        }

        if (options.targetId) {
          $$1('#' + options.targetId).remove();
        }

        $$1(window).off('resize.resourcemgr');
        /**
         * The plugin have been destroyed.
         * @event ResourceMgr#destroy.resourcemgr
         */

        $elt.trigger('destroy.' + ns);
      });
    }
  }; //Register the resourcemgr to behave as a jQuery plugin.

  Pluginifier.register(ns, resourceMgr);

});
