define(['jquery', 'lodash', 'ui/component', 'ui/mediaEditor/plugins/mediaDimension/mediaDimensionComponent', 'handlebars', 'i18n', 'lib/dompurify/purify'], function ($$1, _, component, mediaDimensionComponent, Handlebars, __, DOMPurify) { 'use strict';

  $$1 = $$1 && $$1.hasOwnProperty('default') ? $$1['default'] : $$1;
  _ = _ && _.hasOwnProperty('default') ? _['default'] : _;
  component = component && component.hasOwnProperty('default') ? component['default'] : component;
  mediaDimensionComponent = mediaDimensionComponent && mediaDimensionComponent.hasOwnProperty('default') ? mediaDimensionComponent['default'] : mediaDimensionComponent;
  Handlebars = Handlebars && Handlebars.hasOwnProperty('default') ? Handlebars['default'] : Handlebars;
  __ = __ && __.hasOwnProperty('default') ? __['default'] : __;
  DOMPurify = DOMPurify && DOMPurify.hasOwnProperty('default') ? DOMPurify['default'] : DOMPurify;

  function _typeof(obj) {
    "@babel/helpers - typeof";

    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function Helpers0 (hb) {
    //register a i18n helper
    hb.registerHelper('__', function (key) {
      return __(key);
    });
    /**
     * Register dompurify helper
     *
     * https://github.com/cure53/DOMPurify
     * with config SAFE_FOR_TEMPLATES: true
     * to make output safe for template systems
     */

    hb.registerHelper('dompurify', function (context) {
      return DOMPurify.sanitize(context);
    });
    /**
     * Register join helper
     *
     * Example :
     * var values = {a:v1, b:v2, c:v3};
     * Using {{{join attributes '=' ' ' '"'}}} will return : a="v1" b="v2" c="v3"
     * Using {{{join values null ' or ' '*'}}} will return : *v1* or *v2* or *v3*
     */

    hb.registerHelper('join', function (arr, keyValueGlue, fragmentGlue, wrapper) {
      var fragments = [];
      keyValueGlue = typeof keyValueGlue === 'string' ? keyValueGlue : undefined;
      fragmentGlue = typeof fragmentGlue === 'string' ? fragmentGlue : ' ';
      wrapper = typeof wrapper === 'string' ? wrapper : '"';

      _.forIn(arr, function (value, key) {
        var fragment = '';

        if (value !== null || value !== undefined) {
          if (typeof value === 'boolean') {
            value = value ? 'true' : 'false';
          } else if (_typeof(value) === 'object') {
            value = _.values(value).join(' ');
          }
        } else {
          value = '';
        }

        if (keyValueGlue !== undefined) {
          fragment += key + keyValueGlue;
        }

        fragment += wrapper + value + wrapper;
        fragments.push(fragment);
      });

      return fragments.join(fragmentGlue);
    }); //register a classic "for loop" helper
    //it also adds a local variable "i" as the index in each iteration loop

    hb.registerHelper('for', function (startIndex, stopIndex, increment, options) {
      var ret = '';
      startIndex = parseInt(startIndex);
      stopIndex = parseInt(stopIndex);
      increment = parseInt(increment);

      for (var i = startIndex; i < stopIndex; i += increment) {
        ret += options.fn(_.extend({}, this, {
          i: i
        }));
      }

      return ret;
    });
    hb.registerHelper('equal', function (var1, var2, options) {
      if (var1 == var2) {
        return options.fn(this);
      } else {
        return options.inverse(this);
      }
    }); // register a "get property" helper
    // it gets the named property from the provided context

    hb.registerHelper('property', function (name, context) {
      return context[name] || '';
    }); // register an 'includes' helper
    // it checks if value is in array

    hb.registerHelper('includes', function (haystack, needle, options) {
      if (_.contains(haystack, needle)) {
        return options.fn(this);
      }
    });
  }

  if (!Helpers0.__initialized) {
    Helpers0(Handlebars);
    Helpers0.__initialized = true;
  }
  var Template = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
    this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
    var buffer = "", stack1, self=this;

  function program1(depth0,data) {
    
    
    return "<div class=\"media-align\"></div>";
    }

  function program3(depth0,data) {
    
    
    return "<div class=\"media-dimension\"></div>";
    }

    buffer += "<div class=\"media-editor\">\n    ";
    stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.mediaAlignment)),stack1 == null || stack1 === false ? stack1 : stack1.active), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
    if(stack1 || stack1 === 0) { buffer += stack1; }
    buffer += "\n    ";
    stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.mediaDimension)),stack1 == null || stack1 === false ? stack1 : stack1.active), {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});
    if(stack1 || stack1 === 0) { buffer += stack1; }
    buffer += "\n</div>\n";
    return buffer;
    });
  function tpl(data, options, asString) {
    var html = Template(data, options);
    return (asString || true) ? html : $(html);
  }

  /**
   * This program is free software; you can redistribute it and/or
   * modify it under the terms of the GNU General Public License
   * as published by the Free Software Foundation; under version 2
   * of the License (non-upgradable).
   *
   * This program is distributed in the hope that it will be useful,
   * but WITHOUT ANY WARRANTY; without even the implied warranty of
   * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   * GNU General Public License for more details.
   *
   * You should have received a copy of the GNU General Public License
   * along with this program; if not, write to the Free Software
   * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
   *
   * Copyright (c) 2018  (original work) Open Assessment Technologies SA;
   *
   * @author Oleksander Zagovorychev <zagovorichev@gmail.com>
   */
  /**
   * @typedef {Object} mediaObject
   * @property $node
   * @property $container
   * @property type
   * @property src
   * @property width
   * @property height
   */

  /**
   * @typedef {Object} mediaEditorConfig
   * @property mediaDimension {{active: boolean}}
   * @property mediaAlignment {{active: boolean}}
   */

  /**
   * target - jQuery element with media $()
   * container - container to which an target is attached
   *
   * @type mediaEditorConfig
   * @private
   */

  var defaultConfig = {
    mediaDimension: {
      active: false
    }
  };
  /**
   * Creates media editor
   *
   * @param {Object} $container - jQuery pointer
   * @param {mediaObject} media
   * @param {mediaEditorConfig} config
   * @returns {component|*}
   */

  function mediaEditorFactory($container, media, config) {
    /**
     * Active Plugins
     * @type {Array}
     */
    var plugins = [];
    /**
     * Current component
     */

    var mediaEditorComponent = component({}, defaultConfig);
    mediaEditorComponent.setTemplate(tpl).on('init', function () {
      if (!media || !media.$node || !media.$node.length) {
        throw new Error('mediaEditorComponent requires media.$node');
      }

      if (!media || !media.$container || !media.$container.length) {
        throw new Error('mediaEditorComponent requires media.$container');
      }

      this.render($container);
    }).on('render', function () {
      var self = this;
      var $dimensionTools = $$1('.media-dimension', this.getTemplate());
      var plugin;

      if (this.getConfig().mediaDimension.active) {
        plugin = mediaDimensionComponent($dimensionTools, media, {
          responsive: media.responsive
        }).on('change', function (conf) {
          media.responsive = conf.responsive;

          if (conf.responsive) {
            // percent
            media.width = conf.sizeProps['%'].current.width;
            media.height = null;
          } else {
            media.width = conf.sizeProps.px.current.width;
            media.height = conf.sizeProps.px.current.height;
          }

          self.trigger('change', media);
        });
        plugins.push(plugin);
      }
    }).on('destroy', function () {
      _.forEach(plugins, function (plugin) {
        plugin.destroy();
      });
    });

    _.defer(function () {
      mediaEditorComponent.init(config);
    });

    return mediaEditorComponent;
  }

  return mediaEditorFactory;

});
