define(['core/store'], function (store) { 'use strict';

    store = store && store.hasOwnProperty('default') ? store['default'] : store;

    /**
     * This program is free software; you can redistribute it and/or
     * modify it under the terms of the GNU General Public License
     * as published by the Free Software Foundation; under version 2
     * of the License (non-upgradable).
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU General Public License
     * along with this program; if not, write to the Free Software
     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
     *
     * Copyright (c) 2019 (original work) Open Assessment Technologies SA ;
     */
    /**
     * @param {Object} options - Factory options
     * @param {string} options.namespace - Namespace of the store
     * @returns {Object} Store API
     */

    var jwtTokenStoreFactory = function jwtTokenStoreFactory() {
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref$namespace = _ref.namespace,
          namespace = _ref$namespace === void 0 ? 'global' : _ref$namespace;

      var storeName = "jwt.".concat(namespace);
      var accessTokenName = 'accessToken';
      var refreshTokenName = 'refreshToken';
      /**
       * Do not change token stores, because of security reason.
       */

      var getAccessTokenStore = function getAccessTokenStore() {
        return store(storeName, store.backends.memory);
      };

      var getRefreshTokenStore = function getRefreshTokenStore() {
        return store(storeName, store.backends.sessionStorage);
      };

      return {
        /**
         * Set access token to the store
         * @param {string} token
         * @returns {Promise<Boolean>} token successfully set
         */
        setAccessToken: function setAccessToken(token) {
          return getAccessTokenStore().then(function (storage) {
            return storage.setItem(accessTokenName, token);
          });
        },

        /**
         * Get stored access token
         * @returns {Promise<string|null>} stored access token
         */
        getAccessToken: function getAccessToken() {
          return getAccessTokenStore().then(function (storage) {
            return storage.getItem(accessTokenName);
          });
        },

        /**
         * Set refresh token
         * @param {string} token
         * @returns {Promise<Boolean>} token successfully set
         */
        setRefreshToken: function setRefreshToken(token) {
          return getRefreshTokenStore().then(function (storage) {
            return storage.setItem(refreshTokenName, token);
          });
        },

        /**
         * Get stored refresh token
         * @returns {Promise<string|null>} stored refresh token
         */
        getRefreshToken: function getRefreshToken() {
          return getRefreshTokenStore().then(function (storage) {
            return storage.getItem(refreshTokenName);
          });
        },

        /**
         * Store access and refresh token
         * @param {string} accessToken
         * @param {string} refreshToken
         * @returns {Promise<Boolean>} Tokens successfully set
         */
        setTokens: function setTokens(accessToken, refreshToken) {
          return Promise.all([this.setAccessToken(accessToken), this.setRefreshToken(refreshToken)]).then(function () {
            return true;
          });
        },

        /**
         * Clear access token from store
         * @returns {Promise<Boolean>} token successfully cleared
         */
        clearAccessToken: function clearAccessToken() {
          return getAccessTokenStore().then(function (storage) {
            return storage.clear();
          });
        },

        /**
         * Clear refresh token from store
         * @returns {Promise<Boolean>} token successfully cleared
         */
        clearRefreshToken: function clearRefreshToken() {
          return getRefreshTokenStore().then(function (storage) {
            return storage.clear();
          });
        },

        /**
         * Clear the whole storage
         * @returns {Promise<Boolean>} tokens successfully cleared
         */
        clear: function clear() {
          return Promise.all([this.clearAccessToken(), this.clearRefreshToken()]).then(function () {
            return true;
          });
        }
      };
    };

    return jwtTokenStoreFactory;

});
