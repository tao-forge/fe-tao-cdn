define(['i18n', 'jquery', 'taoTests/runner/plugin', 'taoQtiTest/runner/helpers/isReviewPanelEnabled', 'lodash', 'ui/component', 'handlebars', 'ui/keyNavigation/navigator', 'ui/keyNavigation/navigableDomElement', 'util/shortcut', 'util/namespace'], function (__, $$1, pluginFactory, isReviewPanelEnabled, _, component, Handlebars, keyNavigator, navigableDomElement, shortcut, namespaceHelper) { 'use strict';

    __ = __ && Object.prototype.hasOwnProperty.call(__, 'default') ? __['default'] : __;
    $$1 = $$1 && Object.prototype.hasOwnProperty.call($$1, 'default') ? $$1['default'] : $$1;
    pluginFactory = pluginFactory && Object.prototype.hasOwnProperty.call(pluginFactory, 'default') ? pluginFactory['default'] : pluginFactory;
    isReviewPanelEnabled = isReviewPanelEnabled && Object.prototype.hasOwnProperty.call(isReviewPanelEnabled, 'default') ? isReviewPanelEnabled['default'] : isReviewPanelEnabled;
    _ = _ && Object.prototype.hasOwnProperty.call(_, 'default') ? _['default'] : _;
    component = component && Object.prototype.hasOwnProperty.call(component, 'default') ? component['default'] : component;
    Handlebars = Handlebars && Object.prototype.hasOwnProperty.call(Handlebars, 'default') ? Handlebars['default'] : Handlebars;
    keyNavigator = keyNavigator && Object.prototype.hasOwnProperty.call(keyNavigator, 'default') ? keyNavigator['default'] : keyNavigator;
    navigableDomElement = navigableDomElement && Object.prototype.hasOwnProperty.call(navigableDomElement, 'default') ? navigableDomElement['default'] : navigableDomElement;
    shortcut = shortcut && Object.prototype.hasOwnProperty.call(shortcut, 'default') ? shortcut['default'] : shortcut;
    namespaceHelper = namespaceHelper && Object.prototype.hasOwnProperty.call(namespaceHelper, 'default') ? namespaceHelper['default'] : namespaceHelper;

    /**
     * This program is free software; you can redistribute it and/or
     * modify it under the terms of the GNU General Public License
     * as published by the Free Software Foundation; under version 2
     * of the License (non-upgradable).
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU General Public License
     * along with this program; if not, write to the Free Software
     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
     *
     * Copyright (c) 2020 (original work) Open Assessment Technologies SA ;
     */
    /**
     * Returns factory-like object.
     *
     * @param {AreaBroker} broker
     *
     * @returns {Object} - when you access properties it returns the corresponding element and move the focus on it.
     *  List of availiable properties
     *      - question
     *      - navigation
     *      - toolbox
     *      - teststatus
     */

    var getJumpElementFactory = function getJumpElementFactory(broker) {
      return {
        get container() {
          return broker.getContainer();
        },

        get question() {
          return broker.getContainer().find('.content-wrapper').first();
        },

        get navigation() {
          return broker.getNavigationArea().find(':not(.hidden)[tabindex]').first();
        },

        get toolbox() {
          return broker.getToolboxArea().find(':not(.hidden)[tabindex]').first();
        },

        get teststatus() {
          return broker.getPanelArea().find(':not(.hidden)[tabindex]').first();
        }

      };
    };
    /**
     * Returns testrunner item status.
     *
     * @param {Object} item - testrunner item
     *
     * @returns {String} - localized string.
     */

    var getItemStatus = function getItemStatus(item) {
      if (item.flagged) {
        return __('Flagged for review');
      }

      if (item.answered) {
        return __('Answered');
      }

      if (item.viewed) {
        return __('Not answered');
      }

      return __('Not seen');
    };
    /**
     * Detects if review panel hidden or not.
     *
     * @param {TestRunner} testRunner
     *
     * @returns {Boolean}
     */

    var isReviewPanelHidden = function isReviewPanelHidden(testRunner) {
      return testRunner.getAreaBroker().getPanelArea().find('.qti-navigator').is('.hidden');
    };

    var Template = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
      this.compilerInfo = [4,'>= 1.0.0'];
    helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
      var buffer = "", stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, functionType="function", self=this;

    function program1(depth0,data) {
      
      
      return "hidden";
      }

      buffer += "<nav class=\"jump-links-box\" aria-label=\""
        + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Jump Menu", options) : helperMissing.call(depth0, "__", "Jump Menu", options)))
        + "\">\n    <ul>\n        <li class=\"jump-link-item\">\n            <button data-jump=\"question\" class=\"jump-link\" >"
        + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Jump to:", options) : helperMissing.call(depth0, "__", "Jump to:", options)))
        + " <b>"
        + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Question", options) : helperMissing.call(depth0, "__", "Question", options)))
        + " - ";
      if (helper = helpers.questionStatus) { stack1 = helper.call(depth0, {hash:{},data:data}); }
      else { helper = (depth0 && depth0.questionStatus); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
      buffer += escapeExpression(stack1)
        + "</b></button>\n        </li>\n        <li class=\"jump-link-item\">\n            <button data-jump=\"navigation\" class=\"jump-link\" >"
        + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Jump to:", options) : helperMissing.call(depth0, "__", "Jump to:", options)))
        + " <b>"
        + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Navigation", options) : helperMissing.call(depth0, "__", "Navigation", options)))
        + "</b></button>\n        </li>\n        <li class=\"jump-link-item\">\n            <button data-jump=\"toolbox\" class=\"jump-link\" >"
        + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Jump to:", options) : helperMissing.call(depth0, "__", "Jump to:", options)))
        + " <b>"
        + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Toolbox", options) : helperMissing.call(depth0, "__", "Toolbox", options)))
        + "</b></button>\n        </li>\n        <li class=\"jump-link-item ";
      stack1 = helpers.unless.call(depth0, (depth0 && depth0.isReviewPanelEnabled), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
      if(stack1 || stack1 === 0) { buffer += stack1; }
      buffer += "\" >\n            <button data-jump=\"teststatus\" class=\"jump-link\" >"
        + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Jump to:", options) : helperMissing.call(depth0, "__", "Jump to:", options)))
        + " <b>"
        + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Test Status and Structure", options) : helperMissing.call(depth0, "__", "Test Status and Structure", options)))
        + "</b></button>\n        </li>\n        <li class=\"jump-link-item\">\n            <button data-jump=\"shortcuts\" class=\"jump-link\" >"
        + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Jump to:", options) : helperMissing.call(depth0, "__", "Jump to:", options)))
        + " <b>"
        + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Open Keyboard Shortcuts", options) : helperMissing.call(depth0, "__", "Open Keyboard Shortcuts", options)))
        + "</b></button>\n        </li>\n    </ul>\n</nav>\n";
      return buffer;
      });
    function jumplinksTpl(data, options, asString) {
      var html = Template(data, options);
      return (asString || true) ? html : $(html);
    }

    /**
     * This program is free software; you can redistribute it and/or
     * modify it under the terms of the GNU General Public License
     * as published by the Free Software Foundation; under version 2
     * of the License (non-upgradable).
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU General Public License
     * along with this program; if not, write to the Free Software
     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
     *
     * Copyright (c) 2020 (original work) Open Assessment Technologies SA ;
     */
    /**
     * Default config values, see below.
     */

    var defaults = {};
    /**
     * Creates and initialize the jumplinks component.
     * Please not the component IS NOT rendered.
     * You'll have to render it by yourself.
     *
     * @returns {jumplinks} the component, initialized and rendered
     */

    function jumplinksFactory(config) {
      /**
       * @typedef {Object} jumplinksBox
       */
      var jumplinksBox = component({}, defaults).on('render', function () {
        var _this = this;

        // handle related Jump Links
        var behavior = [{
          selector: '[data-jump=question] ',
          eventName: 'jump',
          eventParam: 'question'
        }, {
          selector: '[data-jump=navigation]',
          eventName: 'jump',
          eventParam: 'navigation'
        }, {
          selector: '[data-jump=toolbox]',
          eventName: 'jump',
          eventParam: 'toolbox'
        }, {
          selector: '[data-jump=teststatus]',
          eventName: 'jump',
          eventParam: 'teststatus'
        }, {
          selector: '[data-jump=shortcuts]',
          eventName: 'shortcuts',
          eventParam: 'shortcuts'
        }];

        _.forEach(behavior, function (linkDescription) {
          var $link = _this.getElement().find(linkDescription.selector);

          var handleLink = function handleLink() {
            _this.trigger(linkDescription.eventName, linkDescription.eventParam);

            _this.getElement().find(':focus').blur();
          };

          if ($link) {
            $link.on('click', handleLink);
            $link.on('keyup', function (event) {
              var activationKeys = [32, 13]; // link can be activated by click or enter/space keys

              if (activationKeys.includes(event.keyCode)) {
                handleLink();
              }
            });
          }
        });
      });
      jumplinksBox.setTemplate(jumplinksTpl);

      _.defer(function () {
        jumplinksBox.init(config);
      });

      return jumplinksBox;
    }

    var Template$1 = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
      this.compilerInfo = [4,'>= 1.0.0'];
    helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
      var buffer = "", stack1, helper, options, functionType="function", escapeExpression=this.escapeExpression, self=this, helperMissing=helpers.helperMissing;

    function program1(depth0,data) {
      
      var buffer = "", stack1, helper;
      buffer += "\n        <div class=\"shortcuts-group-wrapper\">\n            <h3 class=\"shortcuts-group-title\">";
      if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }
      else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
      buffer += escapeExpression(stack1)
        + "</h3>\n            <ul class=\"shortcuts-group-list\">\n                ";
      stack1 = helpers.each.call(depth0, (depth0 && depth0.shortcuts), {hash:{},inverse:self.noop,fn:self.program(2, program2, data),data:data});
      if(stack1 || stack1 === 0) { buffer += stack1; }
      buffer += "\n            </ul>\n        </div>\n        ";
      return buffer;
      }
    function program2(depth0,data) {
      
      var buffer = "", stack1, helper;
      buffer += "\n                <li class=\"shortcut-item\">\n                    <span class=\"shortcut-item-shortcut\">\n                        <kbd>";
      if (helper = helpers.shortcut) { stack1 = helper.call(depth0, {hash:{},data:data}); }
      else { helper = (depth0 && depth0.shortcut); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
      buffer += escapeExpression(stack1)
        + "</kbd>\n                    </span>\n                    <span class=\"shortcut-item-action\">\n                        ";
      if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }
      else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
      buffer += escapeExpression(stack1)
        + "\n                    </span>\n                </li>\n                ";
      return buffer;
      }

      buffer += "<div class=\"shortcuts-list-wrapper\">\n    <div class=\"shortcuts-list\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"jumplinks/shortcuts-heading\"\n        aria-describedby=\"jumplinks/shortcuts-description\">\n        <h2 class=\"shortcuts-list-title\" id=\"jumplinks/shortcuts-heading\">\n            "
        + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Keyboard Navigation", options) : helperMissing.call(depth0, "__", "Keyboard Navigation", options)))
        + "\n        </h2>\n        <div id=\"jumplinks/shortcuts-description\">\n            <p class=\"shortcuts-list-description\">\n                "
        + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Keyboard shortcuts for the Accessibility Tools are available to the Test-taker.", options) : helperMissing.call(depth0, "__", "Keyboard shortcuts for the Accessibility Tools are available to the Test-taker.", options)))
        + "\n            </p>\n            <p class=\"shortcuts-list-description\">\n                "
        + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "You can magnify the content by up to 200%. Check your browser settings to find out how to do it.", options) : helperMissing.call(depth0, "__", "You can magnify the content by up to 200%. Check your browser settings to find out how to do it.", options)))
        + "\n            </p>\n        </div>\n        <button aria-label=\"Close dialog\" class=\"btn-close small\" data-control=\"close-btn\" type=\"button\">\n            <span class=\"icon-close\"></span>\n        </button>\n        ";
      stack1 = helpers.each.call(depth0, (depth0 && depth0.shortcutsGroups), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
      if(stack1 || stack1 === 0) { buffer += stack1; }
      buffer += "\n    </div>\n</div>\n";
      return buffer;
      });
    function shortcutsTpl(data, options, asString) {
      var html = Template$1(data, options);
      return (asString || true) ? html : $(html);
    }

    /**
     * This program is free software; you can redistribute it and/or
     * modify it under the terms of the GNU General Public License
     * as published by the Free Software Foundation; under version 2
     * of the License (non-upgradable).
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU General Public License
     * along with this program; if not, write to the Free Software
     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
     *
     * Copyright (c) 2020 (original work) Open Assessment Technologies SA ;
     */
    /**
     * Default config values, see below.
     */

    var defaults$1 = {
      shortcutsGroups: [{
        id: 'navigation-shortcuts',
        label: __('Navigation shortcuts'),
        shortcuts: [{
          id: 'next',
          shortcut: 'ALT + Shift + N',
          label: __('Go to the next question')
        }, {
          id: 'previous',
          shortcut: 'ALT + Shift + P',
          label: __('Go to the previous question')
        }, {
          id: 'current',
          shortcut: 'ALT + Shift + Q',
          label: __('Go to the current question')
        }, {
          id: 'top',
          shortcut: 'ALT + Shift + T',
          label: __('Go to the top of the page')
        }]
      }]
    };
    /**
     * Creates and initialize the shortcuts component.
     * Please not the component IS NOT rendered.
     * You'll have to render it by yourself.
     *
     * @param {Object} config
     * @returns {shortcutsBox} the component, initialized and rendered
     */

    function shortcutsBoxFactory(config) {
      var ESK_KEY_CODE = 27;
      var shortcutsBox = component({}, defaults$1).on('render', function () {
        var _this = this;

        var $element = this.getElement();
        var $closeBtn = $element.find('.btn-close');
        var $keyNavigationItems = this.getElement().find('.shortcuts-list, .btn-close');
        $closeBtn.on('click', function () {
          return _this.trigger('close');
        }); // handle overlay click

        $element.on('click', function (e) {
          if ($element.is(e.target)) {
            _this.trigger('close');
          }
        });
        $element.on('keyup', function (e) {
          if (e.keyCode === ESK_KEY_CODE) {
            _this.trigger('close');
          }
        });
        this.navigator = keyNavigator({
          elements: navigableDomElement.createFromDoms($keyNavigationItems),
          propagateTab: false
        }) // keep cursor at close button
        .on('tab', function () {
          this.setCursorAt(1);
        }).on('shift+tab', function () {
          this.setCursorAt(1);
        }) // prevent focus move from shortcuts modal
        .on('blur', function () {
          _.defer(function () {
            if (!_this.navigator.isFocused()) {
              _this.navigator.focus();
            }
          });
        }).on('activate', function (cursor) {
          cursor.navigable.getElement().click();
        });
        this.navigator.first();
      }).on('destroy', function () {
        this.navigator.destroy();
        this.getElement().remove();
      });
      shortcutsBox.setTemplate(shortcutsTpl);
      shortcutsBox.init(config);
      return shortcutsBox;
    }

    var Template$2 = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
      this.compilerInfo = [4,'>= 1.0.0'];
    helpers = this.merge(helpers, Handlebars.helpers);  


      return "<div class=\"jump-links-container\"></div>\n";
      });
    function containerTpl(data, options, asString) {
      var html = Template$2(data, options);
      return (asString || true) ? html : $(html);
    }

    /**
     * This program is free software; you can redistribute it and/or
     * modify it under the terms of the GNU General Public License
     * as published by the Free Software Foundation; under version 2
     * of the License (non-upgradable).
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU General Public License
     * along with this program; if not, write to the Free Software
     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
     *
     * Copyright (c) 2020 (original work) Open Assessment Technologies SA ;
     */
    /**
     * Creates the JumpLinks plugin.
     * adding jumplinks accessibility feature for quick navigation
     */

    var plugin = pluginFactory({
      name: 'jumplinks',

      /**
       * Initializes the plugin (called during runner's init)
       */
      init: function init() {
        var _this = this;

        var testRunner = this.getTestRunner();
        var item = testRunner.getCurrentItem();
        var config = {
          isReviewPanelEnabled: isReviewPanelEnabled(testRunner),
          questionStatus: getItemStatus(item)
        };
        var testRunnerOptions = testRunner.getOptions();
        var pluginShortcuts = (testRunnerOptions.shortcuts || {})[this.getName()] || {};
        var areaBroker = this.getAreaBroker();
        var getJumpElement = getJumpElementFactory(areaBroker);
        var shortcutsConfig = navigator.appVersion.indexOf("Mac") !== -1 ? {
          shortcutsGroups: [{
            id: 'navigation-shortcuts',
            label: __('Navigation shortcuts'),
            shortcuts: [{
              id: 'next',
              shortcut: 'OPTION + Shift + N',
              label: __('Go to the next question')
            }, {
              id: 'previous',
              shortcut: 'OPTION + Shift + P',
              label: __('Go to the previous question')
            }, {
              id: 'current',
              shortcut: 'OPTION + Shift + Q',
              label: __('Go to the current question')
            }, {
              id: 'top',
              shortcut: 'OPTION + Shift + T',
              label: __('Go to the top of the page')
            }]
          }]
        } : {};

        if (testRunnerOptions.allowShortcuts) {
          pluginShortcuts.goToTop && shortcut.add(namespaceHelper.namespaceAll(pluginShortcuts.goToTop, this.getName(), true), function () {
            $$1('[tabindex]').first().focus();
          }, {
            avoidInput: true,
            prevent: true
          });
          pluginShortcuts.goToQuestion && shortcut.add(namespaceHelper.namespaceAll(pluginShortcuts.goToQuestion, this.getName(), true), function () {
            getJumpElement.question.focus();
          }, {
            avoidInput: true,
            prevent: true
          });
        }

        this.jumplinks = jumplinksFactory(config).on('render', function () {
          _this.jumplinks.on('jump', function (jumpTo) {
            var $element = getJumpElement[jumpTo];
            $element.focus();
          });

          _this.jumplinks.on('shortcuts', function () {
            if (_this.shortcuts) {
              return;
            }

            _this.shortcuts = shortcutsBoxFactory(shortcutsConfig);

            _this.shortcuts.render(_this.getAreaBroker().getControlArea());

            _this.shortcuts.on('close', function () {
              _this.shortcuts.destroy();

              _this.shortcuts = null;
            });
          });
        }).on('update', function update(params) {
          this.trigger('changeReviewPanel', params.isReviewPanelEnabled);
          this.trigger('changeQuesitionStatus', params.questionStatus);
        }).on('changeReviewPanel', function changeReviewPanel(enabled) {
          var elem = this.getElement();
          var panelJumplink = elem.find('[data-jump="teststatus"]').parent();

          if (enabled) {
            panelJumplink.removeClass('hidden');
          } else {
            panelJumplink.addClass('hidden');
          }
        }).on('changeQuesitionStatus', function changeQuesitionStatus(questionStatus) {
          var elem = this.getElement();
          var text = "".concat(__('Question'), " - ").concat(questionStatus);
          elem.find('[data-jump="question"] > b').text(text);
        });
        testRunner.on('renderitem', function () {
          var currentItem = testRunner.getCurrentItem();
          var updatedConfig = {
            isReviewPanelEnabled: !isReviewPanelHidden(testRunner) && isReviewPanelEnabled(testRunner),
            questionStatus: getItemStatus(currentItem)
          };

          var announcedText = __('%s loaded', currentItem.label);

          var $announce = $$1('[aria-live=polite][role=alert]').first();

          if ($announce.length !== 1) {
            $announce = $$1('<div aria-live="polite" role="alert" class="visible-hidden"></div>');
            $$1('main').first().append($announce);
          }

          $announce.text(announcedText);

          _this.jumplinks.trigger('update', updatedConfig);
        }).on('tool-flagitem', function () {
          var currentItem = testRunner.getCurrentItem();
          var questionStatus = getItemStatus(Object.assign({}, currentItem, {
            flagged: !currentItem.flagged
          }));

          _this.jumplinks.trigger('changeQuesitionStatus', questionStatus);
        }).on('tool-reviewpanel', function () {
          var wasHidden = isReviewPanelHidden(testRunner);

          _this.jumplinks.trigger('changeReviewPanel', wasHidden);
        });
      },

      /**
       * Called during the runner's render phase
       */
      render: function render() {
        var jumplinksContainer = $$1(containerTpl());
        $$1('.content-wrap').prepend(jumplinksContainer);
        this.jumplinks.render(jumplinksContainer);
      }
    });

    return plugin;

});
