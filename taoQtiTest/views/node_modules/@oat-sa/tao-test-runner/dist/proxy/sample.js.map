{"version":3,"file":"sample.js","sources":["../../src/proxy/sample.js"],"sourcesContent":["/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016-2019 (original work) Open Assessment Technologies SA ;\n */\n/**\n * @author Jean-SÃ©bastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\n\n/**\n * Sample proxy definition\n * @type {Object}\n */\nvar sampleProxy = {\n    /**\n     * Initializes the proxy\n     * @returns {Promise} - Returns a promise. The proxy will be fully initialized on resolve.\n     *                      Any error will be provided if rejected.\n     */\n    init: function init() {\n        // the method must return a promise\n        return new Promise(function(resolve) {\n            // do initialisation\n            // once the proxy has been fully initialized notify the success by resolving the promise\n            resolve();\n\n            // you can also notify error by rejecting the promise\n            // reject(error);\n        });\n    },\n\n    /**\n     * Uninstalls the proxy\n     * @returns {Promise} - Returns a promise. The proxy will be fully uninstalled on resolve.\n     *                      Any error will be provided if rejected.\n     */\n    destroy: function destroy() {\n        // the method must return a promise\n        return new Promise(function(resolve) {\n            // do uninstall actions\n            // once the proxy has been fully uninstalled notify the success by resolving the promise\n            resolve();\n\n            // you can also notify error by rejecting the promise\n            // reject(error);\n        });\n    },\n\n    /**\n     * Gets the test definition data\n     * @param {Object} config - The config provided to the proxy factory\n     * @returns {Promise} - Returns a promise. The test definition data will be provided on resolve.\n     *                      Any error will be provided if rejected.\n     */\n    getTestData: function getTestData() {\n        // the method must return a promise\n        return new Promise(function(resolve) {\n            // get the test definition data\n\n            // once the action has been processed notify the success by resolving the promise\n            resolve(/* the test definition data */);\n\n            // you can also notify error by rejecting the promise\n            // reject(error);\n        });\n    },\n\n    /**\n     * Gets the test context\n     * @returns {Promise} - Returns a promise. The context object will be provided on resolve.\n     *                      Any error will be provided if rejected.\n     */\n    getTestContext: function getTestContext() {\n        // the method must return a promise\n        return new Promise(function(resolve) {\n            // get the test context object\n\n            // once the action has been processed notify the success by resolving the promise\n            resolve(/* the test context object */);\n\n            // you can also notify error by rejecting the promise\n            // reject(error);\n        });\n    },\n\n    /**\n     * Calls an action related to the test\n     * @param {String} action - The name of the action to call\n     * @param {Object} [params] - Some optional parameters to join to the call\n     * @returns {Promise} - Returns a promise. The result of the request will be provided on resolve.\n     *                      Any error will be provided if rejected.\n     */\n    callTestAction: function callTestAction() {\n        // the method must return a promise\n        return new Promise(function(resolve) {\n            // call the action\n\n            // once the action has been processed notify the success by resolving the promise\n            resolve(/* the action response */);\n\n            // you can also notify error by rejecting the promise\n            // reject(error);\n        });\n    },\n\n    /**\n     * Gets an item definition by its URI, also gets its current state\n     * @param {String} uri - The URI of the item to get\n     * @returns {Promise} - Returns a promise. The item data will be provided on resolve.\n     *                      Any error will be provided if rejected.\n     * @fires getItem\n     */\n    getItem: function getItem() {\n        // the method must return a promise\n        return new Promise(function(resolve) {\n            // get the definition data and the state of the item\n            // once the item data is loaded provide the data by resolving the promise\n            resolve(/* the item data */);\n\n            // you can also notify error by rejecting the promise\n            // reject(error);\n        });\n    },\n\n    /**\n     * Submits the state and the response of a particular item\n     * @param {String} uri - The URI of the item to update\n     * @param {Object} state - The state to submit\n     * @param {Object} response - The response object to submit\n     * @returns {Promise} - Returns a promise. The result of the request will be provided on resolve.\n     *                      Any error will be provided if rejected.\n     * @fires submitItem\n     */\n    submitItem: function submitItem() {\n        // the method must return a promise\n        return new Promise(function(resolve) {\n            // submit the state and the response of the item\n\n            // once the data has been processed notify the success by resolving the promise\n            resolve(/* the action response */);\n\n            // you can also notify error by rejecting the promise\n            // reject(error);\n        });\n    },\n\n    /**\n     * Calls an action related to a particular item\n     * @param {String} uri - The URI of the item for which call the action\n     * @param {String} action - The name of the action to call\n     * @param {Object} [params] - Some optional parameters to join to the call\n     * @returns {Promise} - Returns a promise. The result of the request will be provided on resolve.\n     *                      Any error will be provided if rejected.\n     */\n    callItemAction: function callItemAction() {\n        // the method must return a promise\n        return new Promise(function(resolve) {\n            // call the action\n\n            // once the action has been processed notify the success by resolving the promise\n            resolve(/* the action response */);\n\n            // you can also notify error by rejecting the promise\n            // reject(error);\n        });\n    },\n\n    /**\n     * Sends a telemetry signal\n     * @param {String} uri - The URI of the item for which sends the telemetry signal\n     * @param {String} signal - The name of the signal to send\n     * @param {Object} [params] - Some optional parameters to join to the signal\n     * @returns {Promise} - Returns a promise. The result of the request will be provided on resolve.\n     *                      Any error will be provided if rejected.\n     * @fires telemetry\n     */\n    telemetry: function telemetry() {\n        // the method must return a promise\n        return new Promise(function(resolve) {\n            // send the signal\n\n            // once the signal has been processed notify the success by resolving the promise\n            resolve(/* the signal response */);\n\n            // you can also notify error by rejecting the promise\n            // reject(error);\n        });\n    }\n};\n\nexport default sampleProxy;\n"],"names":["sampleProxy","init","Promise","resolve","destroy","getTestData","getTestContext","callTestAction","getItem","submitItem","callItemAction","telemetry"],"mappings":";;IAAA;;;;;;;;;;;;;;;;;;IAiBA;;;;IAIA;;;;IAIA,IAAIA,WAAW,GAAG;IACd;;;;;IAKAC,EAAAA,IAAI,EAAE,SAASA,IAAT,GAAgB;IAClB;IACA,WAAO,IAAIC,OAAJ,CAAY,UAASC,OAAT,EAAkB;IACjC;IACA;IACAA,MAAAA,OAAO,GAH0B;IAMjC;IACH,KAPM,CAAP;IAQH,GAhBa;;IAkBd;;;;;IAKAC,EAAAA,OAAO,EAAE,SAASA,OAAT,GAAmB;IACxB;IACA,WAAO,IAAIF,OAAJ,CAAY,UAASC,OAAT,EAAkB;IACjC;IACA;IACAA,MAAAA,OAAO,GAH0B;IAMjC;IACH,KAPM,CAAP;IAQH,GAjCa;;IAmCd;;;;;;IAMAE,EAAAA,WAAW,EAAE,SAASA,WAAT,GAAuB;IAChC;IACA,WAAO,IAAIH,OAAJ,CAAY,UAASC,OAAT,EAAkB;IACjC;IAEA;IACAA,MAAAA,OAAO,GAJ0B;IAOjC;IACH,KARM,CAAP;IASH,GApDa;;IAsDd;;;;;IAKAG,EAAAA,cAAc,EAAE,SAASA,cAAT,GAA0B;IACtC;IACA,WAAO,IAAIJ,OAAJ,CAAY,UAASC,OAAT,EAAkB;IACjC;IAEA;IACAA,MAAAA,OAAO,GAJ0B;IAOjC;IACH,KARM,CAAP;IASH,GAtEa;;IAwEd;;;;;;;IAOAI,EAAAA,cAAc,EAAE,SAASA,cAAT,GAA0B;IACtC;IACA,WAAO,IAAIL,OAAJ,CAAY,UAASC,OAAT,EAAkB;IACjC;IAEA;IACAA,MAAAA,OAAO,GAJ0B;IAOjC;IACH,KARM,CAAP;IASH,GA1Fa;;IA4Fd;;;;;;;IAOAK,EAAAA,OAAO,EAAE,SAASA,OAAT,GAAmB;IACxB;IACA,WAAO,IAAIN,OAAJ,CAAY,UAASC,OAAT,EAAkB;IACjC;IACA;IACAA,MAAAA,OAAO,GAH0B;IAMjC;IACH,KAPM,CAAP;IAQH,GA7Ga;;IA+Gd;;;;;;;;;IASAM,EAAAA,UAAU,EAAE,SAASA,UAAT,GAAsB;IAC9B;IACA,WAAO,IAAIP,OAAJ,CAAY,UAASC,OAAT,EAAkB;IACjC;IAEA;IACAA,MAAAA,OAAO,GAJ0B;IAOjC;IACH,KARM,CAAP;IASH,GAnIa;;IAqId;;;;;;;;IAQAO,EAAAA,cAAc,EAAE,SAASA,cAAT,GAA0B;IACtC;IACA,WAAO,IAAIR,OAAJ,CAAY,UAASC,OAAT,EAAkB;IACjC;IAEA;IACAA,MAAAA,OAAO,GAJ0B;IAOjC;IACH,KARM,CAAP;IASH,GAxJa;;IA0Jd;;;;;;;;;IASAQ,EAAAA,SAAS,EAAE,SAASA,SAAT,GAAqB;IAC5B;IACA,WAAO,IAAIT,OAAJ,CAAY,UAASC,OAAT,EAAkB;IACjC;IAEA;IACAA,MAAAA,OAAO,GAJ0B;IAOjC;IACH,KARM,CAAP;IASH;IA9Ka,CAAlB;;;;;;;;"}