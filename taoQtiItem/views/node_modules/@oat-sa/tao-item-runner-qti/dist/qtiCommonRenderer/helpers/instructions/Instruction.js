define(['lodash', 'taoQtiItem/qtiItem/helper/util', 'handlebars', 'i18n', 'lib/dompurify/purify'], function (_, util, Handlebars, __, DOMPurify) { 'use strict';

    _ = _ && _.hasOwnProperty('default') ? _['default'] : _;
    util = util && util.hasOwnProperty('default') ? util['default'] : util;
    Handlebars = Handlebars && Handlebars.hasOwnProperty('default') ? Handlebars['default'] : Handlebars;
    __ = __ && __.hasOwnProperty('default') ? __['default'] : __;
    DOMPurify = DOMPurify && DOMPurify.hasOwnProperty('default') ? DOMPurify['default'] : DOMPurify;

    /**
     * This program is free software; you can redistribute it and/or
     * modify it under the terms of the GNU General Public License
     * as published by the Free Software Foundation; under version 2
     * of the License (non-upgradable).
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU General Public License
     * along with this program; if not, write to the Free Software
     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
     *
     * Copyright (c) 2013-2019 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);
     *
     *
     */

    var Helpers0 = hb => {
        //register a i18n helper
        hb.registerHelper('__', function(key) {
            return __(key);
        });

        /**
         * Register dompurify helper
         *
         * https://github.com/cure53/DOMPurify
         * with config SAFE_FOR_TEMPLATES: true
         * to make output safe for template systems
         */
        hb.registerHelper('dompurify', function(context) {
            return DOMPurify.sanitize(context);
        });

        /**
         * Register join helper
         *
         * Example :
         * var values = {a:v1, b:v2, c:v3};
         * Using {{{join attributes '=' ' ' '"'}}} will return : a="v1" b="v2" c="v3"
         * Using {{{join values null ' or ' '*'}}} will return : *v1* or *v2* or *v3*
         */
        hb.registerHelper('join', function(arr, keyValueGlue, fragmentGlue, wrapper) {
            var fragments = [];

            keyValueGlue = typeof keyValueGlue === 'string' ? keyValueGlue : undefined;
            fragmentGlue = typeof fragmentGlue === 'string' ? fragmentGlue : ' ';
            wrapper = typeof wrapper === 'string' ? wrapper : '"';

            _.forIn(arr, function(value, key) {
                var fragment = '';
                if (value !== null || value !== undefined) {
                    if (typeof value === 'boolean') {
                        value = value ? 'true' : 'false';
                    } else if (typeof value === 'object') {
                        value = _.values(value).join(' ');
                    }
                } else {
                    value = '';
                }
                if (keyValueGlue !== undefined) {
                    fragment += key + keyValueGlue;
                }
                fragment += wrapper + value + wrapper;
                fragments.push(fragment);
            });

            return fragments.join(fragmentGlue);
        });

        //register a classic "for loop" helper
        //it also adds a local variable "i" as the index in each iteration loop
        hb.registerHelper('for', function(startIndex, stopIndex, increment, options) {
            var ret = '';
            startIndex = parseInt(startIndex);
            stopIndex = parseInt(stopIndex);
            increment = parseInt(increment);

            for (var i = startIndex; i < stopIndex; i += increment) {
                ret += options.fn(_.extend({}, this, { i: i }));
            }

            return ret;
        });

        hb.registerHelper('equal', function(var1, var2, options) {
            if (var1 == var2) {
                return options.fn(this);
            } else {
                return options.inverse(this);
            }
        });

        // register a "get property" helper
        // it gets the named property from the provided context
        hb.registerHelper('property', function(name, context) {
            return context[name] || '';
        });

        // register an 'includes' helper
        // it checks if value is in array
        hb.registerHelper('includes', function(haystack, needle, options) {
            if (_.contains(haystack, needle)) {
                return options.fn(this);
            }
        });
    };

    if (!Helpers0.__initialized) {
      Helpers0(Handlebars);
      Helpers0.__initialized = true;
    }
    var Template = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
      this.compilerInfo = [4,'>= 1.0.0'];
    helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
      var buffer = "", stack1, helper, functionType="function", escapeExpression=this.escapeExpression, self=this;

    function program1(depth0,data) {
      
      var buffer = "", stack1;
      buffer += " lang=\""
        + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.attributes)),stack1 == null || stack1 === false ? stack1 : stack1['xml:lang'])),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
        + "\"";
      return buffer;
      }

      buffer += "<div id=\"";
      if (helper = helpers.serial) { stack1 = helper.call(depth0, {hash:{},data:data}); }
      else { helper = (depth0 && depth0.serial); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
      buffer += escapeExpression(stack1)
        + "\" class=\"small feedback-info item-instruction\"";
      stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.attributes)),stack1 == null || stack1 === false ? stack1 : stack1['xml:lang']), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
      if(stack1 || stack1 === 0) { buffer += stack1; }
      buffer += ">\n    <span class=\"icon-info icon\"></span><span class=\"instruction-message\">";
      if (helper = helpers.message) { stack1 = helper.call(depth0, {hash:{},data:data}); }
      else { helper = (depth0 && depth0.message); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
      buffer += escapeExpression(stack1)
        + "</span>\n</div>";
      return buffer;
      });
    function instructionTpl(data, options, asString) {
      var html = Template(data, options);
      return (asString || true) ? html : $(html);
    }

    var _notificationLevels = ['info', 'warning', 'error', 'success'];

    var Instruction = function(interaction, message, callback) {
        this.interaction = interaction;
        this.defaultMessage = message || '';
        this.currentMessage = '';
        this.level = 'info';
        this.serial = util.buildSerial('instruction_');
        this.callback = callback;
        this.$dom = null;
        this.state = false;
    };

    Instruction.isValidLevel = function(level) {
        return _.indexOf(_notificationLevels, level) >= 0;
    };

    Instruction.prototype.setState = function(state) {
        this.state = state;
    };

    Instruction.prototype.checkState = function(state) {
        return this.state === state;
    };

    Instruction.prototype.getId = function() {
        return this.serial;
    };

    Instruction.prototype.create = function($container) {
        $container.append(
            instructionTpl({
                message: this.defaultMessage,
                serial: this.serial
            })
        );

        this.$dom = $container.find('#' + this.serial);
    };

    Instruction.prototype.update = function(options) {
        var level = options && options.level ? options.level : '',
            message = options && options.message ? options.message : '',
            timeout = options && options.timeout ? options.timeout : 0,
            start = options && typeof options.start === 'function' ? options.start : null,
            stop = options && typeof options.stop === 'function' ? options.stop : null;

        if (level && Instruction.isValidLevel(level)) {
            this.$dom.removeClass('feedback-' + this.level).addClass('feedback-' + level);
            this.$dom
                .find('.icon')
                .removeClass('icon-' + this.level)
                .addClass('icon-' + level);
            this.level = level;
        }

        if (message) {
            this.$dom.find('.instruction-message').html(message);
            this.currentMessage = message;
        }

        if (timeout) {
            var _this = this;
            if (start) {
                start.call(_this);
            }
            _this.timer = setTimeout(function() {
                if (stop) {
                    stop.call(_this);
                }
                _this.timer = null;
            }, timeout);
        }
    };

    Instruction.prototype.setLevel = function(level, timeout) {
        var options = {
            level: level
        };

        if (timeout) {
            options.timeout = parseInt(timeout);
            options.stop = function() {
                this.setLevel('info');
            };
        }

        this.update(options);
    };

    Instruction.prototype.getLevel = function() {
        return this.level;
    };

    Instruction.prototype.setMessage = function(message, timeout) {
        this.update({ message: message, timeout: timeout });
    };

    Instruction.prototype.reset = function() {
        this.update({ level: 'info', message: this.defaultMessage });
        this.state = false;
    };

    Instruction.prototype.validate = function(data) {
        if (typeof this.callback === 'function') {
            this.callback.call(this, data);
        }
    };

    return Instruction;

});
