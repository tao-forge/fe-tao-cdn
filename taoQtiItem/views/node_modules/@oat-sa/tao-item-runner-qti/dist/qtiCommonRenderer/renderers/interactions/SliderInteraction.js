define(['jquery', 'lodash', 'i18n', 'handlebars', 'lib/dompurify/purify', 'taoQtiItem/qtiCommonRenderer/helpers/container', 'taoQtiItem/qtiCommonRenderer/helpers/PciResponse', 'nouislider'], function ($$1, _, __, Handlebars, DOMPurify, containerHelper, pciResponse, nouislider) { 'use strict';

    $$1 = $$1 && $$1.hasOwnProperty('default') ? $$1['default'] : $$1;
    _ = _ && _.hasOwnProperty('default') ? _['default'] : _;
    __ = __ && __.hasOwnProperty('default') ? __['default'] : __;
    Handlebars = Handlebars && Handlebars.hasOwnProperty('default') ? Handlebars['default'] : Handlebars;
    DOMPurify = DOMPurify && DOMPurify.hasOwnProperty('default') ? DOMPurify['default'] : DOMPurify;
    containerHelper = containerHelper && containerHelper.hasOwnProperty('default') ? containerHelper['default'] : containerHelper;
    pciResponse = pciResponse && pciResponse.hasOwnProperty('default') ? pciResponse['default'] : pciResponse;

    /**
     * This program is free software; you can redistribute it and/or
     * modify it under the terms of the GNU General Public License
     * as published by the Free Software Foundation; under version 2
     * of the License (non-upgradable).
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU General Public License
     * along with this program; if not, write to the Free Software
     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
     *
     * Copyright (c) 2013-2019 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);
     *
     *
     */

    var Helpers0 = hb => {
        //register a i18n helper
        hb.registerHelper('__', function(key) {
            return __(key);
        });

        /**
         * Register dompurify helper
         *
         * https://github.com/cure53/DOMPurify
         * with config SAFE_FOR_TEMPLATES: true
         * to make output safe for template systems
         */
        hb.registerHelper('dompurify', function(context) {
            return DOMPurify.sanitize(context);
        });

        /**
         * Register join helper
         *
         * Example :
         * var values = {a:v1, b:v2, c:v3};
         * Using {{{join attributes '=' ' ' '"'}}} will return : a="v1" b="v2" c="v3"
         * Using {{{join values null ' or ' '*'}}} will return : *v1* or *v2* or *v3*
         */
        hb.registerHelper('join', function(arr, keyValueGlue, fragmentGlue, wrapper) {
            var fragments = [];

            keyValueGlue = typeof keyValueGlue === 'string' ? keyValueGlue : undefined;
            fragmentGlue = typeof fragmentGlue === 'string' ? fragmentGlue : ' ';
            wrapper = typeof wrapper === 'string' ? wrapper : '"';

            _.forIn(arr, function(value, key) {
                var fragment = '';
                if (value !== null || value !== undefined) {
                    if (typeof value === 'boolean') {
                        value = value ? 'true' : 'false';
                    } else if (typeof value === 'object') {
                        value = _.values(value).join(' ');
                    }
                } else {
                    value = '';
                }
                if (keyValueGlue !== undefined) {
                    fragment += key + keyValueGlue;
                }
                fragment += wrapper + value + wrapper;
                fragments.push(fragment);
            });

            return fragments.join(fragmentGlue);
        });

        //register a classic "for loop" helper
        //it also adds a local variable "i" as the index in each iteration loop
        hb.registerHelper('for', function(startIndex, stopIndex, increment, options) {
            var ret = '';
            startIndex = parseInt(startIndex);
            stopIndex = parseInt(stopIndex);
            increment = parseInt(increment);

            for (var i = startIndex; i < stopIndex; i += increment) {
                ret += options.fn(_.extend({}, this, { i: i }));
            }

            return ret;
        });

        hb.registerHelper('equal', function(var1, var2, options) {
            if (var1 == var2) {
                return options.fn(this);
            } else {
                return options.inverse(this);
            }
        });

        // register a "get property" helper
        // it gets the named property from the provided context
        hb.registerHelper('property', function(name, context) {
            return context[name] || '';
        });

        // register an 'includes' helper
        // it checks if value is in array
        hb.registerHelper('includes', function(haystack, needle, options) {
            if (_.contains(haystack, needle)) {
                return options.fn(this);
            }
        });
    };

    if (!Helpers0.__initialized) {
      Helpers0(Handlebars);
      Helpers0.__initialized = true;
    }
    var Template = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
      this.compilerInfo = [4,'>= 1.0.0'];
    helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
      var buffer = "", stack1, helper, functionType="function", escapeExpression=this.escapeExpression, self=this;

    function program1(depth0,data) {
      
      var buffer = "", stack1;
      buffer += "id=\""
        + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.attributes)),stack1 == null || stack1 === false ? stack1 : stack1.id)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
        + "\"";
      return buffer;
      }

    function program3(depth0,data) {
      
      var buffer = "", stack1;
      buffer += " "
        + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.attributes)),stack1 == null || stack1 === false ? stack1 : stack1['class'])),typeof stack1 === functionType ? stack1.apply(depth0) : stack1));
      return buffer;
      }

    function program5(depth0,data) {
      
      var buffer = "", stack1;
      buffer += " lang=\""
        + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.attributes)),stack1 == null || stack1 === false ? stack1 : stack1['xml:lang'])),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
        + "\"";
      return buffer;
      }

    function program7(depth0,data) {
      
      var stack1, helper;
      if (helper = helpers.prompt) { stack1 = helper.call(depth0, {hash:{},data:data}); }
      else { helper = (depth0 && depth0.prompt); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
      if(stack1 || stack1 === 0) { return stack1; }
      else { return ''; }
      }

      buffer += "<div ";
      stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.attributes)),stack1 == null || stack1 === false ? stack1 : stack1.id), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
      if(stack1 || stack1 === 0) { buffer += stack1; }
      buffer += " class=\"qti-interaction qti-blockInteraction qti-sliderInteraction";
      stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.attributes)),stack1 == null || stack1 === false ? stack1 : stack1['class']), {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});
      if(stack1 || stack1 === 0) { buffer += stack1; }
      buffer += "\" data-serial=\"";
      if (helper = helpers.serial) { stack1 = helper.call(depth0, {hash:{},data:data}); }
      else { helper = (depth0 && depth0.serial); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
      buffer += escapeExpression(stack1)
        + "\" data-qti-class=\"sliderInteraction\"";
      stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.attributes)),stack1 == null || stack1 === false ? stack1 : stack1['xml:lang']), {hash:{},inverse:self.noop,fn:self.program(5, program5, data),data:data});
      if(stack1 || stack1 === 0) { buffer += stack1; }
      buffer += " >\r\n    ";
      stack1 = helpers['if'].call(depth0, (depth0 && depth0.prompt), {hash:{},inverse:self.noop,fn:self.program(7, program7, data),data:data});
      if(stack1 || stack1 === 0) { buffer += stack1; }
      buffer += "\r\n    <div class=\"instruction-container\"></div>\r\n</div>\r\n";
      return buffer;
      });
    function tpl(data, options, asString) {
      var html = Template(data, options);
      return (asString || true) ? html : $(html);
    }

    /*
     * This program is free software; you can redistribute it and/or
     * modify it under the terms of the GNU General Public License
     * as published by the Free Software Foundation; under version 2
     * of the License (non-upgradable).
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU General Public License
     * along with this program; if not, write to the Free Software
     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
     *
     * Copyright (c) 2014 (original work) Open Assessment Technlogies SA (under the project TAO-PRODUCT);
     *
     */

    var _slideTo = function(options) {
        options.sliderCurrentValue.find('.qti-slider-cur-value').text(options.value);
        options.sliderValue.val(options.value);
    };

    /**
     * Init rendering, called after template injected into the DOM
     * All options are listed in the QTI v2.1 information model:
     * http://www.imsglobal.org/question/qtiv2p1/imsqti_infov2p1.html#element10333
     *
     * @param {object} interaction
     */
    const render = function(interaction) {
        const attributes = interaction.getAttributes(),
            $container = interaction.getContainer(),
            $el = $$1('<div />').attr({ id: `${attributes.responseIdentifier}-qti-slider`, class: 'qti-slider' }), //slider element
            $sliderLabels = $$1('<div />').attr({ class: 'qti-slider-values' }),
            $sliderCurrentValue = $$1('<div />').attr({
                id: `${attributes.responseIdentifier}-qti-slider-cur-value`,
                class: 'qti-slider-cur-value'
            }), //show the current selected value
            $sliderValue = $$1('<input />').attr({ type: 'hidden', id: `${attributes.responseIdentifier}-qti-slider-value`, class: 'qti-slider-value' }); //the input that always holds the slider value

        //getting the options
        let orientation = 'horizontal';
        const reverse = typeof attributes.reverse !== 'undefined' && attributes.reverse ? true : false, //setting the slider whether to be reverse or not
            min = parseInt(attributes.lowerBound),
            max = parseInt(attributes.upperBound),
            step = typeof attributes.step !== 'undefined' && attributes.step ? parseInt(attributes.step) : 1, //default value as per QTI standard
            steps = (max - min) / step; //number of the steps

        //add the containers
        $sliderCurrentValue
            .append(`<span class="qti-slider-cur-value-text">${__('Current value:')}</span>`)
            .append('<span class="qti-slider-cur-value"></span>');

        $sliderLabels
            .append(`<span class="slider-min">${!reverse ? min : max}</span>`)
            .append(`<span class="slider-max">${!reverse ? max : min}</span>`);

        interaction
            .getContainer()
            .append($el)
            .append($sliderLabels)
            .append($sliderCurrentValue)
            .append($sliderValue);

        //setting the orientation of the slider
        if (
            typeof attributes.orientation !== 'undefined' &&
            $$1.inArray(attributes.orientation, ['horizontal', 'vertical']) > -1
        ) {
            orientation = attributes.orientation;
        }

        let sliderSize = 0;

        if (orientation === 'horizontal') {
            $container.addClass('qti-slider-horizontal');
        } else {
            const maxHeight = 300;
            sliderSize = steps * 20;
            if (sliderSize > maxHeight) {
                sliderSize = maxHeight;
            }
            $container.addClass('qti-slider-vertical');
            $el.height(`${sliderSize}px`);
            $sliderLabels.height(`${sliderSize}px`);
        }

        //set the middle value if the stepLabel attribute is enabled
        if (typeof attributes.stepLabel !== 'undefined' && attributes.stepLabel) {
            const middleStep = parseInt(steps / 2),
                leftOffset = (100 / steps) * middleStep,
                middleValue = reverse ? max - middleStep * step : min + middleStep * step;

            if (orientation === 'horizontal') {
                $sliderLabels
                    .find('.slider-min')
                    .after(`<span class="slider-middle" style="left:'${leftOffset}%">${middleValue}</span>`);
            } else {
                $sliderLabels
                    .find('.slider-min')
                    .after(`<span class="slider-middle" style="top:${leftOffset}%">${middleValue}</span>`);
            }
        }

        //create the slider
        $el.noUiSlider({
            start: reverse ? max : min,
            range: {
                min: min,
                max: max
            },
            step: step,
            orientation: orientation
        }).on('slide', function() {
            let val = parseInt($$1(this).val());
            if (interaction.attr('reverse')) {
                val = max + min - val;
            }
            val = Math.round(val * 1000) / 1000;
            _slideTo({
                value: val,
                sliderValue: $sliderValue,
                sliderCurrentValue: $sliderCurrentValue
            });

            containerHelper.triggerResponseChangeEvent(interaction);
        });

        _slideTo({
            value: min,
            sliderValue: $sliderValue,
            sliderCurrentValue: $sliderCurrentValue
        });

        //bind event listener in case the attributes change dynamically on runtime
        $$1(document).on('attributeChange.qti-widget.commonRenderer', function(e, data) {
            if (data.element.getSerial() === interaction.getSerial()) {
                if (data.key === 'responseIdentifier' && data.value) {
                    const attributesNew = interaction.getAttributes();
                    // data.value and attributesNew.responseIdentifier is the same
                    $container.find('.qti-slider').attr({ id: `${attributesNew.responseIdentifier}-qti-slider`});
                    $container.find('.qti-slider-cur-value').attr({ id: `${attributesNew.responseIdentifier}-qti-slider-cur-value`});
                    $container.find('.qti-slider-value').attr({ id: `${attributesNew.responseIdentifier}-qti-slider-value`});
                }
            }
        });
    };

    var resetResponse = function(interaction) {
        const attributes = interaction.getAttributes(),
            $container = interaction.getContainer(),
            $el = $container.find(`#${attributes.responseIdentifier}-qti-slider`),
            $sliderValue = $container.find(`#${attributes.responseIdentifier}-qti-slider-value`),
            $sliderCurrentValue = $container.find(`#${attributes.responseIdentifier}-qti-slider-cur-value`),
            min = parseInt(attributes.lowerBound),
            max = parseInt(attributes.upperBound),
            reverse = typeof attributes.reverse !== 'undefined' && attributes.reverse ? true : false,
            startValue = reverse ? max : min;

        _slideTo({
            value: min,
            sliderValue: $sliderValue,
            sliderCurrentValue: $sliderCurrentValue
        });

        $el.val(startValue);
    };

    /**
     * Set the response to the rendered interaction.
     *
     * The response format follows the IMS PCI recommendation :
     * http://www.imsglobal.org/assessment/pciv1p0cf/imsPCIv1p0cf.html#_Toc353965343
     *
     * Available base types are defined in the QTI v2.1 information model:
     * http://www.imsglobal.org/question/qtiv2p1/imsqti_infov2p1.html#element10333
     *
     * @param {object} interaction
     * @param {object} response
     */
    var setResponse = function(interaction, response) {
        const attributes = interaction.getAttributes(),
            $container = interaction.getContainer(),
            $sliderValue = $container.find(`#${attributes.responseIdentifier}-qti-slider-value`),
            $sliderCurrentValue = $container.find(`#${attributes.responseIdentifier}-qti-slider-cur-value`),
            $el = $container.find(`#${attributes.responseIdentifier}-qti-slider`),
            min = parseInt(attributes.lowerBound),
            max = parseInt(attributes.upperBound);
        let value;

        value = pciResponse.unserialize(response, interaction)[0];

        _slideTo({
            value: value,
            sliderValue: $sliderValue,
            sliderCurrentValue: $sliderCurrentValue
        });

        $el.val(interaction.attr('reverse') ? max + min - value : value);
    };

    var _getRawResponse = function(interaction) {
        let value;
        const attributes = interaction.getAttributes(),
            baseType = interaction.getResponseDeclaration().attr('baseType'),
            min = parseInt(attributes.lowerBound),
            $container = interaction.getContainer(),
            $sliderValue = $container.find(`#${attributes.responseIdentifier}-qti-slider-value`);

        if (baseType === 'integer') {
            value = parseInt($sliderValue.val());
        } else if (baseType === 'float') {
            value = parseFloat($sliderValue.val());
        }

        return isNaN(value) ? min : value;
    };

    /**
     * Return the response of the rendered interaction
     *
     * The response format follows the IMS PCI recommendation :
     * http://www.imsglobal.org/assessment/pciv1p0cf/imsPCIv1p0cf.html#_Toc353965343
     *
     * Available base types are defined in the QTI v2.1 information model:
     * http://www.imsglobal.org/question/qtiv2p1/imsqti_infov2p1.html#element10333
     *
     * @param {object} interaction
     * @returns {object}
     */
    const getResponse = function(interaction) {
        return pciResponse.serialize([_getRawResponse(interaction)], interaction);
    };

    const destroy = function(interaction) {
        const $container = interaction.getContainer();

        $container.empty();

        //remove all references to a cache container
        containerHelper.reset(interaction);
    };

    /**
     * Set the interaction state. It could be done anytime with any state.
     *
     * @param {Object} interaction - the interaction instance
     * @param {Object} state - the interaction state
     */
    const setState = function setState(interaction, state) {
        if (_.isObject(state)) {
            if (state.response) {
                interaction.resetResponse();
                interaction.setResponse(state.response);
            }
        }
    };

    /**
     * Get the interaction state.
     *
     * @param {Object} interaction - the interaction instance
     * @returns {Object} the interaction current state
     */
    const getState = function getState(interaction) {
        const state = {};
        const response = interaction.getResponse();

        if (response) {
            state.response = response;
        }
        return state;
    };

    var SliderInteraction = {
        qtiClass: 'sliderInteraction',
        template: tpl,
        render: render,
        getContainer: containerHelper.get,
        setResponse: setResponse,
        getResponse: getResponse,
        resetResponse: resetResponse,
        destroy: destroy,
        setState: setState,
        getState: getState
    };

    return SliderInteraction;

});
