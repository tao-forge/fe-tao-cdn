define(['jquery', 'lodash', 'i18n', 'handlebars', 'lib/dompurify/purify', 'taoQtiItem/qtiCommonRenderer/helpers/Graphic', 'taoQtiItem/qtiCommonRenderer/helpers/PciResponse', 'taoQtiItem/qtiCommonRenderer/helpers/container', 'taoQtiItem/qtiCommonRenderer/helpers/instructions/instructionManager'], function ($$1, _, __, Handlebars, DOMPurify, graphic, pciResponse, containerHelper, instructionMgr) { 'use strict';

    $$1 = $$1 && $$1.hasOwnProperty('default') ? $$1['default'] : $$1;
    _ = _ && _.hasOwnProperty('default') ? _['default'] : _;
    __ = __ && __.hasOwnProperty('default') ? __['default'] : __;
    Handlebars = Handlebars && Handlebars.hasOwnProperty('default') ? Handlebars['default'] : Handlebars;
    DOMPurify = DOMPurify && DOMPurify.hasOwnProperty('default') ? DOMPurify['default'] : DOMPurify;
    graphic = graphic && graphic.hasOwnProperty('default') ? graphic['default'] : graphic;
    pciResponse = pciResponse && pciResponse.hasOwnProperty('default') ? pciResponse['default'] : pciResponse;
    containerHelper = containerHelper && containerHelper.hasOwnProperty('default') ? containerHelper['default'] : containerHelper;
    instructionMgr = instructionMgr && instructionMgr.hasOwnProperty('default') ? instructionMgr['default'] : instructionMgr;

    /**
     * This program is free software; you can redistribute it and/or
     * modify it under the terms of the GNU General Public License
     * as published by the Free Software Foundation; under version 2
     * of the License (non-upgradable).
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU General Public License
     * along with this program; if not, write to the Free Software
     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
     *
     * Copyright (c) 2013-2019 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);
     *
     *
     */

    var Helpers0 = hb => {
        //register a i18n helper
        hb.registerHelper('__', function(key) {
            return __(key);
        });

        /**
         * Register dompurify helper
         *
         * https://github.com/cure53/DOMPurify
         * with config SAFE_FOR_TEMPLATES: true
         * to make output safe for template systems
         */
        hb.registerHelper('dompurify', function(context) {
            return DOMPurify.sanitize(context);
        });

        /**
         * Register join helper
         *
         * Example :
         * var values = {a:v1, b:v2, c:v3};
         * Using {{{join attributes '=' ' ' '"'}}} will return : a="v1" b="v2" c="v3"
         * Using {{{join values null ' or ' '*'}}} will return : *v1* or *v2* or *v3*
         */
        hb.registerHelper('join', function(arr, keyValueGlue, fragmentGlue, wrapper) {
            var fragments = [];

            keyValueGlue = typeof keyValueGlue === 'string' ? keyValueGlue : undefined;
            fragmentGlue = typeof fragmentGlue === 'string' ? fragmentGlue : ' ';
            wrapper = typeof wrapper === 'string' ? wrapper : '"';

            _.forIn(arr, function(value, key) {
                var fragment = '';
                if (value !== null || value !== undefined) {
                    if (typeof value === 'boolean') {
                        value = value ? 'true' : 'false';
                    } else if (typeof value === 'object') {
                        value = _.values(value).join(' ');
                    }
                } else {
                    value = '';
                }
                if (keyValueGlue !== undefined) {
                    fragment += key + keyValueGlue;
                }
                fragment += wrapper + value + wrapper;
                fragments.push(fragment);
            });

            return fragments.join(fragmentGlue);
        });

        //register a classic "for loop" helper
        //it also adds a local variable "i" as the index in each iteration loop
        hb.registerHelper('for', function(startIndex, stopIndex, increment, options) {
            var ret = '';
            startIndex = parseInt(startIndex);
            stopIndex = parseInt(stopIndex);
            increment = parseInt(increment);

            for (var i = startIndex; i < stopIndex; i += increment) {
                ret += options.fn(_.extend({}, this, { i: i }));
            }

            return ret;
        });

        hb.registerHelper('equal', function(var1, var2, options) {
            if (var1 == var2) {
                return options.fn(this);
            } else {
                return options.inverse(this);
            }
        });

        // register a "get property" helper
        // it gets the named property from the provided context
        hb.registerHelper('property', function(name, context) {
            return context[name] || '';
        });

        // register an 'includes' helper
        // it checks if value is in array
        hb.registerHelper('includes', function(haystack, needle, options) {
            if (_.contains(haystack, needle)) {
                return options.fn(this);
            }
        });
    };

    if (!Helpers0.__initialized) {
      Helpers0(Handlebars);
      Helpers0.__initialized = true;
    }
    var Template = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
      this.compilerInfo = [4,'>= 1.0.0'];
    helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
      var buffer = "", stack1, helper, functionType="function", escapeExpression=this.escapeExpression, self=this;

    function program1(depth0,data) {
      
      var buffer = "", stack1;
      buffer += "id=\""
        + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.attributes)),stack1 == null || stack1 === false ? stack1 : stack1.id)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
        + "\"";
      return buffer;
      }

    function program3(depth0,data) {
      
      var buffer = "", stack1;
      buffer += " "
        + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.attributes)),stack1 == null || stack1 === false ? stack1 : stack1['class'])),typeof stack1 === functionType ? stack1.apply(depth0) : stack1));
      return buffer;
      }

    function program5(depth0,data) {
      
      var buffer = "", stack1;
      buffer += " lang=\""
        + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.attributes)),stack1 == null || stack1 === false ? stack1 : stack1['xml:lang'])),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
        + "\"";
      return buffer;
      }

    function program7(depth0,data) {
      
      var stack1, helper;
      if (helper = helpers.prompt) { stack1 = helper.call(depth0, {hash:{},data:data}); }
      else { helper = (depth0 && depth0.prompt); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
      if(stack1 || stack1 === 0) { return stack1; }
      else { return ''; }
      }

      buffer += "<div ";
      stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.attributes)),stack1 == null || stack1 === false ? stack1 : stack1.id), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
      if(stack1 || stack1 === 0) { buffer += stack1; }
      buffer += " class=\"qti-interaction qti-blockInteraction qti-graphicInteraction qti-graphicOrderInteraction clearfix";
      stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.attributes)),stack1 == null || stack1 === false ? stack1 : stack1['class']), {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});
      if(stack1 || stack1 === 0) { buffer += stack1; }
      buffer += "\" data-serial=\"";
      if (helper = helpers.serial) { stack1 = helper.call(depth0, {hash:{},data:data}); }
      else { helper = (depth0 && depth0.serial); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
      buffer += escapeExpression(stack1)
        + "\"";
      stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.attributes)),stack1 == null || stack1 === false ? stack1 : stack1['xml:lang']), {hash:{},inverse:self.noop,fn:self.program(5, program5, data),data:data});
      if(stack1 || stack1 === 0) { buffer += stack1; }
      buffer += ">\n    ";
      stack1 = helpers['if'].call(depth0, (depth0 && depth0.prompt), {hash:{},inverse:self.noop,fn:self.program(7, program7, data),data:data});
      if(stack1 || stack1 === 0) { buffer += stack1; }
      buffer += "\n    <div class=\"instruction-container\"></div>\n    <div class=\"image-editor solid\">\n        <div id='graphic-paper-";
      if (helper = helpers.serial) { stack1 = helper.call(depth0, {hash:{},data:data}); }
      else { helper = (depth0 && depth0.serial); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
      buffer += escapeExpression(stack1)
        + "' class=\"main-image-box\"></div>\n        <div class=\"clearfix\"></div>\n        <ul class=\"none block-listing horizontal ordinals\"></ul>\n    </div>\n</div>\n";
      return buffer;
      });
    function tpl(data, options, asString) {
      var html = Template(data, options);
      return (asString || true) ? html : $(html);
    }

    /*
     * This program is free software; you can redistribute it and/or
     * modify it under the terms of the GNU General Public License
     * as published by the Free Software Foundation; under version 2
     * of the License (non-upgradable).
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU General Public License
     * along with this program; if not, write to the Free Software
     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
     *
     * Copyright (c) 2014 (original work) Open Assessment Technlogies SA (under the project TAO-PRODUCT);
     *
     */

    /**
     * Init rendering, called after template injected into the DOM
     * All options are listed in the QTI v2.1 information model:
     * http://www.imsglobal.org/question/qtiv2p1/imsqti_infov2p1.html#element10321
     *
     * @param {object} interaction
     */
    var render = function render(interaction) {
        var self = this;

        return new Promise(function(resolve, reject) {
            var $container = containerHelper.get(interaction);
            var $orderList = $$1('ul', $container);
            var background = interaction.object.attributes;

            $container.off('resized.qti-widget.resolve').one('resized.qti-widget.resolve', resolve);

            //create the paper
            interaction.paper = graphic.responsivePaper('graphic-paper-' + interaction.serial, interaction.serial, {
                width: background.width,
                height: background.height,
                img: self.resolveUrl(background.data),
                imgId: 'bg-image-' + interaction.serial,
                container: $container
            });

            //create the list of number to order
            _renderOrderList(interaction, $orderList);

            //call render choice for each interaction's choices
            _.forEach(interaction.getChoices(), _.partial(_renderChoice, interaction, $orderList));

            //set up the constraints instructions
            instructionMgr.minMaxChoiceInstructions(interaction, {
                min: interaction.attr('minChoices'),
                max: interaction.attr('maxChoices'),
                getResponse: _getRawResponse,
                onError: function(data) {
                    graphic.highlightError(data.target);
                }
            });
        });
    };

    /**
     * Render a choice inside the paper.
     * Please note that the choice renderer isn't implemented separately because it relies on the Raphael paper instead of the DOM.
     * @private
     * @param {Object} interaction
     * @param {jQueryElement} $orderList - the list than contains the orderers
     * @param {Object} choice - the hotspot choice to add to the interaction
     */
    var _renderChoice = function _renderChoice(interaction, $orderList, choice) {
        var rElement = graphic
            .createElement(interaction.paper, choice.attr('shape'), choice.attr('coords'), {
                id: choice.serial,
                title: __('Select this area')
            })
            .click(function(e) {
                //if tts component is loaded and click-to-speak function is activated - we should prevent this listener to go further
                if (
                    $$1(e.currentTarget)
                        .closest('.qti-item')
                        .hasClass('prevent-click-handler')
                ) {
                    return;
                }
                if (this.active) {
                    _unselectShape(interaction.paper, this, $orderList);
                } else {
                    _selectShape(interaction.paper, this, $orderList);
                }
                containerHelper.triggerResponseChangeEvent(interaction);
                instructionMgr.validateInstructions(interaction, { choice: choice });
            });
    };

    /**
     * Render the list of numbers
     * @private
     * @param {Object} interaction
     * @param {jQueryElement} $orderList - the list than contains the orderers
     */
    var _renderOrderList = function _renderOrderList(interaction, $orderList) {
        var $orderers;
        var size = _.size(interaction.getChoices());
        var min = interaction.attr('minChoices');
        var max = interaction.attr('maxChoices');

        //calculate the number of orderer to display
        if (max > 0 && max <= size) {
            size = max;
        } else if (min > 0 && min <= size) {
            size = min;
        }

        //add them to the list
        _.times(size, function(index) {
            var position = index + 1;
            var $orderer = $$1('<li class="selectable" data-number="' + position + '">' + position + '</li>');
            if (index === 0) {
                $orderer.addClass('active');
            }
            $orderList.append($orderer);
        });

        //create related svg texts
        _createTexts(interaction.paper, size);

        //bind the activation event
        $orderers = $orderList.children('li');
        $orderers.click(function(e) {
            e.preventDefault();
            var $orderer = $$1(this);

            if (!$orderer.hasClass('active') && !$orderer.hasClass('disabled')) {
                $orderers.removeClass('active');
                $orderer.addClass('active');
            }
        });
    };

    /**
     * Select a shape to position an order
     * @private
     * @param {Raphael.Paper} paper - the interaction paper
     * @param {Raphael.element} element - the selected shape
     * @param {jQueryElement} $orderList - the list than contains the orderers
     */
    var _selectShape = function _selectShape(paper, element, $orderList) {
        //lookup for the active number
        var $active = $orderList.find('.active:first');
        if ($active.length && $active.data('number') > 0) {
            //associate the current number directly to the element
            element.data('number', $active.data('number'));
            element.active = true;
            _showText(paper, element);
            graphic.updateElementState(element, 'active');

            //update the state of the order list
            $active
                .toggleClass('active disabled')
                .siblings(':not(.disabled)')
                .first()
                .toggleClass('active');
        }
    };

    /**
     * Unselect a shape to free the position
     * @private
     * @param {Raphael.Paper} paper - the interaction paper
     * @param {Raphael.element} element - the unselected shape
     * @param {jQueryElement} $orderList - the list than contains the orderers
     */
    var _unselectShape = function _unselectShape(paper, element, $orderList) {
        var number = element.data('number');

        //update element state
        element.active = false;
        _hideText(paper, element);
        element.removeData('number');
        graphic.updateElementState(element, 'basic');

        //reset order list state and activate the removed number
        $orderList
            .children()
            .removeClass('active')
            .filter('[data-number=' + number + ']')
            .removeClass('disabled')
            .addClass('active');
    };

    /**
     * Creates ALL the texts (the numbers to display in the shapes). They are created styled but hidden.
     *
     * @private
     * @param {Raphael.Paper} paper - the interaction paper
     * @param {Number} size - the number of numbers to create...
     * @param {jQueryElement} $orderList - the list than contains the orderers
     * @return {Array} the creates text element
     */
    var _createTexts = function _createTexts(paper, size) {
        var texts = [];
        _.times(size, function(index) {
            var number = index + 1;
            var text = graphic.createText(paper, {
                id: 'text-' + number,
                content: number,
                title: __('Remove'),
                style: 'order-text',
                hide: true
            });

            //clicking the text will has the same effect that clicking the shape: unselect.
            text.click(function() {
                paper.forEach(function(element) {
                    if (element.data('number') === number && element.events) {
                        //we just need to retrieve the right element
                        //call the click event
                        var evt = _.where(element.events, { name: 'click' });
                        if (evt.length && evt[0] && typeof evt[0].f === 'function') {
                            evt[0].f.call(element);
                        }
                    }
                });
            });
            texts.push(text);
        });
        return texts;
    };

    /**
     * Show the text that match the element's number.
     * We need to display it at the center of the shape.
     * @private
     * @param {Raphael.Paper} paper - the interaction paper
     * @param {Raphael.Element} element - the element to show the text for
     */
    var _showText = function _showText(paper, element) {
        var bbox = element.getBBox();
        var transf;

        //we retrieve the good text from it's id
        var text = paper.getById('text-' + element.data('number'));
        if (text) {
            //move it to the center of the shape (using absolute transform), and than display it
            transf = 'T' + (bbox.x + bbox.width / 2) + ',' + (bbox.y + bbox.height / 2);
            text.transform(transf)
                .show()
                .toFront();
        }
    };

    /**
     * Hide an element text.
     * @private
     * @param {Raphael.Paper} paper - the interaction paper
     * @param {Raphael.Element} element - the element to hide the text for
     */
    var _hideText = function _hideText(paper, element) {
        var text = paper.getById('text-' + element.data('number'));
        if (text) {
            text.hide();
        }
    };

    /**
     * Get the responses from the interaction
     * @private
     * @param {Object} interaction
     * @returns {Array} of points
     */
    var _getRawResponse = function _getRawResponse(interaction) {
        var response = [];
        _.forEach(interaction.getChoices(), function(choice) {
            var elt = interaction.paper.getById(choice.serial);
            if (elt && elt.data('number')) {
                response.push({
                    index: elt.data('number'),
                    id: choice.id()
                });
            }
        });
        return _(response)
            .sortBy('index')
            .map('id')
            .value();
    };

    /**
     * Set the response to the rendered interaction.
     *
     * The response format follows the IMS PCI recommendation :
     * http://www.imsglobal.org/assessment/pciv1p0cf/imsPCIv1p0cf.html#_Toc353965343
     *
     * Available base types are defined in the QTI v2.1 information model:
     * http://www.imsglobal.org/question/qtiv2p1/imsqti_infov2p1.html#element10321
     *
     * Special value: the empty object value {} resets the interaction responses
     *
     * @param {object} interaction
     * @param {object} response
     */
    var setResponse = function(interaction, response) {
        var responseValues;
        var $container = containerHelper.get(interaction);
        var $orderList = $$1('ul', $container);
        if (response && interaction.paper) {
            try {
                //try to unserualize tthe pci response
                responseValues = pciResponse.unserialize(response, interaction);
            } catch (e) {}

            if (_.isArray(responseValues)) {
                _.forEach(responseValues, function(responseValue, index) {
                    var element;
                    var number = index + 1;

                    //get the choice that match the response
                    var choice = _(interaction.getChoices())
                        .where({ attributes: { identifier: responseValue } })
                        .first();
                    if (choice) {
                        element = interaction.paper.getById(choice.serial);
                        if (element) {
                            //activate the orderer to be consistant
                            $orderList.children('[data-number=' + number + ']').addClass('active');

                            //select the related shape
                            _selectShape(interaction.paper, element, $orderList);
                        }
                    }
                });
            }
        }
    };

    /**
     * Reset the current responses of the rendered interaction.
     *
     * The response format follows the IMS PCI recommendation :
     * http://www.imsglobal.org/assessment/pciv1p0cf/imsPCIv1p0cf.html#_Toc353965343
     *
     * Available base types are defined in the QTI v2.1 information model:
     * http://www.imsglobal.org/question/qtiv2p1/imsqti_infov2p1.html#element10321
     *
     * Special value: the empty object value {} resets the interaction responses
     *
     * @param {object} interaction
     * @param {object} response
     */
    var resetResponse = function resetResponse(interaction) {
        var $container = containerHelper.get(interaction);
        var $orderList = $$1('ul', $container);

        _.forEach(interaction.getChoices(), function(choice) {
            var element = interaction.paper.getById(choice.serial);
            if (element) {
                _unselectShape(interaction.paper, element, $orderList);
            }
        });

        $orderList
            .children('li')
            .removeClass('active disabled')
            .first()
            .addClass('active');
    };

    /**
         i* Return the response of the rendered interaction
         *
         * The response format follows the IMS PCI recommendation :
         * http://www.imsglobal.org/assessment/pciv1p0cf/imsPCIv1p0cf.html#_Toc353965343
         *
         * Available base types are defined in the QTI v2.1 information model:
         * http://www.imsglobal.org/question/qtiv2p1/imsqti_infov2p1.html#element10321
         *
         * @param {object} interaction
         * @returns {object}
         */
    var getResponse = function(interaction) {
        return pciResponse.serialize(_getRawResponse(interaction), interaction);
    };

    /**
     * Clean interaction destroy
     * @param {Object} interaction
     */
    var destroy = function destroy(interaction) {
        var $container;
        if (interaction.paper) {
            $container = containerHelper.get(interaction);

            $$1(window).off('resize.qti-widget.' + interaction.serial);
            $container.off('resize.qti-widget.' + interaction.serial);

            interaction.paper.clear();
            instructionMgr.removeInstructions(interaction);

            $$1('.main-image-box', $container)
                .empty()
                .removeAttr('style');
            $$1('.image-editor', $container).removeAttr('style');
            $$1('ul', $container).empty();
        }

        //remove all references to a cache container
        containerHelper.reset(interaction);
    };

    /**
     * Set the interaction state. It could be done anytime with any state.
     *
     * @param {Object} interaction - the interaction instance
     * @param {Object} state - the interaction state
     */
    var setState = function setState(interaction, state) {
        if (_.isObject(state)) {
            if (state.response) {
                interaction.resetResponse();
                interaction.setResponse(state.response);
            }
        }
    };

    /**
     * Get the interaction state.
     *
     * @param {Object} interaction - the interaction instance
     * @returns {Object} the interaction current state
     */
    var getState = function getState(interaction) {
        var state = {};
        var response = interaction.getResponse();

        if (response) {
            state.response = response;
        }
        return state;
    };

    /**
     * Expose the common renderer for the interaction
     * @exports qtiCommonRenderer/renderers/interactions/SelectPointInteraction
     */
    var GraphicOrderInteraction = {
        qtiClass: 'graphicOrderInteraction',
        template: tpl,
        render: render,
        getContainer: containerHelper.get,
        setResponse: setResponse,
        getResponse: getResponse,
        resetResponse: resetResponse,
        destroy: destroy,
        setState: setState,
        getState: getState
    };

    return GraphicOrderInteraction;

});
