define(['jquery', 'lodash', 'handlebars', 'i18n', 'lib/dompurify/purify', 'taoQtiItem/qtiCommonRenderer/helpers/PciResponse', 'taoQtiItem/qtiCommonRenderer/helpers/container', 'ui/mediaplayer'], function ($$1, _, Handlebars, __, DOMPurify, pciResponse, containerHelper, mediaplayer) { 'use strict';

    $$1 = $$1 && $$1.hasOwnProperty('default') ? $$1['default'] : $$1;
    _ = _ && _.hasOwnProperty('default') ? _['default'] : _;
    Handlebars = Handlebars && Handlebars.hasOwnProperty('default') ? Handlebars['default'] : Handlebars;
    __ = __ && __.hasOwnProperty('default') ? __['default'] : __;
    DOMPurify = DOMPurify && DOMPurify.hasOwnProperty('default') ? DOMPurify['default'] : DOMPurify;
    pciResponse = pciResponse && pciResponse.hasOwnProperty('default') ? pciResponse['default'] : pciResponse;
    containerHelper = containerHelper && containerHelper.hasOwnProperty('default') ? containerHelper['default'] : containerHelper;
    mediaplayer = mediaplayer && mediaplayer.hasOwnProperty('default') ? mediaplayer['default'] : mediaplayer;

    /**
     * This program is free software; you can redistribute it and/or
     * modify it under the terms of the GNU General Public License
     * as published by the Free Software Foundation; under version 2
     * of the License (non-upgradable).
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU General Public License
     * along with this program; if not, write to the Free Software
     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
     *
     * Copyright (c) 2013-2019 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);
     *
     *
     */

    var Helpers0 = hb => {
        //register a i18n helper
        hb.registerHelper('__', function(key) {
            return __(key);
        });

        /**
         * Register dompurify helper
         *
         * https://github.com/cure53/DOMPurify
         * with config SAFE_FOR_TEMPLATES: true
         * to make output safe for template systems
         */
        hb.registerHelper('dompurify', function(context) {
            return DOMPurify.sanitize(context);
        });

        /**
         * Register join helper
         *
         * Example :
         * var values = {a:v1, b:v2, c:v3};
         * Using {{{join attributes '=' ' ' '"'}}} will return : a="v1" b="v2" c="v3"
         * Using {{{join values null ' or ' '*'}}} will return : *v1* or *v2* or *v3*
         */
        hb.registerHelper('join', function(arr, keyValueGlue, fragmentGlue, wrapper) {
            var fragments = [];

            keyValueGlue = typeof keyValueGlue === 'string' ? keyValueGlue : undefined;
            fragmentGlue = typeof fragmentGlue === 'string' ? fragmentGlue : ' ';
            wrapper = typeof wrapper === 'string' ? wrapper : '"';

            _.forIn(arr, function(value, key) {
                var fragment = '';
                if (value !== null || value !== undefined) {
                    if (typeof value === 'boolean') {
                        value = value ? 'true' : 'false';
                    } else if (typeof value === 'object') {
                        value = _.values(value).join(' ');
                    }
                } else {
                    value = '';
                }
                if (keyValueGlue !== undefined) {
                    fragment += key + keyValueGlue;
                }
                fragment += wrapper + value + wrapper;
                fragments.push(fragment);
            });

            return fragments.join(fragmentGlue);
        });

        //register a classic "for loop" helper
        //it also adds a local variable "i" as the index in each iteration loop
        hb.registerHelper('for', function(startIndex, stopIndex, increment, options) {
            var ret = '';
            startIndex = parseInt(startIndex);
            stopIndex = parseInt(stopIndex);
            increment = parseInt(increment);

            for (var i = startIndex; i < stopIndex; i += increment) {
                ret += options.fn(_.extend({}, this, { i: i }));
            }

            return ret;
        });

        hb.registerHelper('equal', function(var1, var2, options) {
            if (var1 == var2) {
                return options.fn(this);
            } else {
                return options.inverse(this);
            }
        });

        // register a "get property" helper
        // it gets the named property from the provided context
        hb.registerHelper('property', function(name, context) {
            return context[name] || '';
        });

        // register an 'includes' helper
        // it checks if value is in array
        hb.registerHelper('includes', function(haystack, needle, options) {
            if (_.contains(haystack, needle)) {
                return options.fn(this);
            }
        });
    };

    if (!Helpers0.__initialized) {
      Helpers0(Handlebars);
      Helpers0.__initialized = true;
    }
    var Template = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
      this.compilerInfo = [4,'>= 1.0.0'];
    helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
      var buffer = "", stack1, helper, functionType="function", escapeExpression=this.escapeExpression, self=this;

    function program1(depth0,data) {
      
      var buffer = "", stack1;
      buffer += "id=\""
        + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.attributes)),stack1 == null || stack1 === false ? stack1 : stack1.id)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
        + "\"";
      return buffer;
      }

    function program3(depth0,data) {
      
      var buffer = "", stack1;
      buffer += " "
        + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.attributes)),stack1 == null || stack1 === false ? stack1 : stack1['class'])),typeof stack1 === functionType ? stack1.apply(depth0) : stack1));
      return buffer;
      }

    function program5(depth0,data) {
      
      var buffer = "", stack1;
      buffer += " lang=\""
        + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.attributes)),stack1 == null || stack1 === false ? stack1 : stack1['xml:lang'])),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
        + "\"";
      return buffer;
      }

    function program7(depth0,data) {
      
      var stack1, helper;
      if (helper = helpers.prompt) { stack1 = helper.call(depth0, {hash:{},data:data}); }
      else { helper = (depth0 && depth0.prompt); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
      if(stack1 || stack1 === 0) { return stack1; }
      else { return ''; }
      }

      buffer += "<div ";
      stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.attributes)),stack1 == null || stack1 === false ? stack1 : stack1.id), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
      if(stack1 || stack1 === 0) { buffer += stack1; }
      buffer += " class=\"qti-interaction qti-blockInteraction qti-mediaInteraction";
      stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.attributes)),stack1 == null || stack1 === false ? stack1 : stack1['class']), {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});
      if(stack1 || stack1 === 0) { buffer += stack1; }
      buffer += "\" data-serial=\"";
      if (helper = helpers.serial) { stack1 = helper.call(depth0, {hash:{},data:data}); }
      else { helper = (depth0 && depth0.serial); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
      buffer += escapeExpression(stack1)
        + "\"";
      stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.attributes)),stack1 == null || stack1 === false ? stack1 : stack1['xml:lang']), {hash:{},inverse:self.noop,fn:self.program(5, program5, data),data:data});
      if(stack1 || stack1 === 0) { buffer += stack1; }
      buffer += ">\n    ";
      stack1 = helpers['if'].call(depth0, (depth0 && depth0.prompt), {hash:{},inverse:self.noop,fn:self.program(7, program7, data),data:data});
      if(stack1 || stack1 === 0) { buffer += stack1; }
      buffer += "\n    <div class=\"instruction-container\"></div>\n    <div class=\"media-container\"></div>\n</div>\n";
      return buffer;
      });
    function tpl(data, options, asString) {
      var html = Template(data, options);
      return (asString || true) ? html : $(html);
    }

    /*
     * This program is free software; you can redistribute it and/or
     * modify it under the terms of the GNU General Public License
     * as published by the Free Software Foundation; under version 2
     * of the License (non-upgradable).
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU General Public License
     * along with this program; if not, write to the Free Software
     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
     *
     * Copyright (c) 2014-2018 (original work) Open Assessment Technlogies SA
     *
     */

    //some default values
    var defaults = {
        type: 'video/mp4',
        video: {
            width: 480,
            height: 270
        },
        audio: {
            width: 400,
            height: 30
        }
    };

    /**
     * Init rendering, called after template injected into the DOM
     * All options are listed in the QTI v2.1 information model:
     * http://www.imsglobal.org/question/qtiv2p1/imsqti_infov2p1.html#element10391
     *
     * @param {object} interaction
     * @fires playerrendered when the player is at least rendered
     * @fires playerready when the player is sucessfully loaded and configured
     */
    var render = function render(interaction) {
        var self = this;
        return new Promise(function(resolve) {
            var $container = containerHelper.get(interaction);
            var media = interaction.object;
            var $item = $container.parents('.qti-item');
            var maxPlays = parseInt(interaction.attr('maxPlays'), 10) || 0;
            var url = media.attr('data') || '';

            //check if the media can be played (using timesPlayed and maxPlays)
            var canBePlayed = function canBePlayed() {
                var current = parseInt($container.data('timesPlayed'), 10);
                return maxPlays === 0 || maxPlays > current;
            };

            /**
             * Resize video player elements to fit container size
             * @param {Object} mediaElement - player instance
             * @param {jQueryElement} $container   - container element to adapt
             */
            var resize = _.debounce(function resize() {
                var width, height;
                if (interaction.mediaElement) {
                    height = $container.find('.media-container').height();
                    width = $container.find('.media-container').width();

                    interaction.mediaElement.resize(width, height);
                }
            }, 200);

            //intialize the player if not yet done
            var initMediaPlayer = function initMediaPlayer() {
                if (!interaction.mediaElement) {
                    interaction.mediaElement = mediaplayer({
                        url: url && self.resolveUrl(url),
                        type: media.attr('type') || defaults.type,
                        canPause: $container.hasClass('pause'),
                        maxPlays: maxPlays,
                        canSeek: !maxPlays,
                        width: media.attr('width'),
                        height: media.attr('height'),
                        volume: 100,
                        autoStart: !!interaction.attr('autostart') && canBePlayed(),
                        loop: !!interaction.attr('loop'),
                        renderTo: $$1('.media-container', $container)
                    })
                        .on('render', function() {
                            resize();

                            $$1(window)
                                .off('resize.mediaInteraction')
                                .on('resize.mediaInteraction', resize);

                            $item.off('resize.gridEdit').on('resize.gridEdit', resize);

                            /**
                             * @event playerrendered
                             */
                            $container.trigger('playerrendered');
                        })
                        .on('ready', function() {
                            /**
                             * @event playerready
                             */
                            $container.trigger('playerready');

                            if (!canBePlayed()) {
                                this.disable();
                            }

                            // declare the item ready when player is ready to play.
                            resolve();
                        })
                        .on(
                            'update',
                            _.throttle(function() {
                                containerHelper.triggerResponseChangeEvent(interaction);
                            }, 1000)
                        )
                        .on('ended', function() {
                            $container.data('timesPlayed', $container.data('timesPlayed') + 1);
                            containerHelper.triggerResponseChangeEvent(interaction);

                            if (!canBePlayed()) {
                                this.disable();
                            }
                        });
                }
            };

            if (_.size(media.attributes) === 0) {
                //TODO move to afterCreate
                media.attr('type', defaults.type);
                media.attr('width', $container.innerWidth());

                media.attr('height', defaults.video.height);
                media.attr('data', '');
            }

            //set up the number of times played
            if (!$container.data('timesPlayed')) {
                $container.data('timesPlayed', 0);
            }

            //initialize the component
            $container.on('responseSet', function() {
                initMediaPlayer();
            });

            //gives a small chance to the responseSet event before initializing the player
            initMediaPlayer();
        });
    };

    /**
     * Destroy the current interaction
     * @param {Object} interaction
     */
    var destroy = function(interaction) {
        var $container = containerHelper.get(interaction);

        if (interaction.mediaElement) {
            interaction.mediaElement.destroy();
            interaction.mediaElement = null;
        }

        $$1('.instruction-container', $container).empty();
        $$1('.media-container', $container).empty();

        $container.removeData('timesPlayed');

        $$1(window).off('resize.video');

        //remove all references to a cache container
        containerHelper.reset(interaction);
    };

    /**
     * Get the responses from the interaction
     * @private
     * @param {Object} interaction
     * @returns {Array} of points
     */
    var _getRawResponse = function _getRawResponse(interaction) {
        return [containerHelper.get(interaction).data('timesPlayed') || 0];
    };

    /**
     * Set the response to the rendered interaction.
     *
     * The response format follows the IMS PCI recommendation :
     * http://www.imsglobal.org/assessment/pciv1p0cf/imsPCIv1p0cf.html#_Toc353965343
     *
     * Available base types are defined in the QTI v2.1 information model:
     * http://www.imsglobal.org/question/qtiv2p1/imsqti_infov2p1.html#element10321
     *
     * Special value: the empty object value {} resets the interaction responses
     *
     * @param {object} interaction
     * @param {object} response
     */
    var setResponse = function(interaction, response) {
        var responseValues;
        if (response) {
            try {
                //try to unserialize the pci response
                responseValues = pciResponse.unserialize(response, interaction);
                containerHelper.get(interaction).data('timesPlayed', responseValues[0]);
            } catch (e) {
                // something went wrong
            }
        }
    };

    /**
     * Reset the current responses of the rendered interaction.
     *
     * The response format follows the IMS PCI recommendation :
     * http://www.imsglobal.org/assessment/pciv1p0cf/imsPCIv1p0cf.html#_Toc353965343
     *
     * Available base types are defined in the QTI v2.1 information model:
     * http://www.imsglobal.org/question/qtiv2p1/imsqti_infov2p1.html#element10321
     *
     * Special value: the empty object value {} resets the interaction responses
     *
     * @param {object} interaction
     * @param {object} response
     */
    var resetResponse = function resetResponse(interaction) {
        containerHelper.get(interaction).data('timesPlayed', 0);
    };

    /**
     * Return the response of the rendered interaction
     *
     * The response format follows the IMS PCI recommendation :
     * http://www.imsglobal.org/assessment/pciv1p0cf/imsPCIv1p0cf.html#_Toc353965343
     *
     * Available base types are defined in the QTI v2.1 information model:
     * http://www.imsglobal.org/question/qtiv2p1/imsqti_infov2p1.html#element10321
     *
     * @param {object} interaction
     * @returns {object}
     */
    var getResponse = function(interaction) {
        return pciResponse.serialize(_getRawResponse(interaction), interaction);
    };

    /**
     * Set the interaction state. It could be done anytime with any state.
     *
     * @param {Object} interaction - the interaction instance
     * @param {Object} state - the interaction state
     */
    var setState = function setState(interaction, state) {
        /**
         * Restore the media player state
         * @private
         * @param {Object} [state]
         * @param {Boolean} [state.muted] - is the player muted
         * @param {Number} [state.volume] - the current volume
         * @param {Number} [state.position] - the position to seek to
         */
        var restorePlayerState = function restorePlayerState(playerState) {
            if (playerState && interaction.mediaElement) {
                //Volume
                if (_.isNumber(playerState.volume)) {
                    interaction.mediaElement.setVolume(playerState.volume);
                }

                //Muted state (always after the volume)
                if (_.isBoolean(playerState.muted)) {
                    interaction.mediaElement.mute(playerState.muted);
                    interaction.mediaElement.startMuted = playerState.muted;
                }

                //Position
                if (playerState.position && playerState.position > 0) {
                    interaction.mediaElement.seek(playerState.position);
                    if (!interaction.attr('autostart')) {
                        interaction.mediaElement.pause();
                    }
                }
            }
        };

        if (_.isObject(state)) {
            if (state.response) {
                interaction.resetResponse();
                interaction.setResponse(state.response);
            }

            if (_.isPlainObject(state.player) && interaction.mediaElement) {
                if (interaction.mediaElement.is('ready')) {
                    restorePlayerState(state.player);
                } else {
                    interaction.mediaElement.on('ready.state', function() {
                        interaction.mediaElement.off('ready.state');
                        restorePlayerState(state.player);
                    });
                }
            }
        }
    };

    /**
     * Get the interaction state.
     *
     * @param {Object} interaction - the interaction instance
     * @returns {Object} the interaction current state
     */
    var getState = function getState(interaction) {
        var state = {};
        var response = interaction.getResponse();

        if (response) {
            state.response = response;
        }

        //collect player's state
        if (interaction.mediaElement) {
            state.player = {
                position: interaction.mediaElement.getPosition(),
                muted: interaction.mediaElement.is('muted'),
                volume: interaction.mediaElement.getVolume()
            };
        }
        return state;
    };

    /**
     * Expose the common renderer for the interaction
     * @exports qtiCommonRenderer/renderers/interactions/MediaInteraction
     */
    var MediaInteraction = {
        qtiClass: 'mediaInteraction',
        template: tpl,
        render: render,
        getContainer: containerHelper.get,
        setResponse: setResponse,
        getResponse: getResponse,
        resetResponse: resetResponse,
        destroy: destroy,
        setState: setState,
        getState: getState
    };

    return MediaInteraction;

});
