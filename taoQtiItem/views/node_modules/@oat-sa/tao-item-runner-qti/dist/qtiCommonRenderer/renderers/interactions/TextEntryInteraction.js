define(['jquery', 'lodash', 'i18n', 'handlebars', 'lib/dompurify/purify', 'taoQtiItem/qtiCommonRenderer/helpers/container', 'taoQtiItem/qtiCommonRenderer/helpers/instructions/instructionManager', 'taoQtiItem/qtiCommonRenderer/helpers/PciResponse', 'taoQtiItem/qtiCommonRenderer/helpers/patternMask', 'util/locale', 'ui/tooltip'], function ($$1, _, __, Handlebars, DOMPurify, containerHelper, instructionMgr, pciResponse, patternMaskHelper, locale, tooltip) { 'use strict';

    $$1 = $$1 && $$1.hasOwnProperty('default') ? $$1['default'] : $$1;
    _ = _ && _.hasOwnProperty('default') ? _['default'] : _;
    __ = __ && __.hasOwnProperty('default') ? __['default'] : __;
    Handlebars = Handlebars && Handlebars.hasOwnProperty('default') ? Handlebars['default'] : Handlebars;
    DOMPurify = DOMPurify && DOMPurify.hasOwnProperty('default') ? DOMPurify['default'] : DOMPurify;
    containerHelper = containerHelper && containerHelper.hasOwnProperty('default') ? containerHelper['default'] : containerHelper;
    instructionMgr = instructionMgr && instructionMgr.hasOwnProperty('default') ? instructionMgr['default'] : instructionMgr;
    pciResponse = pciResponse && pciResponse.hasOwnProperty('default') ? pciResponse['default'] : pciResponse;
    patternMaskHelper = patternMaskHelper && patternMaskHelper.hasOwnProperty('default') ? patternMaskHelper['default'] : patternMaskHelper;
    locale = locale && locale.hasOwnProperty('default') ? locale['default'] : locale;
    tooltip = tooltip && tooltip.hasOwnProperty('default') ? tooltip['default'] : tooltip;

    /**
     * This program is free software; you can redistribute it and/or
     * modify it under the terms of the GNU General Public License
     * as published by the Free Software Foundation; under version 2
     * of the License (non-upgradable).
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU General Public License
     * along with this program; if not, write to the Free Software
     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
     *
     * Copyright (c) 2013-2019 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);
     *
     *
     */

    var Helpers0 = hb => {
        //register a i18n helper
        hb.registerHelper('__', function(key) {
            return __(key);
        });

        /**
         * Register dompurify helper
         *
         * https://github.com/cure53/DOMPurify
         * with config SAFE_FOR_TEMPLATES: true
         * to make output safe for template systems
         */
        hb.registerHelper('dompurify', function(context) {
            return DOMPurify.sanitize(context);
        });

        /**
         * Register join helper
         *
         * Example :
         * var values = {a:v1, b:v2, c:v3};
         * Using {{{join attributes '=' ' ' '"'}}} will return : a="v1" b="v2" c="v3"
         * Using {{{join values null ' or ' '*'}}} will return : *v1* or *v2* or *v3*
         */
        hb.registerHelper('join', function(arr, keyValueGlue, fragmentGlue, wrapper) {
            var fragments = [];

            keyValueGlue = typeof keyValueGlue === 'string' ? keyValueGlue : undefined;
            fragmentGlue = typeof fragmentGlue === 'string' ? fragmentGlue : ' ';
            wrapper = typeof wrapper === 'string' ? wrapper : '"';

            _.forIn(arr, function(value, key) {
                var fragment = '';
                if (value !== null || value !== undefined) {
                    if (typeof value === 'boolean') {
                        value = value ? 'true' : 'false';
                    } else if (typeof value === 'object') {
                        value = _.values(value).join(' ');
                    }
                } else {
                    value = '';
                }
                if (keyValueGlue !== undefined) {
                    fragment += key + keyValueGlue;
                }
                fragment += wrapper + value + wrapper;
                fragments.push(fragment);
            });

            return fragments.join(fragmentGlue);
        });

        //register a classic "for loop" helper
        //it also adds a local variable "i" as the index in each iteration loop
        hb.registerHelper('for', function(startIndex, stopIndex, increment, options) {
            var ret = '';
            startIndex = parseInt(startIndex);
            stopIndex = parseInt(stopIndex);
            increment = parseInt(increment);

            for (var i = startIndex; i < stopIndex; i += increment) {
                ret += options.fn(_.extend({}, this, { i: i }));
            }

            return ret;
        });

        hb.registerHelper('equal', function(var1, var2, options) {
            if (var1 == var2) {
                return options.fn(this);
            } else {
                return options.inverse(this);
            }
        });

        // register a "get property" helper
        // it gets the named property from the provided context
        hb.registerHelper('property', function(name, context) {
            return context[name] || '';
        });

        // register an 'includes' helper
        // it checks if value is in array
        hb.registerHelper('includes', function(haystack, needle, options) {
            if (_.contains(haystack, needle)) {
                return options.fn(this);
            }
        });
    };

    if (!Helpers0.__initialized) {
      Helpers0(Handlebars);
      Helpers0.__initialized = true;
    }
    var Template = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
      this.compilerInfo = [4,'>= 1.0.0'];
    helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
      var buffer = "", stack1, helper, functionType="function", escapeExpression=this.escapeExpression, self=this;

    function program1(depth0,data) {
      
      var buffer = "", stack1;
      buffer += "id=\""
        + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.attributes)),stack1 == null || stack1 === false ? stack1 : stack1.id)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
        + "\"";
      return buffer;
      }

    function program3(depth0,data) {
      
      var buffer = "", stack1;
      buffer += " "
        + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.attributes)),stack1 == null || stack1 === false ? stack1 : stack1['class'])),typeof stack1 === functionType ? stack1.apply(depth0) : stack1));
      return buffer;
      }

      buffer += "<input\n        ";
      stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.attributes)),stack1 == null || stack1 === false ? stack1 : stack1.id), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
      if(stack1 || stack1 === 0) { buffer += stack1; }
      buffer += "\n        class=\"qti-interaction qti-inlineInteraction qti-textEntryInteraction";
      stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.attributes)),stack1 == null || stack1 === false ? stack1 : stack1['class']), {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});
      if(stack1 || stack1 === 0) { buffer += stack1; }
      buffer += "\"\n        data-serial=\"";
      if (helper = helpers.serial) { stack1 = helper.call(depth0, {hash:{},data:data}); }
      else { helper = (depth0 && depth0.serial); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
      buffer += escapeExpression(stack1)
        + "\"\n        data-qti-class=\"textEntryInteraction\"\n        type=\"text\"\n>";
      return buffer;
      });
    function tpl(data, options, asString) {
      var html = Template(data, options);
      return (asString || true) ? html : $(html);
    }

    /*
     * This program is free software; you can redistribute it and/or
     * modify it under the terms of the GNU General Public License
     * as published by the Free Software Foundation; under version 2
     * of the License (non-upgradable).
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU General Public License
     * along with this program; if not, write to the Free Software
     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
     *
     * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);
     *
     */

    /**
     * Hide the tooltip for the text input
     * @param {jQuery} $input
     */
    var hideTooltip = function hideTooltip($input) {
        if ($input.data('$tooltip')) {
            $input.data('$tooltip').hide();
        }
    };

    /**
     * Create/Show tooltip for the text input
     * @param {jQuery} $input
     * @param {String} theme
     * @param {String} message
     */
    var showTooltip = function showTooltip($input, theme, message) {
        if ($input.data('$tooltip')) {
            $input.data('$tooltip').updateTitleContent(message);
        } else {
            var textEntryTooltip = tooltip.create($input, message, {
                theme: theme,
                trigger: 'manual'
            });

            $input.data('$tooltip', textEntryTooltip);
        }

        $input.data('$tooltip').show();
    };

    /**
     * Init rendering, called after template injected into the DOM
     * All options are listed in the QTI v2.1 information model:
     * http://www.imsglobal.org/question/qtiv2p1/imsqti_infov2p1.html#element10333
     *
     * @param {object} interaction
     */
    var render = function render(interaction) {
        var attributes = interaction.getAttributes(),
            baseType = interaction.getResponseDeclaration().attr('baseType'),
            $input = interaction.getContainer(),
            expectedLength,
            updateMaxCharsTooltip,
            updatePatternMaskTooltip,
            patternMask = interaction.attr('patternMask'),
            maxChars = parseInt(patternMaskHelper.parsePattern(patternMask, 'chars'), 10);

        // Setting up baseType
        switch (baseType) {
            case 'integer':
                $input.attr('inputmode', 'numeric');
                break;
            case 'float':
                $input.attr('inputmode', 'decimal');
                break;
            default:
                $input.attr('inputmode', 'text');
        }

        //setting up the width of the input field
        if (attributes.expectedLength) {
            //adding 2 chars to include reasonable padding size
            expectedLength = parseInt(attributes.expectedLength) + 2;
            $input.css('width', expectedLength + 'ch');
            $input.css('min-width', expectedLength + 'ch');
        }

        //checking if there's a placeholder for the input
        if (attributes.placeholderText) {
            $input.attr('placeholder', attributes.placeholderText);
        }

        if (maxChars) {
            updateMaxCharsTooltip = function updateMaxCharsTooltip() {
                var count = $input.val().length;
                var message, messageType;

                if (count) {
                    message = __('%d/%d', count, maxChars);
                } else {
                    message = __('%d characters allowed', maxChars);
                }

                if (count >= maxChars) {
                    $input.addClass('maxed');
                    messageType = 'warning';
                } else {
                    $input.removeClass('maxed');
                    messageType = 'info';
                }

                showTooltip($input, messageType, message);
                if (count && messageType === 'warning') {
                    hideTooltip($input);
                }
            };

            $input
                .attr('maxlength', maxChars)
                .on('focus.commonRenderer', function() {
                    updateMaxCharsTooltip();
                })
                .on('keyup.commonRenderer', function() {
                    updateMaxCharsTooltip();
                    containerHelper.triggerResponseChangeEvent(interaction);
                })
                .on('blur.commonRenderer', function() {
                    hideTooltip($input);
                });
        } else if (attributes.patternMask) {
            updatePatternMaskTooltip = function updatePatternMaskTooltip() {
                var regex = new RegExp(attributes.patternMask);

                hideTooltip($input);

                if ($input.val()) {
                    if (regex.test($input.val())) {
                        $input.removeClass('invalid');
                    } else {
                        $input.addClass('invalid');
                        showTooltip($input, 'error', __('This is not a valid answer'));
                    }
                }
            };

            $input
                .on('focus.commonRenderer', function() {
                    updatePatternMaskTooltip();
                })
                .on('keyup.commonRenderer', function() {
                    updatePatternMaskTooltip();
                    containerHelper.triggerResponseChangeEvent(interaction);
                })
                .on('blur.commonRenderer', function() {
                    hideTooltip($input);
                });
        } else {
            $input.on('keyup.commonRenderer', function() {
                containerHelper.triggerResponseChangeEvent(interaction);
            });
        }
    };

    var resetResponse = function resetResponse(interaction) {
        interaction.getContainer().val('');
    };

    /**
     * Set the response to the rendered interaction.
     *
     * The response format follows the IMS PCI recommendation :
     * http://www.imsglobal.org/assessment/pciv1p0cf/imsPCIv1p0cf.html#_Toc353965343
     *
     * Available base types are defined in the QTI v2.1 information model:
     * http://www.imsglobal.org/question/qtiv2p1/imsqti_infov2p1.html#element10333
     *
     * Special value: the empty object value {} resets the interaction responses
     *
     * @param {object} interaction
     * @param {object} response
     */
    var setResponse = function setResponse(interaction, response) {
        var responseValue;

        try {
            responseValue = pciResponse.unserialize(response, interaction);
        } catch (e) {}

        if (responseValue && responseValue.length) {
            interaction.getContainer().val(responseValue[0]);
        }
    };

    /**
     * Return the response of the rendered interaction
     *
     * The response format follows the IMS PCI recommendation :
     * http://www.imsglobal.org/assessment/pciv1p0cf/imsPCIv1p0cf.html#_Toc353965343
     *
     * Available base types are defined in the QTI v2.1 information model:
     * http://www.imsglobal.org/question/qtiv2p1/imsqti_infov2p1.html#element10333
     *
     * @param {object} interaction
     * @returns {object}
     */
    var getResponse = function getResponse(interaction) {
        var ret = { base: {} },
            value,
            $input = interaction.getContainer(),
            attributes = interaction.getAttributes(),
            baseType = interaction.getResponseDeclaration().attr('baseType'),
            numericBase = attributes.base || 10;

        if ($input.hasClass('invalid') || (attributes.placeholderText && $input.val() === attributes.placeholderText)) {
            //invalid response or response equals to the placeholder text are considered empty
            value = '';
        } else {
            if (baseType === 'integer') {
                value = locale.parseInt($input.val(), numericBase);
            } else if (baseType === 'float') {
                value = locale.parseFloat($input.val());
            } else if (baseType === 'string') {
                value = $input.val();
            }
        }

        ret.base[baseType] = isNaN(value) && typeof value === 'number' ? '' : value;

        return ret;
    };

    var destroy = function destroy(interaction) {
        $$1('input.qti-textEntryInteraction').each(function(index, el) {
            var $input = $$1(el);
            if ($input.data('$tooltip')) {
                $input.data('$tooltip').dispose();
                $input.removeData('$tooltip');
            }
        });

        //remove event
        $$1(document).off('.commonRenderer');
        containerHelper.get(interaction).off('.commonRenderer');

        //remove instructions
        instructionMgr.removeInstructions(interaction);

        //remove all references to a cache container
        containerHelper.reset(interaction);
    };

    /**
     * Set the interaction state. It could be done anytime with any state.
     *
     * @param {Object} interaction - the interaction instance
     * @param {Object} state - the interaction state
     */
    var setState = function setState(interaction, state) {
        if (_.isObject(state)) {
            if (state.response) {
                interaction.resetResponse();
                interaction.setResponse(state.response);
            }
        }
    };

    /**
     * Get the interaction state.
     *
     * @param {Object} interaction - the interaction instance
     * @returns {Object} the interaction current state
     */
    var getState = function getState(interaction) {
        var state = {};
        var response = interaction.getResponse();

        if (response) {
            state.response = response;
        }
        return state;
    };

    var TextEntryInteraction = {
        qtiClass: 'textEntryInteraction',
        template: tpl,
        render: render,
        getContainer: containerHelper.get,
        setResponse: setResponse,
        getResponse: getResponse,
        resetResponse: resetResponse,
        destroy: destroy,
        setState: setState,
        getState: getState
    };

    return TextEntryInteraction;

});
