define(['core/providerRegistry', 'taoQtiItem/qtiCommonRenderer/renderers/rendererProvider', 'taoQtiItem/reviewRenderer/renderers/rendererProvider'], function (providerRegistry, qtiRenderer, reviewRenderer) { 'use strict';

    providerRegistry = providerRegistry && providerRegistry.hasOwnProperty('default') ? providerRegistry['default'] : providerRegistry;
    qtiRenderer = qtiRenderer && qtiRenderer.hasOwnProperty('default') ? qtiRenderer['default'] : qtiRenderer;
    reviewRenderer = reviewRenderer && reviewRenderer.hasOwnProperty('default') ? reviewRenderer['default'] : reviewRenderer;

    /*
     * This program is free software; you can redistribute it and/or
     * modify it under the terms of the GNU General Public License
     * as published by the Free Software Foundation; under version 2
     * of the License (non-upgradable).
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU General Public License
     * along with this program; if not, write to the Free Software
     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
     *
     * Copyright (c) 2020 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);
     *
     */

    /**
     * This renderer manager registers two different renderers at the moment:
     * - qtiCommonRenderer: Standard renderer used for test taker view
     * - reviewRenderer: This renderer is meant to render items in review mode (which is ready-only with some enhancement)
     *
     * @param {string} rendererName
     * @returns {*|{init(): *, getRenderer(): *}|init}
     */
    function rendererStrategies(rendererName) {
        const name = rendererName || 'commonRenderer';
        const renderer = rendererStrategies.getProvider(name);

        return {
            init() {
                renderer.init.call(this);
                return this;
            },
            getRenderer() {
                return renderer.getRenderer();
            }
        };
    }

    providerRegistry(rendererStrategies);

    rendererStrategies.registerProvider(qtiRenderer.name, qtiRenderer);
    rendererStrategies.registerProvider(reviewRenderer.name, reviewRenderer);

    return rendererStrategies;

});
