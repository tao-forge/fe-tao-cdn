{"version":3,"file":"proxy.js","sources":["../src/proxy.js"],"sourcesContent":["/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016-2019 (original work) Open Assessment Technologies SA ;\n */\n/**\n * @author Jean-SÃ©bastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\nimport _ from 'lodash';\nimport async from 'async';\nimport delegator from 'core/delegator';\nimport eventifier from 'core/eventifier';\nimport providerRegistry from 'core/providerRegistry';\nimport tokenHandlerFactory from 'core/tokenHandler';\nimport connectivity from 'core/connectivity';\n\nvar _defaults = {};\n\nvar _slice = [].slice;\n\n/**\n * Defines a proxy bound to a particular adapter\n *\n * @param {String} proxyName - The name of the proxy adapter to use in the returned proxy instance\n * @param {Object} [config] - Some optional config depending of implementation,\n *                            this object will be forwarded to the proxy adapter\n * @returns {proxy} - The proxy instance, bound to the selected proxy adapter\n */\nfunction proxyFactory(proxyName, config) {\n    var proxy, delegateProxy, communicator, communicatorPromise;\n    var testDataHolder;\n\n    var extraCallParams = {};\n    var proxyAdapter = proxyFactory.getProvider(proxyName);\n    var initConfig = _.defaults(config || {}, _defaults);\n    var tokenHandler = tokenHandlerFactory();\n    var middlewares = {};\n    var initialized = false;\n    var onlineStatus = connectivity.isOnline();\n\n    /**\n     * Gets parameters merged with extra parameters\n     * @param {Object} [params]\n     * @returns {Object}\n     */\n    function getParams(params) {\n        var mergedParams = _.merge({}, params, extraCallParams);\n        extraCallParams = {};\n        return mergedParams;\n    }\n\n    /**\n     * Gets the aggregated list of middlewares for a particular queue name\n     * @param {String} queue - The name of the queue to get\n     * @returns {Array}\n     */\n    function getMiddlewares(queue) {\n        var list = middlewares[queue] || [];\n        if (middlewares.all) {\n            list = list.concat(middlewares.all);\n        }\n        return list;\n    }\n\n    /**\n     * Applies the list of registered middlewares onto the received response\n     * @param {Object} request - The request descriptor\n     * @param {String} request.command - The name of the requested command\n     * @param {Object} request.params - The map of provided parameters\n     * @param {Object} response The response descriptor\n     * @param {String} response.status The status of the response, can be either 'success' or 'error'\n     * @param {Object} response.data The full response data\n     * @returns {Promise}\n     */\n    function applyMiddlewares(request, response) {\n        // wrap each middleware to provide parameters\n        var list = _.map(getMiddlewares(request.command), function(middleware) {\n            return function(next) {\n                middleware(request, response, next);\n            };\n        });\n\n        // apply each middleware in series, then resolve or reject the promise\n        return new Promise(function(resolve, reject) {\n            async.series(list, function(err) {\n                // handle implicit error from response descriptor\n                if (!err && 'error' === response.status) {\n                    err = response.data;\n                }\n\n                if (err) {\n                    reject(err);\n                } else {\n                    proxy.trigger('receive', response.data, 'proxy');\n                    resolve(response.data);\n                }\n            });\n        });\n    }\n\n    /**\n     * Delegates the call to the proxy implementation and apply the middleware.\n     *\n     * @param {String} fnName - The name of the delegated method to call\n     * @returns {Promise} - The delegated method must return a promise\n     * @private\n     * @throws Error\n     */\n    function delegate(fnName) {\n        var request = { command: fnName, params: _slice.call(arguments, 1) };\n        if (!initialized && !_.contains(['install', 'init'], fnName)) {\n            return Promise.reject(new Error('Proxy is not properly initialized or has been destroyed!'));\n        }\n        return delegateProxy\n            .apply(null, arguments)\n            .then(function(data) {\n                // If the delegate call succeed the proxy is initialized.\n                // Place this set here to avoid to wrap the init() into another promise.\n                initialized = true;\n\n                // handle successful request\n                return applyMiddlewares(request, {\n                    status: 'success',\n                    data: data\n                });\n            })\n            .catch(function(data) {\n                // handle failed request\n                return applyMiddlewares(request, {\n                    status: 'error',\n                    data: data\n                });\n            });\n    }\n\n    /**\n     * Defines the test runner proxy\n     * @typedef {proxy}\n     */\n    proxy = eventifier({\n        /**\n         * Add a middleware\n         * @param {String} [command] The command queue in which add the middleware (default: 'all')\n         * @param {Function...} callback - A middleware callback. Must accept 3 parameters: request, response, next.\n         * @returns {proxy}\n         */\n        use: function use(command) {\n            var queue = command && _.isString(command) ? command : 'all';\n            var list = middlewares[queue] || [];\n            middlewares[queue] = list;\n\n            _.each(arguments, function(cb) {\n                if (_.isFunction(cb)) {\n                    list.push(cb);\n                }\n            });\n            return this;\n        },\n\n        /**\n         * Install the proxy.\n         * This step let's attach some features before the proxy reallys starts (before init).\n         *\n         * @param {Map} dataHolder - the test runner data holder\n         * @returns {*}\n         */\n        install: function install(dataHolder) {\n            if (dataHolder) {\n                testDataHolder = dataHolder;\n            }\n            return delegate('install', initConfig);\n        },\n\n        /**\n         * Initializes the proxy\n         * @param {Object} [params] - An optional list of parameters\n         * @returns {Promise} - Returns a promise. The proxy will be fully initialized on resolve.\n         *                      Any error will be provided if rejected.\n         * @fires init\n         */\n        init: function init(params) {\n            /**\n             * @event proxy#init\n             * @param {Promise} promise\n             * @param {Object} config\n             * @param {Object} params\n             */\n            return delegate('init', initConfig, getParams(params));\n        },\n\n        /**\n         * Uninstalls the proxy\n         * @returns {Promise} - Returns a promise. The proxy will be fully uninstalled on resolve.\n         *                      Any error will be provided if rejected.\n         * @fires destroy\n         */\n        destroy: function destroy() {\n            /**\n             * @event proxy#destroy\n             * @param {Promise} promise\n             */\n            return delegate('destroy').then(function() {\n                // The proxy is now destroyed. A call to init() is mandatory to be able to use it again.\n                initialized = false;\n\n                // a communicator has been invoked and...\n                if (communicatorPromise) {\n                    return new Promise(function(resolve, reject) {\n                        function destroyCommunicator() {\n                            communicator\n                                .destroy()\n                                .then(resolve)\n                                .catch(reject);\n                        }\n\n                        communicatorPromise\n                            // ... has been loaded successfully, then destroy it\n                            .then(function() {\n                                destroyCommunicator();\n                            })\n                            // ...has failed to be loaded, maybe no need to destroy it\n                            .catch(function() {\n                                if (communicator) {\n                                    destroyCommunicator();\n                                } else {\n                                    resolve();\n                                }\n                            });\n                    });\n                }\n            });\n        },\n\n        /**\n         * Get the map that holds the test data\n         * @returns {Map|Object} the dataHolder\n         */\n        getDataHolder: function getDataHolder() {\n            return testDataHolder;\n        },\n\n        /**\n         * Set the proxy as online\n         * @returns {proxy} chains\n         * @fires {proxy#reconnect}\n         */\n        setOnline: function setOnline() {\n            if (this.isOffline()) {\n                onlineStatus = true;\n                this.trigger('reconnect');\n            }\n            return this;\n        },\n\n        /**\n         * Set the proxy as offline\n         * @param {String} [source] - source of the connectivity change\n         * @returns {proxy} chains\n         * @fires {proxy#disconnect}\n         */\n        setOffline: function setOffline(source) {\n            if (this.isOnline()) {\n                onlineStatus = false;\n                this.trigger('disconnect', source);\n            }\n            return this;\n        },\n\n        /**\n         * Are we online ?\n         * @returns {Boolean}\n         */\n        isOnline: function isOnline() {\n            return onlineStatus;\n        },\n\n        /**\n         * Are we offline\n         * @returns {Boolean}\n         */\n        isOffline: function isOffline() {\n            return !onlineStatus;\n        },\n\n        /**\n         * For the proxy a connection error is an error object with\n         * source 'network', a 0 code and a false sent attribute.\n         *\n         * @param {Error|Object} err - the error to verify\n         * @returns {Boolean} true if a connection error.\n         */\n        isConnectivityError: function isConnectivityError(err) {\n            return _.isObject(err) && err.source === 'network' && err.code === 0 && err.sent === false;\n        },\n\n        /**\n         * Gets the security token handler\n         * @returns {tokenHandler}\n         */\n        getTokenHandler: function getTokenHandler() {\n            return tokenHandler;\n        },\n\n        /**\n         * Checks if a communication channel has been requested.\n         * @returns {Boolean}\n         */\n        hasCommunicator: function hasCommunicator() {\n            return !!communicatorPromise;\n        },\n\n        /**\n         * Gets access to the communication channel, load it if not present\n         * @returns {Promise} Returns a promise that will resolve the communication channel\n         */\n        getCommunicator: function getCommunicator() {\n            var self = this;\n            if (!initialized) {\n                return Promise.reject(new Error('Proxy is not properly initialized or has been destroyed!'));\n            }\n            if (!communicatorPromise) {\n                communicatorPromise = new Promise(function(resolve, reject) {\n                    if (_.isFunction(proxyAdapter.loadCommunicator)) {\n                        communicator = proxyAdapter.loadCommunicator.call(self);\n                        if (communicator) {\n                            communicator\n                                .before('error', function(e, err) {\n                                    if (self.isConnectivityError(err)) {\n                                        self.setOffline('communicator');\n                                    }\n                                })\n                                .on('error', function(err) {\n                                    self.trigger('error', err);\n                                })\n                                .on('receive', function(response) {\n                                    self.setOnline();\n                                    self.trigger('receive', response, 'communicator');\n                                })\n                                .init()\n                                .then(function() {\n                                    return communicator\n                                        .open()\n                                        .then(function() {\n                                            resolve(communicator);\n                                        })\n                                        .catch(reject);\n                                })\n                                .catch(reject);\n                        } else {\n                            reject(new Error('No communicator has been set up!'));\n                        }\n                    } else {\n                        reject(new Error('The proxy provider does not have a loadCommunicator method'));\n                    }\n                });\n            }\n            return communicatorPromise;\n        },\n\n        /**\n         * Registers a listener on a particular channel\n         * @param {String} name - The name of the channel to listen\n         * @param {Function} handler - The listener callback\n         * @returns {proxy}\n         * @throws TypeError if the name is missing or the handler is not a callback\n         */\n        channel: function channel(name, handler) {\n            if (!_.isString(name) || name.length <= 0) {\n                throw new TypeError('A channel must have a name');\n            }\n\n            if (!_.isFunction(handler)) {\n                throw new TypeError('A handler must be attached to a channel');\n            }\n\n            this.getCommunicator()\n                .then(function(communicatorInstance) {\n                    communicatorInstance.channel(name, handler);\n                })\n                // just an empty catch to avoid any error to be displayed in the console when the communicator is not enabled\n                .catch(_.noop);\n\n            this.on(`channel-${name}`, handler);\n\n            return this;\n        },\n\n        /**\n         * Sends an messages through the communication implementation.\n         * @param {String} channel - The name of the communication channel to use\n         * @param {Object} message - The message to send\n         * @returns {Promise} The delegated provider's method must return a promise\n         */\n        send: function send(channel, message) {\n            return this.getCommunicator().then(function(communicatorInstance) {\n                return communicatorInstance.send(channel, message);\n            });\n        },\n\n        /**\n         * Add extra parameters that will be added to the init or the next callTestAction or callItemAction\n         * This enables plugins to place parameters for next calls\n         * @param {Object} params - the extra parameters\n         * @returns {proxy}\n         */\n        addCallActionParams: function addCallActionParams(params) {\n            if (_.isPlainObject(params)) {\n                _.merge(extraCallParams, params);\n            }\n            return this;\n        },\n\n        /**\n         * Gets the test definition data\n         * @returns {Promise} - Returns a promise. The test definition data will be provided on resolve.\n         *                      Any error will be provided if rejected.\n         * @fires getTestData\n         */\n        getTestData: function getTestData() {\n            /**\n             * @event proxy#getTestData\n             * @param {Promise} promise\n             */\n            return delegate('getTestData');\n        },\n\n        /**\n         * Gets the test context\n         * @returns {Promise} - Returns a promise. The context object will be provided on resolve.\n         *                      Any error will be provided if rejected.\n         */\n        getTestContext: function getTestContext() {\n            /**\n             * @event proxy#getTestContext\n             * @param {Promise} promise\n             */\n            return delegate('getTestContext');\n        },\n\n        /**\n         * Gets the test map\n         * @returns {Promise} - Returns a promise. The test map object will be provided on resolve.\n         *                      Any error will be provided if rejected.\n         */\n        getTestMap: function getTestMap() {\n            /**\n             * @event proxy#getTestMap\n             * @param {Promise} promise\n             */\n            return delegate('getTestMap');\n        },\n\n        /**\n         * Sends the test variables\n         * @param {Object} variables\n         * @param {Boolean} deferred whether action can be scheduled (put into queue) to be sent in a bunch of actions later (default: false).\n         * @returns {Promise} - Returns a promise. The result of the request will be provided on resolve.\n         *                      Any error will be provided if rejected.\n         * @fires sendVariables\n         */\n        sendVariables: function sendVariables(variables, deferred) {\n            /**\n             * @event proxy#sendVariables\n             * @param {Promise} promise\n             */\n            return delegate('sendVariables', variables, deferred);\n        },\n\n        /**\n         * Calls an action related to the test\n         * @param {String} action - The name of the action to call\n         * @param {Object} [params] - Some optional parameters to join to the call\n         * @param {Boolean} deferred whether action can be scheduled (put into queue) to be sent in a bunch of actions later.\n         * @returns {Promise} - Returns a promise. The result of the request will be provided on resolve.\n         *                      Any error will be provided if rejected.\n         * @fires callTestAction\n         */\n        callTestAction: function callTestAction(action, params, deferred) {\n            /**\n             * @event proxy#callTestAction\n             * @param {Promise} promise\n             * @param {String} action\n             * @param {Object} params\n             */\n            return delegate('callTestAction', action, getParams(params), deferred);\n        },\n\n        /**\n         * Gets an item definition by its URI, also gets its current state\n         * @param {String} uri - The URI of the item to get\n         * @param {Object} [params] - addtional params to be appended\n         * @returns {Promise} - Returns a promise. The item data will be provided on resolve.\n         *                      Any error will be provided if rejected.\n         * @fires getItem\n         */\n        getItem: function getItem(uri, params) {\n            /**\n             * @event proxy#getItem\n             * @param {Promise} promise\n             * @param {String} uri\n             */\n            return delegate('getItem', uri, params);\n        },\n\n        /**\n         * Submits the state and the response of a particular item\n         * @param {String} uri - The URI of the item to update\n         * @param {Object} state - The state to submit\n         * @param {Object} response - The response object to submit\n         * @param {Object} [params] - addtional params to be appended\n         * @returns {Promise} - Returns a promise. The result of the request will be provided on resolve.\n         *                      Any error will be provided if rejected.\n         * @fires submitItem\n         */\n        submitItem: function submitItem(uri, state, response, params) {\n            /**\n             * @event proxy#submitItem\n             * @param {Promise} promise\n             * @param {String} uri\n             * @param {Object} state\n             * @param {Object} response\n             */\n            return delegate('submitItem', uri, state, response, getParams(params));\n        },\n\n        /**\n         * Calls an action related to a particular item\n         * @param {String} uri - The URI of the item for which call the action\n         * @param {String} action - The name of the action to call\n         * @param {Object} [params] - Some optional parameters to join to the call\n         * @param {Boolean} deferred whether action can be scheduled (put into queue) to be sent in a bunch of actions later.\n         * @returns {Promise} - Returns a promise. The result of the request will be provided on resolve.\n         *                      Any error will be provided if rejected.\n         * @fires callItemAction\n         */\n        callItemAction: function callItemAction(uri, action, params, deferred) {\n            /**\n             * @event proxy#callItemAction\n             * @param {Promise} promise\n             * @param {String} uri\n             * @param {String} action\n             * @param {Object} params\n             */\n            return delegate('callItemAction', uri, action, getParams(params), deferred);\n        },\n\n        /**\n         * Sends a telemetry signal\n         * @param {String} uri - The URI of the item for which sends the telemetry signal\n         * @param {String} signal - The name of the signal to send\n         * @param {Object} [params] - Some optional parameters to join to the signal\n         * @returns {Promise} - Returns a promise. The result of the request will be provided on resolve.\n         *                      Any error will be provided if rejected.\n         * @fires telemetry\n         */\n        telemetry: function telemetry(uri, signal, params) {\n            /**\n             * @event proxy#telemetry\n             * @param {Promise} promise\n             * @param {String} uri\n             * @param {String} signal\n             * @param {Object} params\n             */\n            return delegate('telemetry', uri, signal, params);\n        }\n    });\n\n    //listen for connectivty changes\n    connectivity\n        .on('offline', function() {\n            proxy.setOffline('device');\n        })\n        .on('online', function() {\n            proxy.setOnline();\n        });\n\n    // catch platform messages that come outside of the communicator component, then each is dispatched to the right channel\n    proxy\n        .on('message', function(channel, message) {\n            this.trigger(`channel-${channel}`, message);\n        })\n        .use(function(request, response, next) {\n            if (response.data && response.data.messages) {\n                // receive server messages\n                _.forEach(response.data.messages, function(msg) {\n                    if (msg.channel) {\n                        proxy.trigger('message', msg.channel, msg.message);\n                    } else {\n                        proxy.trigger('message', 'malformed', msg);\n                    }\n                });\n            }\n            next();\n        })\n        //detect failing request and change the online status\n        .use(function(request, response, next) {\n            if (proxy.isConnectivityError(response.data)) {\n                proxy.setOffline('request');\n            } else if (response.data && response.data.sent === true) {\n                proxy.setOnline();\n            }\n            next();\n        });\n\n    delegateProxy = delegator(proxy, proxyAdapter, {\n        name: 'proxy',\n        wrapper: function pluginWrapper(response) {\n            return Promise.resolve(response);\n        }\n    });\n\n    return proxy;\n}\n\nexport default providerRegistry(proxyFactory);\n"],"names":["_defaults","_slice","slice","proxyFactory","proxyName","config","proxy","delegateProxy","communicator","communicatorPromise","testDataHolder","extraCallParams","proxyAdapter","getProvider","initConfig","_","defaults","tokenHandler","tokenHandlerFactory","middlewares","initialized","onlineStatus","connectivity","isOnline","getParams","params","mergedParams","merge","getMiddlewares","queue","list","all","concat","applyMiddlewares","request","response","map","command","middleware","next","Promise","resolve","reject","async","series","err","status","data","trigger","delegate","fnName","call","arguments","contains","Error","apply","then","catch","eventifier","use","isString","each","cb","isFunction","push","install","dataHolder","init","destroy","destroyCommunicator","getDataHolder","setOnline","isOffline","setOffline","source","isConnectivityError","isObject","code","sent","getTokenHandler","hasCommunicator","getCommunicator","self","loadCommunicator","before","e","on","open","channel","name","handler","length","TypeError","communicatorInstance","noop","send","message","addCallActionParams","isPlainObject","getTestData","getTestContext","getTestMap","sendVariables","variables","deferred","callTestAction","action","getItem","uri","submitItem","state","callItemAction","telemetry","signal","messages","forEach","msg","delegator","wrapper","pluginWrapper","providerRegistry"],"mappings":"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"}