{"version":3,"file":"runnerComponent.js","sources":["../src/runnerComponent.js"],"sourcesContent":["/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2017-2019 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * A component that loads and instantiate a test runner inside an element\n *\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n * @author Jean-SÃ©bastien Conan <jean-sebastien@taotesting.com>\n */\n\nimport _ from 'lodash';\nimport component from 'ui/component';\nimport runnerFactory from 'taoTests/runner/runner';\nimport providerLoader from 'taoTests/runner/providerLoader';\nimport runnerComponentTpl from 'taoTests/runner/tpl/runnerComponent';\n\n/**\n * Validate required options from the configuration\n * @param {Object} config\n * @returns {Boolean} true if valid\n * @throws {TypeError} in case of validation failure\n */\nfunction validateTestRunnerConfiguration(config = {}) {\n    const requiredProperties = ['providers', 'options', 'serviceCallId'];\n    if (typeof config !== 'object') {\n        throw new TypeError(`The runner configuration must be an object, '${typeof config}' received`);\n    }\n    if (requiredProperties.some(property => typeof config[property] === 'undefined')) {\n        throw new TypeError(\n            `The runner configuration must contains at least the following properties : ${requiredProperties.join(',')}`\n        );\n    }\n    return true;\n}\n\n/**\n * Get the selected provider if set or infer it from the providers list\n * @param {String} type - the type of provider (runner, communicator, proxy, etc.)\n * @param {Object} config\n * @returns {String} the selected provider for the given type\n */\nfunction getSelectedProvider(type = 'runner', config = {}) {\n    if (config.provider && config.provider[type]) {\n        return config.provider[type];\n    }\n\n    if (config.providers && config.providers[type]) {\n        const typeProviders = config.providers[type];\n        if (typeof typeProviders === 'object' && (typeProviders.id || typeProviders.name)) {\n            return typeProviders.id || typeProviders.name;\n        }\n        if (Array.isArray(typeProviders) && typeProviders.length > 0) {\n            return typeProviders[0].id || typeProviders[0].name;\n        }\n    }\n    return false;\n}\n\n/**\n * Wraps a test runner into a component\n * @param {jQuery|HTMLElement|String} container - The container in which renders the component\n * @param {Object} config - The component configuration options\n * @param {String} config.serviceCallId - The identifier of the test session\n * @param {Object} config.providers\n * @param {Object} config.options\n * @param {Boolean} [config.loadFromBundle=false] - do we load the modules from the bundles\n * @param {Boolean} [config.replace] - When the component is appended to its container, clears the place before\n * @param {Number|String} [config.width] - The width in pixels, or 'auto' to use the container's width\n * @param {Number|String} [config.height] - The height in pixels, or 'auto' to use the container's height\n * @param {Function} [template] - An optional template for the component\n * @returns {runnerComponent}\n */\nexport default function runnerComponentFactory(container = null, config = {}, template = runnerComponentTpl) {\n    let runner = null;\n    let plugins = [];\n\n    if (!container) {\n        throw new TypeError('A container element must be defined to contain the runnerComponent');\n    }\n\n    validateTestRunnerConfiguration(config);\n\n    /**\n     * @typedef {runner} runnerComponent\n     */\n    const runnerComponent = component({\n        /**\n         * Gets the option's value\n         * @param {String} name - the option key\n         * @returns {*}\n         */\n        getOption(name) {\n            return this.config.options[name];\n        },\n\n        /**\n         * Gets the test runner\n         * @returns {runner}\n         */\n        getRunner() {\n            return runner;\n        }\n    })\n        .setTemplate(template)\n        .on('init', function() {\n            //load the defined providers for the runner, the proxy, the communicator, the plugins, etc.\n            return providerLoader(config.providers, config.loadFromBundle)\n                .then(results => {\n                    if (results && results.plugins) {\n                        plugins = results.plugins;\n                    }\n\n                    this.render(container);\n                    this.hide();\n                })\n                .catch(err => this.trigger('error', err));\n        })\n        .on('render', function() {\n            const runnerConfig = Object.assign(_.omit(this.config, ['providers']), {\n                renderTo: this.getElement()\n            });\n            const runnerProviderId = getSelectedProvider('runner', this.config);\n\n            runner = runnerFactory(runnerProviderId, plugins, runnerConfig)\n                .on('ready', () => {\n                    _.defer(() => {\n                        this.setState('ready')\n                            .trigger('ready', runner)\n                            .show();\n                    });\n                })\n                .on('destroy', () => runner = null )\n                .spread(this, 'error')\n                .init();\n        })\n        .on('destroy', function() {\n            var destroying = runner && runner.destroy();\n            runner = null;\n            return destroying;\n        })\n        .after('destroy', function() {\n            this.removeAllListeners();\n        });\n\n    return runnerComponent.init(config);\n}\n"],"names":["validateTestRunnerConfiguration","config","requiredProperties","TypeError","some","property","join","getSelectedProvider","type","provider","providers","typeProviders","id","name","Array","isArray","length","runnerComponentFactory","container","template","runnerComponentTpl","runner","plugins","runnerComponent","component","getOption","options","getRunner","setTemplate","on","providerLoader","loadFromBundle","then","results","render","hide","catch","err","trigger","runnerConfig","Object","assign","_","omit","renderTo","getElement","runnerProviderId","runnerFactory","defer","setState","show","spread","init","destroying","destroy","after","removeAllListeners"],"mappings":"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"}